[["Map",1,2,9,10,138,139,755,756],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.1","content-config-digest","09a1c358bb01eacc","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://robkendal.co.uk\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":3000,\"streaming\":true},\"redirects\":{\"/sitemap.xml\":{\"status\":301,\"destination\":\"/sitemap-index.xml\"},\"/freelance-jamstack-developer\":{\"status\":302,\"destination\":\"/enterprise-software-development\"},\"/blog/using-wordpress-as-a-headless-cms-with-next.js\":{\"status\":302,\"destination\":\"/blog/using-wordpress-as-a-headless-cms-with-nextjs\"},\"/blog/create-a-static-website-rss-feed-with-next.js\":{\"status\":302,\"destination\":\"/blog/create-a-static-website-rss-feed-with-nextjs\"},\"/arrow-functions-in-javascript\":{\"status\":302,\"destination\":\"/blog/how-to-use-arrow-functions-in-javascript-es6\"},\"/build-a-restful-node-api-server-using-json-files\":{\"status\":302,\"destination\":\"/blog/build-a-restful-node-api-server-using-json-and-typescript\"},\"/tags/java-script\":{\"status\":302,\"destination\":\"/tags/javascript\"},\"/headless-wordpress-websites\":{\"status\":302,\"destination\":\"/enterprise-software-development\"},\"/blog/configuring-wordpress-as-a-headless-cms-with-next.js\":{\"status\":302,\"destination\":\"/blog/configuring-wordpress-as-a-headless-cms-with-nextjs\"},\"/blog/how-to-get-intro-the-web-development-industry\":{\"status\":302,\"destination\":\"/blog\"},\"/everthing-wrong-with-css-in-js\":{\"status\":302,\"destination\":\"/blog/why-is-css-in-js-a-bad-or-good-idea\"},\"/how-to-land-that-dev-job-youve-always-wanted\":{\"status\":302,\"destination\":\"/blog\"},\"/nest-smart-home-review\":{\"status\":302,\"destination\":\"/blog/nest-cam-nest-protect-and-nest-thermostat-review-1-year-in\"},\"/are-tech-tests-still-relevant\":{\"status\":302,\"destination\":\"/blog/are-tech-tests-still-relevant-in-todays-hiring-landscape\"},\"/webpack-project-starter-kit\":{\"status\":302,\"destination\":\"/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit\"},\"/blog/2024-11-21-detecting-os-level-dark-mode-\":{\"status\":302,\"destination\":\"/blog/2024-11-21-detecting-os-level-dark-mode\"}},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalLayout\":\"responsive\"},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"nord\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":true},\"legacy\":{\"collections\":false}}","testimonials",["Map",11,12,27,28,42,43,58,59,74,75,90,91,106,107,122,123],"testimonial-2",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"rendered":20,"legacyId":26},{"avatar":14,"avatarAlt":15,"cite":16},"/img/avatars/heidi.jpeg","Heidi Green","Heidi Green, Business Manager at Selby Council","Rarely do you meet someone who gives so generously of their knowledge, sharing so much information to help others achieve their goals. Rob is an inspiration in his approach, taking the fear out of what sometimes seems an overwhelming task. Professional, approachable, innovative, what more can I say!","src/content/testimonials/testimonial-2.md","56c2918996d33b6d",{"html":21,"metadata":22},"\u003Cp>Rarely do you meet someone who gives so generously of their knowledge, sharing so much information to help others achieve their goals. Rob is an inspiration in his approach, taking the fear out of what sometimes seems an overwhelming task. Professional, approachable, innovative, what more can I say!\u003C/p>",{"headings":23,"imagePaths":24,"frontmatter":25},[],[],{"avatar":14,"avatarAlt":15,"cite":16},"testimonial-2.md","testimonial-3",{"id":27,"data":29,"body":32,"filePath":33,"digest":34,"rendered":35,"legacyId":41},{"avatar":30,"avatarAlt":31,"cite":31},"/img/avatars/simeron.jpeg","Simeron Taak","Rob has been an excellent mentor for me. I would definitely recommend working with Rob to any developers looking for a mentor. Rob has been part of my biggest JavaScript progression to date.","src/content/testimonials/testimonial-3.md","5ef53d73c756a47c",{"html":36,"metadata":37},"\u003Cp>Rob has been an excellent mentor for me. I would definitely recommend working with Rob to any developers looking for a mentor. Rob has been part of my biggest JavaScript progression to date.\u003C/p>",{"headings":38,"imagePaths":39,"frontmatter":40},[],[],{"avatar":30,"avatarAlt":31,"cite":31},"testimonial-3.md","testimonial-6",{"id":42,"data":44,"body":48,"filePath":49,"digest":50,"rendered":51,"legacyId":57},{"avatar":45,"avatarAlt":46,"cite":47},"/img/avatars/andrea-hall.jpeg","Andrea Hall","Andrea Hall, Director","Rob has been managing my website for years, but more recently I turned to him for a complete re-build to a bespoke ecommerce solution. I trust him implicitly to know what system is best for my business, and to simplify the process for me. It feels like a colleague relationship rather than a supplier, and the quality of his support, and patience is invaluable.","src/content/testimonials/testimonial-6.md","141ab8acfe856fb1",{"html":52,"metadata":53},"\u003Cp>Rob has been managing my website for years, but more recently I turned to him for a complete re-build to a bespoke ecommerce solution. I trust him implicitly to know what system is best for my business, and to simplify the process for me. It feels like a colleague relationship rather than a supplier, and the quality of his support, and patience is invaluable.\u003C/p>",{"headings":54,"imagePaths":55,"frontmatter":56},[],[],{"avatar":45,"avatarAlt":46,"cite":47},"testimonial-6.md","testimonial-1",{"id":58,"data":60,"body":64,"filePath":65,"digest":66,"rendered":67,"legacyId":73},{"avatar":61,"avatarAlt":62,"cite":63},"/img/avatars/ann.jpeg","Anne de Freyman","Anne de Freyman, Director","I struggled for years to find the right person to build a website I would be proud of for my business. Until I met Rob. I was impressed with Rob's creative talent and his patience. He built exactly the website I wanted and gave me all the help I needed to make it work. Superlative customer service!","src/content/testimonials/testimonial-1.md","8afffcd35ff69471",{"html":68,"metadata":69},"\u003Cp>I struggled for years to find the right person to build a website I would be proud of for my business. Until I met Rob. I was impressed with Rob’s creative talent and his patience. He built exactly the website I wanted and gave me all the help I needed to make it work. Superlative customer service!\u003C/p>",{"headings":70,"imagePaths":71,"frontmatter":72},[],[],{"avatar":61,"avatarAlt":62,"cite":63},"testimonial-1.md","testimonial-5",{"id":74,"data":76,"body":80,"filePath":81,"digest":82,"rendered":83,"legacyId":89},{"avatar":77,"avatarAlt":78,"cite":79},"/img/avatars/asam.jpeg","Asam Shan","Asam Shan, mentee student","Rob is great! He has a real knack of instilling confidence by breaking down and simplifying any problem I've had. He is always available and genuinely happy to help.","src/content/testimonials/testimonial-5.md","d6924fd9c72bae06",{"html":84,"metadata":85},"\u003Cp>Rob is great! He has a real knack of instilling confidence by breaking down and simplifying any problem I’ve had. He is always available and genuinely happy to help.\u003C/p>",{"headings":86,"imagePaths":87,"frontmatter":88},[],[],{"avatar":77,"avatarAlt":78,"cite":79},"testimonial-5.md","testimonial-4",{"id":90,"data":92,"body":96,"filePath":97,"digest":98,"rendered":99,"legacyId":105},{"avatar":93,"avatarAlt":94,"cite":95},"/img/avatars/hannah.png","Hannah Thorpe","Hannah Thorpe, Founder at Verkeer","Rob is a pleasure to work with - so responsive, quality work and happy to take the time to explain anything we needed. Would 100% recommend.","src/content/testimonials/testimonial-4.md","45df5b7cf28aec65",{"html":100,"metadata":101},"\u003Cp>Rob is a pleasure to work with - so responsive, quality work and happy to take the time to explain anything we needed. Would 100% recommend.\u003C/p>",{"headings":102,"imagePaths":103,"frontmatter":104},[],[],{"avatar":93,"avatarAlt":94,"cite":95},"testimonial-4.md","testimonial-7",{"id":106,"data":108,"body":112,"filePath":113,"digest":114,"rendered":115,"legacyId":121},{"avatar":109,"avatarAlt":110,"cite":111},"/img/avatars/sc-logo-1.png","Derek Thompson","Derek Thompson, Director at Surf Classic","Surf Classic has been working with Rob since our \"Get Go\" and despite us being a smaller company with limited in house IT experience, have received the best advice, technical support and most importantly positive personal input.","src/content/testimonials/testimonial-7.md","b8322ac3341c2f9c",{"html":116,"metadata":117},"\u003Cp>Surf Classic has been working with Rob since our “Get Go” and despite us being a smaller company with limited in house IT experience, have received the best advice, technical support and most importantly positive personal input.\u003C/p>",{"headings":118,"imagePaths":119,"frontmatter":120},[],[],{"avatar":109,"avatarAlt":110,"cite":111},"testimonial-7.md","testimonial-8",{"id":122,"data":124,"body":128,"filePath":129,"digest":130,"rendered":131,"legacyId":137},{"avatar":125,"avatarAlt":126,"cite":127},"/img/avatars/claire.jpeg","Claire Horsfield","Claire Horsfield, Director","Rob helped us setup HubSpot and integrate it with my website. Rob's work is professional and to a high standard, always being completed quickly. He helped us learn the new software quickly.","src/content/testimonials/testimonial-8.md","00eb85d58ae03e58",{"html":132,"metadata":133},"\u003Cp>Rob helped us setup HubSpot and integrate it with my website. Rob’s work is professional and to a high standard, always being completed quickly. He helped us learn the new software quickly.\u003C/p>",{"headings":134,"imagePaths":135,"frontmatter":136},[],[],{"avatar":125,"avatarAlt":126,"cite":127},"testimonial-8.md","blog",["Map",140,141,157,158,169,170,182,183,194,195,206,207,218,219,232,233,245,246,257,258,269,270,281,282,294,295,306,307,318,319,330,331,343,344,355,356,367,368,379,380,392,393,404,405,417,418,432,433,446,447,458,459,472,473,485,486,497,498,509,510,521,522,534,535,547,548,559,560,573,574,585,586,597,598,608,609,620,621,633,634,645,646,657,658,669,670,681,682,694,695,706,707,719,720,731,732,743,744],"2019-04-29-using-parcel-bundler-with-react-js",{"id":140,"data":142,"body":152,"filePath":153,"digest":154,"legacyId":155,"deferredRender":156},{"title":143,"description":144,"featured":145,"featuredimage":146,"date":147,"tags":148},"Using Parcel JS bundler with React","You can build a Parcel JS website using React, instead of using Create React App. In this article, we'll look at  how to add in the missing parts of the Parcel JS bundler to allow us to build sites with React.",false,"/img/react-parcel-blog-post.png",["Date","2019-04-27T07:06:11.293Z"],[149,150,151],"Development","JavaScript","React","A few days ago I wrote an article about my [Parcel JS starter kit](/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/) and using [Parcel JS bundler as an alternative to the popular Webpack](/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/) (and yes, I even have a [Webpack starter kit](/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit/)!).\n\nHowever, if you're quite keen on using React, but don't want to go down the [Create React App](https://facebook.github.io/create-react-app/) route, read on! I'm going to build on the [Parcel JS starter kit](/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/) and add in a few necessary pieces of the puzzle so you can use [React JS](https://reactjs.org/) with your Parcel projects.\n\n## What's wrong with Create React App?\n\nTo be honest, not much. It's a **fantastic resource** and I use it personally and professionally without a hitch. However, Create React App abstracts its underlying Webpack set up. This abstraction isn't suitable for everyone and every project, and some people just don't want to sacrifice control of their configuration.\n\nBut of course the gain in control by eschewing Create React App's config secrets is offset by the additional work needed to get it playing nicely with a system like Webpack or Parcel.\n\nWell, until now!\n\n## How do I use React with Parcel JS?\n\nBecause we're going solo for now, we have to add a few things to our project in order to get React working and start using the nice, shiny ES6 language syntax and features. Namely:\n\n- React (and some React bits, such as React Component).\n- Babel. For Babel, we're also going to add the correct preset and some React niceties so that Babel and React play well with each other.\n- Package.json. Yes, this is already in the project, but we need to change a few things in here to make everything work.\n\n### It started with a kit\n\nWe're going to build upon the [CodeSandbox example from the previous article](https://codesandbox.io/s/8z4vzk10p8?fontsize=14) which, you may remember, looks like this:\n\n![Screenshot showing parcel in action](/img/screenshot_2019-04-27-codesandbox-1-.png 'Screenshot of Parcel JS loading the text')\n\nWhich is using plain ol' JavaScript to load the following code:\n\n```javascript\nconst myName = {\n  firstName: 'Parcel',\n  lastName: 'Tastic',\n};\ndocument.querySelector(\n  '#app'\n).innerHTML = `Hello there, ${myName.firstName} ${myName.lastName}`;\n```\n\n### Adding React (and friends) to the base project\n\nLet's React-ify (can I claim this new word?) this puppy! We'll need to add React (no kidding!), Babel, and add some settings into the recipe.\n\nFirst things first: let's add React with the following command:\n\n```\nyarn add react react-dom\n```\n\nThis will add the base React JS library and the React DOM module, giving us access to actually output our stuff onto the page. Next, we'll add some Babel transpilation configuration goodness.\n\nWhen it comes to Babel, Parcel is such a good egg that it includes Babel by default (you can [read Parcel's transforms documentation](https://parceljs.org/transforms.html) for more information), but you **have to add a _.babelrc_ file to your route to enable this feature!**.\n\nWe do, however, have to add Babel's React preset, so let's do that now:\n\n```\nyarn add @babel/preset-react --dev\n```\n\nNow, there's just the tiny matter of creating a `.babelrc` file in the route of our project and adding in some configuration options:\n\n```json\n{\n  \"presets\": [\"env\", \"@babel/preset-react\"]\n}\n```\n\nIn the `.babelrc` file, we're essentially telling Babel to use its ES2015/ES6 transpilation options, but also look after some React specifics, such as .jsx syntax.\n\n### Updating our index.js to use React\n\nIf you save, build and refresh everything, you'll be a little disappointed. Nothing's actually going to do anything with React just yet, we have to swap out our vanilla JS for some React code!\n\nOpen up the `/index.js` file and add in some React to replace the element selector we had before.\n\n```javascript\n// firstly, we need to import React and ReactDOM\n// this enables us to create React components and render them on the page\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// our 'myName' object remains the same\nconst myName = {\n  firstName: 'Parcel',\n  lastName: 'Tastic',\n};\n\n// let's create a simple stateless React component that accepts a name object\n// and outputs a heading level 2\nconst Title = (props) => {\n  return (\n    \u003Ch2>\n      Hello there, {props.name.firstName} {props.name.lastName}\n    \u003C/h2>\n  );\n};\n\n// finally, we're taking the same #app id selector to find out main HTML element\n// and passing that, plus our Title component to React to render\nReactDOM.render(\u003CTitle name={myName} />, document.querySelector('#app'));\n```\n\nTa da! Nothing very flash, just black text on a white background, but it does the trick and is a great example of what you can do with very little effort using Parcel and React together.\n\n![Heading text loaded using Parcel and React](/img/screenshot_2019-04-27-codesandbox.png 'Heading text loaded using Parcel and React')\n\n## The complete example and next steps\n\nIf you'd like to explore the entire project, you can [have a look over at the CodeSandbox site](https://codesandbox.io/s/w0410q1228?fontsize=14) and check it out. Alternatively, I've embedded the full project below for your perusal.\n\n{% iframe\n  url=\"https://codesandbox.io/embed/w0410q1228?fontsize=14\"\n  label=\"Parcel example using React from blog\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\nFrom here, the world's your oyster. At the moment, we've **added React to a Parcel JS project** and made it do something, well, React-y. But you can edit this, add more components and make it into a fully-fledged React SPA or web app -- sky's the limit!\n\nEither way, hopefully you can get a feel for the power of Parcel JS and the flexibility it offers when it comes to finding alternatives to more complex beasts, such as Create React App or Webpack.","src/content/blog/2019-04-29-using-parcel-bundler-with-react-js.mdoc","cbd9121d0d5f06bb","2019-04-29-using-parcel-bundler-with-react-js.mdoc",true,"2019-04-26-using-parcel-bundler-as-a-webpack-alternative",{"id":157,"data":159,"body":165,"filePath":166,"digest":167,"legacyId":168,"deferredRender":156},{"title":160,"description":161,"featured":145,"featuredimage":162,"date":163,"tags":164},"Using Parcel bundler as a Webpack alternative","Parcel JS is a Webpack alternative that helps you build modern JavaScript projects. If you're looking for a simple Webpack alternative, try this Parcel JS starter kit.","/img/blog-parcel-bundler-alternative.jpg",["Date","2019-04-26T07:06:11.293Z"],[149,150,151],"I've recently become a [mentor on Coding Coach](https://codingcoach.io/) and found that a lot of development struggles seem to happen right at the first hurdle: project set up. People have lots of great ideas, but find it hard to get started, what with all the choice of languages, design systems, and general project set up.\n\nDepending on what you want to work with there are lots of options out there, including [Create React App](https://facebook.github.io/create-react-app/) (for React-based projects) and bundlers such as Webpack for more general JavaScript web apps or if you want more control over your projects in's and out's.\n\nWebpack in particular is awesome, but quite involved to get configured to a decent spec for most modern web projects. To help with this, I created the [Webpack starter kit](/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit/), that includes common helper plugins and all the configuration for development and production environments.\n\nGreat, I hear you say, so why are we talking about [Parcel](https://parceljs.org/)?\n\n## What is Parcel and why is it a great Webpack alternative?\n\nParcel JS is a comparable Webpack alternative that offers much of the same features and functionality as Webpack but in a much more straightforward fashion and with more of the 'standard' options configured out of the box.\n\nFor example, if will automatically find and link JavaScript dependencies from your very first starting file and also help to bundle common web assets, such as images and CSS files; something that Webpack doesn't do natively, out of the box.\n\nRight now, it feels like Parcel is a little less well-known, a little underground even, but it's gathering traction as a genuine alternative to Webpack.\n\nThe real big, killer feature of Parcel is that it offers a very web-project-friendly configuration out the box with **almost zero faff needed**.\n\nThe [documentation for Parcel](https://parceljs.org/getting_started.html) is fantastic: simple, to the point and well worth checking out.\n\n![Workbench filled with tools](/img/cesar-carlevarino-aragon-778069-unsplash.jpg 'Image credit to Cesar Carlevarino-aragon via Unsplash')\n\n## Getting started with Parcel\n\nParcel couldn't be easier to get going with Parcel for your next project. In fact, there are only four steps to getting going:\n\n1. Install Parcel\n2. Create a `package.json` file\n3. Create a starting/entry point (e.g. `index.html`)\n4. Call the parcel command against the file\n\nThe first two points can be achieved like this:\n\n```javascript\n/* add it globally, so it's available to all your projects */\nyarn global add parcel-bundler\n```\n\nand initialise the project, adding a package.json file.\n\n```javascript\nyarn init -y\n```\n\nNow, at step 3, we can just create two files to do something useful. First, a starter html file\n\n```html\n/* add this to your project root as index.html */\n\u003Chtml>\n  \u003Cbody>\n    \u003Cmain id=\"app\">\u003C/main>\n    \u003Cscript src=\"./index.js\">\u003C/script>\n  \u003C/body>\n\u003C/html>\n```\n\nNext, we need an initial JS file to do some work:\n\n```javascript\n/* again, add this file to your project root as index.js */\nconst myName = {\n  firstName: 'Parcel',\n  lastName: 'Tastic',\n};\ndocument.querySelector(\n  '#app'\n).innerHTML = `Hello there, ${myName.firstName} ${myName.lastName}`;\n```\n\nFinally, kick it all off using the parcel command:\n\n```javascript\nparcel index.html\n```\n\nAnd that's it (for now). Parcel handily includes a development server (you can browse to `http://localhost:1234` to view the output of the code above) so you should see the above rendered something like this output from my Code Sandbox instance:\n\n{% iframe\n  url=\"https://codesandbox.io/embed/8z4vzk10p8?fontsize=14\"\n  label=\"Parcel example from blog\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Introducing the Parcel JS starter kit\n\nUsing those four simple steps above, you can get a project flying off the ground in under 10 minutes. However, if you want something a little bit more, such as the ability to use SASS or newer, ES6 language features, you'll need some additional config to get started.\n\nThat's why (along with my [Webpack starter kit](/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit/)) I've created a similar starter project for those interested in using Parcel.\n\n### What's included in the kit?\n\nNot a great deal to be honest. Because Parcel is so helpful and ready to go, straight out of the box, this starter project just sprinkles a few nice-to-haves on top of the base files we went through earlier in this article.\n\nSpecifically, working through the project, it includes:\n\n- `index.html` - where it all begins. This file is set as the main entry point in your `package.json` file and where Parcel takes its cue to load the resources it finds from there. This base HTML starting point adds a few niceties in such as a mobile viewport meta and 'no script' tags.\n- `.babelrc` - if you want to use newer JS language features right now, you need Babel. Babel is installed as a dependency in the project already, but you need this small config file in your project root to enable the Babel goodness.\n- `package.json` - nothing too fancy in here beyond the usual project information. It does, however, contain a `start `command for running development services locally and a `build` command that will bundle your project up and add it to the `/dist` folder for deployment.\n- `src/index.js` - the first file that Parcel looks for at the start of its bundling journey. Parcel will begin here and look for any other files that are referenced within it, loading them up and bundling as needed.\n- `src/app.scss` - a simple, starting point for your SASS files. It adds a default font family and size, but should be used as a starting point for the rest of your project's style files.\n- `/dist` - this folder contains (or will contain) the squished, bundled files that are output by Parcel, following a production build command -- available from the `package.json` file as `yarn build`.\n\n### Using the Parcel starter project\n\nI've tried to keep the starter project super simple to use -- just like Parcel itself! All you need to get going is another four steps:\n\n1. Fork the repo (available here: \u003Chttps://github.com/bpk68/parcel-template>) or download the files\n2. Run `yarn install`\n3. Edit anything you like\n4. Run `yarn start` - your browser should open up to something like http://localhost:1234\n\nAnd that's it. Super simple.\n\n## Need something else? Try createapp.dev\n\nAs well as the [Parcel starter kit](https://github.com/bpk68/parcel-template) from this article, there is a [handy tool available called Create App](https://createapp.dev/parcel) and it includes a Parcel project setup. Essentially, you can check a bunch of options using a GUI to configure a Webpack or Parcel project if your needs are a little more specific or you want something different to begin with.\n\nDefinitely worth some time investigating!","src/content/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative.mdoc","592b1a3c6e870d7a","2019-04-26-using-parcel-bundler-as-a-webpack-alternative.mdoc","2019-05-04-getting-hired-as-a-developer-in-the-tech-industry",{"id":169,"data":171,"body":178,"filePath":179,"digest":180,"legacyId":181,"deferredRender":156},{"title":172,"description":173,"featured":145,"featuredimage":174,"date":175,"tags":176},"Getting hired as a developer in the tech industry","If you're looking to land your first job as a web developer in the tech industry, then I have a ton of advice that might just give you the boost you need.","/img/getting-a-development-job-blog-post.png",["Date","2019-05-04T14:02:06.729Z"],[177],"Thoughts","![Header image for getting hired as a developer blog article](/img/getting-a-development-job-blog-post.png)\n\nAs a mentor on the fabulous learning resource that is [Coding Coach](https://codingcoach.io/) (set up by the inspiring [Emma Wedekind](https://twitter.com/EmmaWedekind)), I come across a lot of mentees who are looking for their first job as a developer.\n\nI also try to be active in the local (and not-so-local) development circles and the theme keeps cropping up again; many new and first-time developers are looking to land their first job and kick-off their careers.\n\nOccasionally, more seasoned developers also want to move on and find new jobs or take the next step on their ladder — perhaps to senior positions or development managers.\n\nSo, I wanted to help my fellow developers and developers to be on their way and share some things that have helped me on my journey so far:\n\n- Tips and tricks — getting organised and using a process to hunt that job.\n- Advice and anecdotes from my own journey.\n- Guidance on tech tests — a frustrating, but common part of the development interview process.\n- Some developer job hunting myths and trying to dispel them.\n\nThis is a bumper blog post, so here's a handy table of contents to help you cut to the chase:\n\n- [Step 1: developing a game plan](#step1)\n- [Step 2: applying for developer jobs](#step2)\n- [Step 3: handling the interview process](#step3)\n- [Step 4: dealing with rejection](#step4)\n- [Resources and links](#resources)\n\n## Why should you listen to me?\n\nI am not the best developer in the world: I still make mistakes, I still learn and grow and adapt, just like anyone else in our industry. However, I have over 20 years in the industry and I've had a fair few jobs. I interview very well and I've seen my share of great interview processes and horror stories so I can share my experiences and give you some practical advice and opinions on how you can improve your own job hunting game.\n\nI also have a shorter, hot-take article on [job hunting in the tech industry](/blog/job-hunting-in-the-tech-industry-tips-tricks-and-experiences/) if you'd like even more info.\n\n## \u003Ca name=\"step1\">\u003C/a>Step 1: developing a game plan\n\nBefore you start hitting the apply button and throwing CV's at employers like Gambit from X-men, I think it's helpful to take a step back and think about a few things that will absolutely help you when you're in the midst of a handful of interview processes.\n\n### Prepare yourself mentally and frame job hunting as a process\n\nJob hunting can be a gruelling, thankless process. Think about it, the odds are not always tipped in your favour. Not only have you got to find a job you like, at a company you like, with _people_ you like doing it with, you have to submit a CV along with other people who all want the job as much as you.\n\nThen, you have to wait for feedback, do interviews (yes, plural), maybe technical tests and hope that you've done enough to get that valuable offer...\n\nThis shouldn't be read or thought of as doom and gloom but it's just practical to know this upfront: you are more likely to apply to more jobs than you get offers.\n\nBy framing your job hunting journey as a bit of a sales process, it helps to stop those bothersome thoughts about 'not being good enough' or 'being rejected again'. Think of it as a sale: you're selling yourself to the company and, if they're not buying, it's not because you're not good enough. It's about a lot of factors: timing, personalities, culture, technical skills, and so on.\n\nIf you can shift your mental approach and thinking around how you tackle job hunting, you'll be able to deal with feedback and rejection much more smoothly and move on to the next opportunity.\n\n### Get a process that works for you\n\nPeople approach job hunting in very different ways. For example, I have a friend who likes to take his time, applying for maybe one or two roles at a time, seeing how they pan out and being careful not to overwhelm himself.\n\nI, on the other hand, I prefer to attack it and apply for multiple roles that pique my interest, handling and tracking everything using [Trello](https://trello.com). I play the numbers game and treat the job hunting process as a large project, which can be broken down and tackled in small parts — a little like a Sprint board, but for jobs.\n\n![Todo list in a notebook](/img/checklist-composition-handwriting-1226398.jpg 'Photo by Suzy Hazelwood from Pexels')\n\nHow you tackle your own job hunting process is up to you. However, I recommend using a project management tool to track your applications. I use Trello but [Asana](https://asana.com/) or [Evernote](https://evernote.com/) will work. **Basically, anything that allows you to mark a job as being at a particular point in the application process.**\n\nI've found this hugely valuable because you rarely apply for one job at a time and job applications are very asynchronous things, and information such as people, dates, and tasks can become easily lost in the overwhelming deluge of emails, phone calls, etc.\n\nApproaching your application process in this way helps in a number of ways:\n\n- Track where you are in any one company's journey — initial CV sent, phone interview, tech test, etc.\n- Keep a list of key people's names and their roles in the process — recruiters, CTO's, hiring managers, and so on\n- Manage interview dates and keep a calendar of what's next\n- Add reminders for key dates or feedbacks/responses being due, or jobs you have to complete\n- Add in conversation highlights.\n\n### An example using Trello\n\nHere's my typical job hunting board on Trello:\n\n![Screenshot of a job hunting board in Trello](/img/screenshot_2019-05-04-job-applications-trello.png)\n\nI start off with a few columns for the states of applications I've made. Something like this:\n\n- Initial conversation or application submitted\n- Phone interview scheduled\n- Tech test scheduled\n- In person interview scheduled\n- Blackholed applications (e.g. roles that have not replied or responded after 7, 14, 20 days)\n- Application unsuccessful\n- Application successful\n\nWithin here, I'll add cards for each role, each containing some important information about who the role is with, people I've spoken to, my feelings about the job, and any key dates of note.\n\nAs I complete a step, I'll move the card along to the next logical column, depending on how the company in question handles the application.\n\n## \u003Ca name=\"step2\">\u003C/a> Step 2: applying for developer jobs\n\nYou've done the prep, you're as ready as you'll ever be, let's get applying for jobs!\n\n### Research some companies you'd like to work for\n\nIt might sound like a obvious move, but the best place to start is to research some of the companies you would love to work for. This might be local agencies or development houses, it might be huge, global corporations. Whatever your reasons or motivations, be sure to note down the _why_ of why you'd like to work there.\n\nIs it the culture, the people, the work you'll be doing, something else?\n\nBy getting a good handle on the qualities of places you'd like to work, it'll help you narrow down where exactly to spend your time applying for roles and which roles to pass on.\n\n**A scatter gun approach to job applications is not a good idea.** Keep your job search wide and your job applications narrow!\n\n### Build a network\n\nOne thing that has absolutely, 100% helped me when I've been looking for roles is my network. Your contact network might involve a few different facets — I know mine does! — but leverage what you can and be honest about what you need from it.\n\nI find [LinkedIn](https://www.linkedin.com/in/robkendal/) a great resource to connect with a range of different people who can help each other out:\n\n- Recruiters and internal hiring managers\n- Colleagues (current and previous)\n- Like-minded people in the same industry\n\nThis is a slow process that involves getting regularly involved in conversations and sharing helpful content. This helps people to build up a picture of you and your skills, which, in turn, pays dividends when you need to request a shout out or are looking for a job, for example.\n\n![People around a table fistbumping](/img/bump-collaboration-colleagues-1068523.jpg ' Photo by rawpixel.com from Pexels')\n\nBut remember to keep things even: don't take take take from your network and never put anything back. Be sure to cultivate good relationships and reciprocate where you can, offering your own advice and support to those who need your help.\n\n### Writing a killer CV (resume)\n\nOf course, any job usually starts with a CV being submitted for the role. However, not all CV's are created equal. It's easy to put too much information or not enough in there and get passed over for jobs, just because it didn't capture the reader's attention.\n\nA CV is your sales tool. It needs to highlight you and your skills (both hard and soft) and essentially deliver one thing: **it should make the person reading it want to see you in person.**\n\n> A CV doesn't have to have everything you've done on there, nor do you have to have 100 years of experience at 'XYZ'. Give people something interesting and let them invite you in for more detail\n\nI would recommend using the press release inverted pyramid technique when it comes to writing an interesting CV.\n\n![Press release inverted pyramid diagram](/img/press-release-inverted-pyramid.jpg)\n\nThe trick here is to put the important/newsworthy information right up front — think about your accomplishments, achievements, interesting facts and figures.\n\nFrom there, include key summaries of your previous roles or projects, depending on what you've done so far — for example, those seeking their first junior role will likely have more project experience from their learning journey than they do work experience. Finally, pop in any other relevant information.\n\nExample's are always nice, so here's mine:\n\n- [View Rob Kendal's CV online](https://www.visualcv.com/rob-kendal-dev/)\n\nThere is always room for improvement, and my CV is no exception so it is by no means a silver bullet. However, I've worked hard to iterate on it, using feedback and helpful comments to find a balance and the current version has certainly helped me get to the interview stage more times then not.\n\nBe honest, be genuine, but don't be afraid to shout about your achievements. Make yourself _relevant_ to the company you're applying to.\n\n### Portfolio or not?\n\nA common topic I get asked about is portfolios: should you have one, what should it look like, what should be in there, etc.?\n\nMy advice is always this...\n\n> Anything that helps you get an edge over the competition is never a bad thing!\n\nYou don't have to have an all-singing, all-dancing shiny beacon of development portfolio, but increasingly, people doing the hiring are turning to examples to back up applicants' discussions and to gauge skill levels and coding approaches.\n\nIn my experience, the best companies tend to lean towards person-fit rather than out and out level of skill, so having a massive portfolio of work that you've been involved in isn't the be-all-and-end-all (or, entirely required).\n\nHowever, it's never been easier to build a digital footprint to highlight your work and anything that can give you a little extra when it comes to interviewing for a role can only help.\n\nThere are lots of ways to build up a portfolio as you go, without having to panic and build one as a large, single-effort project:\n\n- Contributing to open source projects\n- Building examples of an aspect of code (e.g. arrays) in a platform such as [CodePen](http://codepen.io/)\n- Creating GitHub repos for projects you've built during your learning\n- Building your own website using something like [GatsbyJS](https://www.gatsbyjs.org/) with a blog for people to follow your progress and mental approach to coding\n\n### Getting a foot in the door (bonus round!)\n\nIf you're struggling to get responses back from companies you've applied to or feel that you don't have enough experience then fear not, there are some other ways to get noticed.\n\n![Person running for a door](/img/adult-beautiful-blue-1013328.jpg ' Photo by Godisable Jacob from Pexels')\n\nFrom people I've spoken to about their successes with this, there are some great approaches to getting your foot in the door with development jobs:\n\n- **Reach out to hiring managers and decision makers** in the company.\n  Be honest about your intentions and experience. See if there are any work-experience options available, or if they know when they're hiring. Build a relationship and help them remember you when they're next taking on staff.\n- **Look at internships**.\n  In the UK, it's illegal for these to be unpaid, so they are a good way to get experience and learn, whilst getting paid.\n- **Explore voluntary options**.\n  My first IT role was in a school where I volunteered as a helpdesk agent, dealing with support queries. I volunteered about 4 hours a week to gain some valuable real-world experience. It paid off in the end as my next job was won off the back of this similar role (and the willingness I showed in giving up my time for free!).\n- **Talk to recruiters**\n  Recruiters can be a necessary evil, but I've been hired for most of my roles through them. Good, experienced recruiters are great sales people that work in both directions: selling the job on offer to you, whilst selling you to their clients as a good fit for the role. You can have honest conversations with them and they will sure as hell work their hardest on your behalf if they think you're a good fit for the role.\n- **Attend local coding meet ups**\n  There are tons of them about. Here in Yorkshire alone, we have 100's to choose from covering a range of topics from Ruby, to Agile, to JavaScript and front-end, to C# and .Net. They're a valuable way to learn new skills, make connections with industry peers, not to mention meet senior company members who might just have a job on offer!\n\n## \u003Ca name=\"step3\">\u003C/a> Step 3: handling the interview process\n\nYou've got a game plan, you've pruned and preened the CV, and you've applied and got an interview, awesome! Now, what?\n\nDon't panic, there's more advice coming!\n\n### In person interviews\n\nAhh the traditional person to person interview, a classic! You'll get nervous, but that's OK — believe it or not, so are the interviewers.\n\nThe best thing to do is actually relax. I know, I know, easier said than done, but by devoting some time to leisure activities or spending time with family and friends, anything to get your mind off the actual interview, will help you focus and not over-think or stress out about it.\n\nDuring the interview, there are a few things that might help you out:\n\n- **Breathe**...seriously, you'll feel better after a few deep breaths.\n- **Show interest and ask questions**! Contrary to popular belief, you don't have to memorise the company's history and names of all the staff, but by taking an interest in what they tell you and asking questions about what you'll be doing, aspects of the company, who you'll be working with, can really help you stand out in the interviewers' minds.\n- **Be honest**. If you don't know something, say so. No one's trying to catch you out or trip you up and, believe it or not, most companies would value an honest 'I don't know' above someone trying to bluff their way out of a question. If they _are_ trying to trip you up then you don't want to work their anyway!\n\n### Technical tests\n\nIf you're applying for technical, development roles, you're more than likely to have a tech test. I dislike them very much. In fact, I wrote an entire article about the [relevance of tech tests in today's hiring landscape](/blog/are-tech-tests-still-relevant-in-todays-hiring-landscape/).\n\nBut you can't just spit your dummy out and not do them...most of the time. I think there is a fair amount of tolerance that can be given, however frustrating. But you have to be realistic with yourself about how much time you have available and are willing to give to an application that sends you a technical test.\n\nFor example, I've had smaller tests such as questions and answers, a project brief to write, or even a small project (i.e. \u003C2 hours work) which is OK.\n\nHowever, where I draw the line is with large project-based tests that are 4+ hours work. Personally, I feel that asking someone to do over half a day of unpaid work just to access the next level of an interview process is unfair. I bet the company doing the hiring wouldn't spend that much on a client's say so, why should you?\n\nFrom a purely practical point of view, if you've applied for a number of roles, and each of them has a 4-5 hours project, then you'll need far more time than you probably have to complete them and that's not mentally healthy.\n\n> Furthermore, the intrinsic value of a technical test is minimal to the hiring company as they almost always end up as contrived examples, detached from the real world where you'll be working in a multi-disciplined team.\n\nThat said, if you do take part in them, then don't overthink your solution. Get it working first and foremost. Add the bells and shiny whistles on top (if you have time) and double check your working.\n\n## \u003Ca name=\"step4\">\u003C/a> Step 4: dealing with rejection\n\nYou're going to face rejection. That's just a fact. You might be having an off day. You might not be feeling it. Hell, you might just not be as good a fit as the other candidates.\n\nBut if you take nothing else away from this article, then remember this:\n\n> A rejection from a job application is not a measure of your value, your worth. It is nothing more than being the wrong 'fit'. Right now, for whatever reason, you're not a good fit for the role. Frame the rejection like this and move on.\n\nI can't stress how much this helped me.\n\nAsk for advice and feedback from the company on the back of a rejection. If it's something you can improve and work on then that gives you a positive direction. If it's a simple case of 'you were good, but they were better' then there's nothing more you could have done and that's just how life is sometimes.\n\nFocus your energy into the next application and don't look back!\n\n## \u003Ca name=\"resources\">\u003C/a> Resources and helpful links\n\nI genuinely hope you found something useful to take away with you from the article. If you'd like some more information and helpful advice, then I have a few resources for you below that you may find useful:\n\n- [View my resume on Visual CV](https://www.visualcv.com/rob-kendal-dev/)\n- [Connect with me on LinkedIn and check out my profile](https://www.linkedin.com/in/robkendal/)\n- [Tips and tricks on job hunting](/blog/job-hunting-in-the-tech-industry-tips-tricks-and-experiences/)\n- [Coding Coach](https://codingcoach.io/)","src/content/blog/2019-05-04-getting-hired-as-a-developer-in-the-tech-industry.mdoc","2204924e4330910e","2019-05-04-getting-hired-as-a-developer-in-the-tech-industry.mdoc","2019-05-10-fighting-imposter-syndrome-as-a-developer",{"id":182,"data":184,"body":190,"filePath":191,"digest":192,"legacyId":193,"deferredRender":156},{"title":185,"description":186,"featured":145,"featuredimage":187,"date":188,"tags":189},"Fighting imposter syndrome as a developer","In this article, I wanted to help people to understand a little more about what imposter syndrome is, how it can hold you back, and what you can do about it, even leveraging it to drive you to become better.","/img/imposter-syndrome-blog-post.png",["Date","2019-05-10T10:10:20.293Z"],[177],"![Blog header image with imposter syndrome title](/img/imposter-syndrome-blog-post.png 'Fighting imposter syndrome as a developer')\n\nImposter syndrome: it's an affliction that snares a lot more people than you think, especially (and ironically) quite successful people.\n\nIt may happen to you from time to time and it can be a very lonely curse to fight, holding you back and hindering you from truly becoming your best. Those nagging doubt's at the milder end, out and out feelings of unworthiness or not being good enough at the worse end.\n\nIt's something that I've fought with and I know from my Twitter feed alone that some of the most successful people you'll follow on there will all feel far from the top-of-their-game peers that you believe them to be.\n\nLet's get to it!\n\n## What exactly _is_ imposter syndrome\n\nFrom the [excellent Wikipedia article on imposter syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome):\n\n> Impostor syndrome is a psychological pattern in which an individual doubts his or her accomplishments and has a persistent internalized fear of being exposed as a \"fraud\"\n\nYep, that sounds about right and I know that versions of this description appear regularly in my timeline or in just talking to fellow developers about their working experiences.\n\nThere's tons of articles in the wild about imposter syndrome in general, such as [this comprehensive one from Fast Company](https://www.fastcompany.com/40421352/the-five-types-of-impostor-syndrome-and-how-to-beat-them). In it, the author, Melody Wilding, cites research by Dr. Valerie Young that classifies five separate, distinct types of imposter syndrome and how to fight it.\n\n## How to recognise it\n\nWhilst imposter syndrome comes in a few forms, at both ends of the extreme spectrum, usually it manifests itself in doubts and feelings of fraud and not belonging.\n\nThis occurs quite commonly because, generally, we're very good at voicing our fears and doubts privately and internally, whilst hiding them away from public eyes and ears. Of course, with most people doing this, its easy to feel alone in these thoughts.\n\nSome common things to look out for include:\n\n- Insecurities around your job, work\n- Feeling as if you don't deserve your accomplishments\n- The foreboding sense that you will be 'found out' at any moment\n- Constant or frequent comparisons to peers resulting in personal unworthiness\n- Feeling inferior to your peers, despite your accomplishments\n\nI used to have this a lot in my earlier career as I would take a job at a company and then feel like I wasn't good enough to be there. Of course, the fact that other employees had been at the company for years working within the same codebase would never register in my mind — obviously they would have a better handle on things; they were already further along the learning curve!\n\nLater in life, during my time as a business owner, I really struggled in the beginning as I would be surrounded by successful business people who had run their own businesses for many years. How could I hope to join in or compete with them? Me, this newcomer with almost zero business experience, what could I offer?\n\n![Still from Terminator 3 with a quote](/img/anger-is-more-useful-than-despair..jpg)\n\nThese sorts of feelings aren't helpful whatsoever and, in fact, can quickly become detrimental. Think about it, have you ever held yourself back in these familiar ways:\n\n- Kept quiet in meetings for fear of being laughed at for your ideas?\n- Not gone for that job because you didn't think you were ready or good enough?\n- Been afraid to hit publish on that blog post because it's not as in-depth or popular as CSS Tricks?\n- Not started that open source project you've been meaning to because who'd use it?\n- Put off starting your own business?\n\nThankfully, whilst those feelings do occasionally kick in, I've got much better at dealing with imposter syndrome and **so can you!**\n\nI've learned to quickly recognise them and almost reverse them using some tried and tested coping mechanisms we'll cover next.\n\n## How can you tackle imposter syndrome\n\nA big part of dealing with imposter syndrome is about recognising it for what it is, talking about it and handling it when it comes up. It's an ongoing process that you get better at by practising. Here are some of the best approaches to dealing with imposter syndrome that have helped me squash it.\n\n### Compare yourself to yourself, not to others\n\nOne of the best bits of advice and motivation I've ever seen is to compare yourself with other versions of yourself _**not**_ other people!\n\nYou're the only one who you have full control over and, really, you can only _influence_ other people at best. You don't know their journey, struggles, how hard they work, what challenges they have with their work, nor what sacrifices they make.\n\nLife's funny like that: it's easy (and often disheartening) to compare ourselves to others in a similar position and think that they're more worthy than us.\n\nHowever, we're all running a different race or playing a different game altogether and we shouldn't try to compare ourselves to other people.\n\nInstead, use them as inspiration for your goals. Once you have a goal in mind, compare yourself to the previous version of yourself and measure your progress that way.\n\nFor example, if you've just [scored your first job as a developer](/blog/2019-05-04-getting-hired-as-a-developer-in-the-tech-industry/), don't focus on the fact that you feel like you're not good enough to work there — they hired you, of course you are! Instead, make a note of where you're at now and then look back at the end of each week and see how you've progressed, what you've learned, how much better you've done.\n\n### Recognise your strengths and acknowledge your weaknesses\n\nWhen you focus on the negatives, the critical, it's easy to eclipse your strengths and truly acknowledge your accomplishments.\n\nTry to look objectively at what you're good at and what you're not and turn it into an action plan to continue the strengths and improve the weaknesses.\n\nFor example, I really admire [Sarah Drasner](https://twitter.com/sarah_edo). She's a hugely popular and successful developer at Netlify and talks a lot about front-end development topics. Her knowledge of SVG animations is immense (seriously, she has an [epic book on the subject](https://t.co/bV6mBteksH?amp=1)) and far greater than mine.\n\nHowever, that doesn't mean that I don't belong as a front-end developer. It shouldn't mean that I don't deserve the role I have or any awards I've won. It just means I have a gap in my knowledge.\n\nBy recognising this as an opportunity to improve an area of my understanding, I can cut off the feelings of self-doubt and channel them into a positive plan to learn learn learn!\n\n![Person holding a red piece of paper with a frowny face on it](/img/adult-art-artsy-278312.jpg)\n\n### Talk about it\n\nBeing ignorant of how other people think or feel is a large underpinning of the entire imposter syndrome. Internalising your fears and thoughts and at the same time not being aware of similar thoughts in your peers makes everything worse.\n\nIt is absolutely not an easy thing to do, but believe me, other people feel the same. Even if they don't share a sense of fraud, they certainly will rarely have a superiority complex and not understand where you're coming from.\n\nFind a sympathetic ear or two and bring up your feelings of not belonging and you'll soon find that other people will share how they've felt that that too.\n\n### Focus on the positive experiences\n\nAn awful part of the human condition is the difficulty we can have in dealing with and believing the compliments we get. It's all to easy to shrug them off with a smile, but not store them in the memory vault for later.\n\nWhen you get positive feedback or a great compliment on your work, keep it! Note it down, remember it, be mindful of it for a few moments and then you can think about it later when you start to wonder if you belong.\n\n### Remember and remind yourself that you're not alone\n\nIf this article alone doesn't help you realise that you're not alone, let me spell it out for you...\n\nYou. Are. Not. Alone!\n\nI can tell you that a lot of developers I've spoken to during my career have felt like an imposter at least once in their time, if not on a regular basis.\n\nKeep sharing your experiences and make a habit of talking to your colleagues and peers about theirs, talk about your collective challenges and you'll see that you're absolutely not alone.\n\n### Drive through it anyway\n\nOK, this is the more blunt end of the tool, but sometimes you can't quiet the voice inside and you just have to do it anyway.\n\nI can tell you that I have read a job spec and felt inadequate, not good enough for that role. But then I applied anyway. After all, that's what a job application process if for isn't it? For you and the company to work out if your a fit for each other. If you're open and honest about your experiences, then it's up to the hiring company to decide if you're up to the task, not you!\n\nSometimes, you just have to own your accomplishments and abilities and say 'no matter how I feel, I'm not letting it hold me back'.\n\n## Share your experiences\n\nWhat feelings of imposterism have you had? When did you feel like you didn't deserve your accomplishments? Leave a comment and let's start a conversation!","src/content/blog/2019-05-10-fighting-imposter-syndrome-as-a-developer.mdoc","34b82b2a243bee19","2019-05-10-fighting-imposter-syndrome-as-a-developer.mdoc","2019-06-07-getting-past-developers-block",{"id":194,"data":196,"body":202,"filePath":203,"digest":204,"legacyId":205,"deferredRender":156},{"title":197,"description":198,"featured":145,"featuredimage":199,"date":200,"tags":201},"Getting past developers block","Ever found yourself just plain stuck? In this article, we'll be looking at some tips, tricks and ideas to help move past creative block, especially for developers.","/img/getting-past-developers-block-blog-post.png",["Date","2019-06-07T10:58:11.572Z"],[177,149],"![Stop sign with blog article title 'getting through developers block'](/img/getting-past-developers-block-blog-post.png)\n\nYou know the feeling: you've got a great idea for a project, an app, a widget-me-jig, but you're struggling to get going. Perhaps — more commonly — you're already working on a particular thing, probably as part of your job, but you're stuck with where to go next, how to start, how to make progress.\n\nSo you stay stuck...\n\nThere's definitely an art and creativity to development, for all it's a technical medium, and like any artistic pursuit, such as writing or painting, we aren't immune to stalls, stops and straight up coders block.\n\nBut how do we get past our blocks and ship stuff that works? Well, hopefully these ideas will help move you past your block and start you moving again.\n\n## Stop forcing it\n\nIf something's not working, it's not working. Ironically, the best thing to try first is to just go away and leave it be.\n\nI can't tell you how many times I've had to get up from my desk and just have a 5-10 minute breather, do literally _anything_ else and come back to the problem with renewed enthusiasm and a fresh approach.\n\nIt's one of the hardest things to do because, if you're anything like me, you want to stay with the problem, force it to bend to your will and, sadly, this usually only makes things worse.\n\nStep back, take a breath, and do something else. For me, it's maybe having a walk in the garden, or playing a few licks on the guitar. My dogs help too; being able to talk to them is a bit like a real life rubber duck technique...although you get about as much sense back!\n\n## Try something else\n\nIf you're still stuck, maybe a different approach might help. Again, related to the point above, I've found that occasionally, even after a break, it's just not happening.\n\nIt's easy to belligerently keep flogging the dead horse, but instead, try approaching it from a different angle. It might be that you leave the current component and move on to a related piece of work.\n\nPerhaps you started at the back end and worked towards the front but have lost your way; try switching it up and start with the front and reverse-engineer the solution into the back end.\n\nMaybe you're trying to solve a complex issue that has been neatly solved by a third party. Don't get me wrong, I'm not advocating just chucking another NPM package on the heap, but there are really well developed solutions to common issues (e.g. forms in React) that mean you don't have to get stuck trying to implement your own niche version.\n\n## Look to others for inspiration\n\n> \"Lesser artists borrow; great artists steal\" - Igor Stravinsky\n\nYeah don't steal anyone's stuff. However, there's not a person alive who hasn't browsed someone else's work, their ideas, and found inspiration in something outside of their own box.\n\n![Wall with various inspirational quotes and pictures hung on it](/img/architecture-art-assorted-1742370.jpg ' Photo by Mikechie Esparagoza from Pexels')\n\nFor me, this sort of inspirational boost comes from attending meet ups or conferences. By exposing yourself to other people's work, ideas, and general approach to similar concepts that you're dealing with, you help to smash open your own creative box and can get motivated to push beyond whatever is currently holding you back.\n\n## Understand _why_ you're blocked\n\nTricky one this, but it might be that you're not stuck because of a lack of inspiration or clarity; it could be that you're hamstringed by current infrastructure or technological shortcomings.\n\nIf you think there is a genuine issue that either you don't have the technology or in-house capability to solve, discuss it with your team, raise the point and see what can be done.\n\nIt's not always a silver bullet, but if you can understand the _why's_ then you might be able to unblock yourself and move past it.\n\n## Just get started (progress > inaction)\n\nLeaving things alone or being stuck in a state of indecision, inaction, is not helpful. Sure, we all need a bit of time and space to think, but delaying action, delaying progress ultimately harms our goals and inhibits forward motion.\n\nI'm not suggestion that you just start banging out any old code without a thought about the architecture or how some components might interact. But, if some sort of indecision is hold you back then sometimes its actually quite helpful to just begin down a path and either adjust as you go (see my [article on continuous refactoring](/blog/continuous-refactoring-avoiding-technical-debt-in-the-here-and-now/) for some tips) or backtrack and redo.\n\nMaking some sort of progress, even in the wrong direction, can sometimes help move you past the block, even opening up some more ideas for you.\n\nAnd let's face it, we're fortunate to be in an industry where we have the luxury of this ability. For example, the above is _terrible_ advice if you're working in an A&E department of a hospital (that's the ER for our US-based chums).\n\n## How do you deal with development block?\n\nDo you experience this yourself? Do you have any tips or tricks that work for you? Let us know and let's start a discussion and move our work forward!","src/content/blog/2019-06-07-getting-past-developers-block.mdoc","99efbca8346b90ac","2019-06-07-getting-past-developers-block.mdoc","2019-05-23-are-companies-missing-out-on-talent-by-fear-of-remote-working",{"id":206,"data":208,"body":214,"filePath":215,"digest":216,"legacyId":217,"deferredRender":156},{"title":209,"description":210,"featured":145,"featuredimage":211,"date":212,"tags":213},"Are companies missing out on talent by fear of remote working?","What are some of the factors that prevent companies from building a remote workforce, or at least offering remote working as a more common hiring option?","/img/remote-working-are-companies-missing-out-blog-post.png",["Date","2019-05-23T19:40:00.128Z"],[177],"![Blog post header image of a remote workforce with the blog title](/img/remote-working-are-companies-missing-out-blog-post.png)\n\nI'm a senior UI developer for a Yorkshire-based company (IAM Cloud, check them out) and my role is almost entirely fully remote. I generally pop into the office a couple of times a month, depending on who's in, what's on and so forth.\n\nI've never worked in a fully remote position before (but I have worked with devs who were) and, whilst I see more companies offering flexible-working (which means many different things to different people), adding full remote as an option seems to be quite rare — certainly in the UK.\n\nIt got me thinking about the huge pool of talent out there and how companies could be missing out by sticking to an increasingly antiquated approach to modern day work.\n\nI have a few thoughts on this...\n\n## It doesn't work for us, because....\n\nLet's get it out there, right away: **it just doesn't work for all businesses**. And I agree!\n\nBear in mind that I'm coming from a technology and development background here, but having worked in a diverse range of businesses in my career, even I recognise that there are some businesses where having a completely distributed team is not going to work. And that's OK. \n\nDigital product-based businesses, or SaaS-style companies could move to remote and shouldn't suffer if they put the right foundations in. After all, most of their communication with clients buying their product happens in a remote fashion (e.g. calling support, live chats, email, etc.). But any business that deals with clients or customers in a regular person-to-person meeting style, then yes, they might be able to adopt some elements of remote, but we have to acknowledge that it's perhaps not the right more for them.\n\nHowever, for everyone else, read on...\n\n## Productivity suffers\n\nRemote work usually translates to 'working from home'. A few people might head out to a co-working space or decamp to parents'/friends'/partners' houses, but in my experience, most remote people work from their own living space; where there are gardens, children, dogs, PlayStations, guitars, hobbies....see where I'm going?\n\nI have legitimately heard these sorts of things discussed as distractions and they contribute to a great fear in companies that, unmonitored, distant, home-working employees will sacrifice real work for some FIFA catch up time.\n\n![Two men working at a table](/img/adult-brainstorming-chair-515167.jpg \" Photo by rawpixel.com from Pexels\")\n\nHowever, it is commonly reported that a number of [modern open offices _themselves_ cause dips in productivity](https://www.inc.com/geoffrey-james/science-just-proved-that-open-plan-offices-destroy-productivity.html). Excess noise, interruptions, smells, arguments, meetings, and a raft of other modern office habits can contribute detrimentally to the getting work done effort. \n\nThis is certainly true when it comes to development where, generally, the highest productivity and best work gets done when developers are left to get 'in the zone'. The 'zone' ([also known as The Flow](https://en.wikipedia.org/wiki/Flow_(psychology))) is a mental state of focus that allows for greater levels of focus and contributes to more productive work. The caveats? It can take up to 15 minutes of concentrated effort to achieve, but is easily disrupted, effectively setting the clock back to zero.\n\nRemote work can help to eliminate this snapping in and out of concentration states because workers are more able to control their environment.\n\n## Communication is harder\n\nIt really isn't. \n\n> If you believe that your communication — internally or externally — will suffer with a distributed team then there's probably a few flaws in the way you communicate now.\n\nThe world has become much smaller than ever before and we have access to a plethora of communication choices, free, paid, open source or otherwise, to be able to keep in touch with colleagues, track work, hold virtual meetings, and so on. \n\nBut it requires a solid base from which to start, one that scales, coupled with processes and a 'best use' guide to ensure that communication happens smoothly and well. \n\nFor example, at IAM Cloud, we use a combination of Trello, Microsoft Teams, Skype and Azure Dev Ops to cover a few bases around planning sprint work, having meetings, dealing with clients and support, as well as a number of other business functions. \n\nSet guidelines, schedule regular check ins and make keeping in touch part of the communication strategy. Put mechanisms in place to allow for social aspects, work topics, whatever you need to make that work happen!\n\n## How will we know if work's being done?\n\nThis is one of the key arguments _against_ remote working (or even flexi-time and occasional working from home) that crops up more times than not and it boils down to one factor...**trust**.\n\nRather, the lack of it...\n\n![Empty desk in the dark with a single lamp](/img/contemporary-dark-data-669996.jpg \" Photo by Bich Tran from Pexels\")\n\nIt also comes with a hearty side-serving of poor communication too. Believe me, I've been there. I've worked in companies who only counted your progress by the number of hours in the office. The communication was poor; the direction and targets even poorer. These would have been terrible candidates for anything resembling remote working.\n\nTrust and confidence in your team is key to getting the best from them and it shouldn't matter if they're 2 meters or 200 miles away. In Agile development teams where there is visibility and regular progress meetings, it becomes about the mechanism you use to facilitate the work and evaluate if it's being achieved or not.\n\nGot a physical Kanban board? Move it to MS Teams or Trello. Morning stand up around a desk? Try Zoom or Slack. \n\n> Unproductive, untrustworthy employees that will take advantage of flexibility will do so no matter what the environment. They'll be just a poor a contributor _in_ the office as out of it.\n\n## The company culture doesn't support it\n\nI'm going to flag this one as a bit whiffy too. \n\nAt a previous role, the company was very flexible: how you worked, where you worked, it really was about empowering you and the team to do their best work. Then it merged with a more antiquated company that supported none of that. \n\nOvernight it eroded a culture of productivity and meeting product milestones turned it into the same, stiff, corporate culture that the rest of the merging company 'enjoyed'. \n\nThe reason? Largely, 'because we don't do this in the rest of the company'.\n\nI get it, it's scary and different and if it's a particularly large business then rolling out changes overnight isn't easy, but just because you've never done it doesn't mean you can't or that you shouldn't. The status quo is not always the right path to choose.\n\n## It's just not as good as _being there_, in person\n\nIt is absolutely vital to have in-person meetings or get-togethers from time to time. This might be via quarterly meetups, regular trips to the office (e.g. 2-3 days a month) or around key points in the working setup — for example, my previous role's remote developers would come over for our day-long retrospectives and sprint planning meetings. \n\n![People fist-bumping across a table during a meeting](/img/bump-collaboration-colleagues-1068523.jpg)\n\nThat said, you just have to look at the companies out there that are pushing out fantastic products and generating huge revenues \n\nBut, as with the communication argument, it's important to put structure in place so that people don't become isolated over time. Whether this is having more video-calls, or encouraging smaller team projects with regular contact over a tool like Slack, **so long as there is a welcoming and lively atmosphere fostered someone over your communication means, then the human element of work won't be removed!**\n\n## Let's all ditch the office and work from the couch!\n\nAhh if only; but then, no, actually, let's not.\n\nDespite this article's positive stance on remote working, I'm not trying to push some kind of 'you must go remote' agenda out there. It's not always right for each business, or even each person — some people do not value the experience and aren't best suited to it.\n\nHowever, I do think that more roles should be opened out to offer remote as an option. Most defensive arguments like we've discussed in this article can be overcome and usually point to a base fear or shear unwillingness to embrace change and a modern approach to working. \n\nBy closing themselves off to these sorts of opportunities, there are a lot of businesses that are missing out on great candidates and, potentially, even better work.","src/content/blog/2019-05-23-are-companies-missing-out-on-talent-by-fear-of-remote-working.mdoc","7c1ff91ecf4cb5e7","2019-05-23-are-companies-missing-out-on-talent-by-fear-of-remote-working.mdoc","2019-12-22-solving-react-hooks-invalid-hook-call-warning",{"id":218,"data":220,"body":228,"filePath":229,"digest":230,"legacyId":231,"deferredRender":156},{"title":221,"description":222,"featured":145,"featuredimage":223,"date":224,"tags":225},"Solving React Hooks' invalid hook call warning","Building a React project and have the error 'Hooks can only be called inside the body of a function component'? We'll solve the 'invalid hook call warning' error and get your project back on track.\n","/img/fixing-invalid-hooks-warning-blog-header.png",["Date","2019-12-22T09:28:23.344Z"],[150,149,226,151,227],"Tutorials","Debugging","![Blog header for article on invalid hook call warning](/img/fixing-invalid-hooks-warning-blog-header.png)\n\nRecently, I decided to build a [React-based visual query builder](https://github.com/bpk68/react-visual-query-builder) as none of the existing ones out in the wild were doing what I wanted. Awesome: who doesn't love the chance to get their chops around a meaty sort-of-side-project, especially when we'd planned to release it to the open source community?!\n\nThe project went surprisingly well, smoothly even and the React query builder came together quickly and worked great. We had it all, lots of documentation, we were using Hooks (a new adventure for me) and it was well tested.\n\nHowever, during testing I was slapped in the face by the rather rude Hooks warning you might be familiar with:\n\n> Hooks can only be called inside the body of a function component.\n\nThe problem is, that's _exactly_ where all the uses of Hooks were being called from....hmmm\n\n## So what causes the invalid hook call warning?\n\nThe warning can be fairly misleading if, like me, you've followed all the Hooks rules _and_ the tool you're building is working in a local example/demo project — which this was.\n\nDespite the error message being a little misleading, the warning comes with a link to the [really helpful official documentation](https://reactjs.org/warnings/invalid-hook-call-warning.html) from the React team, which, in summary, informs us that there are actually three possible causes of this issue:\n\n_There are three common reasons you might be seeing it:_\n\n1. _You might have mismatching versions of React and React DOM._\n2. _You might be breaking the Rules of Hooks._\n3. _You might have more than one copy of React in the same app._\n\nI definitely wasn't falling foul of causes two or three, and I thought I had number one covered, but this required a little more digging.\n\nHugely frustrating times ensued. Monitors were thrown out of the window and I started to question my entire development life.\n\n[![course banner for beginners React course](/img/react-course-cta.png \"Beginner's Guide to Real-World React\")](https://www.newline.co/courses/beginners-guide-to-real-world-react/ \"See the Beginner's Guide to Real-World React\")\n\n### Finally finding the answer\n\nAfter much searching and debugging, the problem seemed to definitely lay with this duplicate versions of React or React DOM issue.\n\nIn fact, the answer lay at the end of the helpful React Hooks documentation above. There was a link to an extended [GitHub discussion on the pesky invalid hook call warning error](https://github.com/facebook/react/issues/13991) and plenty of fellow devs with the exact same woes. More importantly, it had lots of different possible solutions to different situations.\n\nFor my particular scenario, I'd used my very own [Parcel JS starter project (complete with React)](/blog/2019-04-29-using-parcel-bundler-with-react-js/) to build the query builder. I did take note of the 'multiple versions of React' no no from the above list and had used [Parcel's alias feature](https://parceljs.org/module_resolution.html#aliases), as well as making sure to employ the `peerDependencies` config setting in package.json.\n\n    \"peerDependencies\": {\n        \"react\": \">=16.8.0\",\n        \"react-dom\": \">=16.8.0\"\n      },\n\nDespite all this caution, Parcel was still **bundling React and React DOM into the production build!**\n\nSo then, we've found the answer, but how do we solve this issue and make sure there's only _one single version of React overall_??\n\n## How to fix the invalid hook call warning\n\nIn a normal setup, you'll have a dependency pushed to some hosting repository, such as NPM, and you'll consume that in some other project that you're working on using the `npm install my-cool-widget` command.\n\nThis diagram illustrates the typical setup.\n\n![typical npm dependency diagram illustrating how the consuming project depends on a dependency project](/img/dependency-hooks-example.png)\n\nThe problem here, is that, despite all the precautions above, our 'Shiny new thing' widget was bundling React into its final package _as well as_ our existing/consuming project containing React.\n\nThus, unknowingly, I'd violated the first law of Hooks: **thou shalt not have multiple versions of React in the same project.**\n\nThe solution? Stop using Parcel and switch to Webpack (don't worry, I've got a [great Webpack starter project](https://github.com/bpk68/web-template) too, with all the initial nuts and bolts you'll need preconfigured).\n\n(At the time of writing, I'm not convinced that there is a way to use Parcel JS with React in such a way as to create a consumable dependency to push to NPM — prove me wrong comments section!).\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n## Fix the invalid hook call warning using Webpack\n\nIt's probably less likely that you'll have a Parcel JS specific problem here, but either way, you'll probably find that **your mysterious React invalid hooks error is caused by duplicate React versions**. And, since Webpack is arguably the most popular JS bundler out there, there _is_ a good chance you'll be using that to bundle and package your lovely dependency.\n\nIn order to dodge the invalid Hooks error caused by duplicate React version, using Webpack, we'll need to do a few things in the dependency project (i.e. the widget you're building):\n\n### Set React as a peer dependency\n\nFirst things first, open your `package.json` file and set your versions of React as a peer dependency:\n\n```json\n\"peerDependencies\": {\n    \"react\": \">=16.8.0\",\n    \"react-dom\": \">=16.8.0\"\n},\n```\n\nThis won't solve your issue, but it's necessary to ensure that the consuming project has React (or whatever else you have in here) installed as a dependency.\n\n### Configure Webpack to reference a different version of React\n\nNow for the real meat and potatoes of the solution: we need to configure Webpack to essentially _ignore_ React as part of the production bundle and instead, reference it from the project where this code will ultimately by consumed.\n\nTo do that, you'll need to add Webpack's `externals` property to the production settings, like so:\n\n```js\nexternals: {\n  react: \"commonjs react\",\n  \"react-dom\": \"commonjs react-dom\",\n},\n```\n\nFinally, we'll also adjust the type of module system that Webpack outputs in the production build. To do that, we'll add the `libraryTarget` property to the `output` setting in the Webpack config as follows:\n\n```js\noutput: {\n    ...// other settings here\n    libraryTarget: 'commonjs2'\n},\n```\n\n## Ahh all's well that ends well\n\nSo that should see you right. It's worth noting that your consuming project will throw all sorts of other, new errors if it _doesn't_ have React available, but once you have that installed, the dependency will look for React and try to import it (using the commonjs `require()` syntax) and all will be well.\n\n## Helpful links\n\nHere's a quick summary of the helpful links used throughout this article:\n\n- [Official React hooks error documentation](https://reactjs.org/warnings/invalid-hook-call-warning.html)\n- [The React Query Builder on GitHub](https://github.com/bpk68/react-visual-query-builder)\n- [The React Visual Query Builder on NPM](https://www.npmjs.com/package/react-visual-query-builder)\n- [The Hooks error discussion on GitHub](https://github.com/facebook/react/issues/13991)\n- [My Webpack starter project](https://github.com/bpk68/web-template)\n- [My Parcel JS starter project with React](https://github.com/bpk68/parcel-starter-with-react)","src/content/blog/2019-12-22-solving-react-hooks-invalid-hook-call-warning.mdoc","106b72dea7598958","2019-12-22-solving-react-hooks-invalid-hook-call-warning.mdoc","2020-01-14-how-to-survive-remote-working",{"id":232,"data":234,"body":241,"filePath":242,"digest":243,"legacyId":244,"deferredRender":156},{"title":235,"description":236,"featured":145,"featuredimage":237,"date":238,"tags":239},"How to survive remote working","Whether you're brand new to remote working, unsure if it's the right fit for you, or simply curious about how us seasoned remoties (can I coin this phrase??) operate, I've got some tips, tricks and advice based on my experiences in working in a globally distributed software development team.","/img/remote-working-tips-and-tricks-blog-post.png",["Date","2020-01-14T14:59:50.206Z"],[177,240],"Career","![Blog header image for remote working tips and tricks](/img/remote-working-tips-and-tricks-blog-post.png)\n\nSo, you've landed your dream role as a remote developer, getting to work wholly or at least largely from the comfort of your own home (or somewhere of your choosing). Finally, you can burn the suits of 'normal' office oppression and get away from the office politics, the smells of other people's lunches, and, more importantly, be so super focused and productive that you'll somehow [BraveStarr Strength of the Bear](https://www.youtube.com/watch?v=eXoA7ZjyRJI) your tasks, performing 10x better than your commuting brethren.\n\nBut what does this mean in reality?\n\nAlthough [many companies are missing out on talent by fear of remote working](/blog/2019-05-23-are-companies-missing-out-on-talent-by-fear-of-remote-working/), there are more positions becoming available for remote developers. But it's not for everyone and having a few pointers on how to maximise your remote experience will help you make the leap smoothly.\n\nLet's get started!\n\n## Some background on my situation\n\nI've been a developer for over 20 years and I've worked in a number of environments such as single offices (that was a sweet deal), horrendous cattle markets called open offices, and much more pleasant co-working spaces.\n\nFor the past year, however, I've been a fully remote developer, working from my lovely home study and making some clever things in React. Before that, I was a business owner, predominantly working in a small, two-man office, but varying my workspace from week to week.\n\nI love the freedom and autonomy that remote working provides and it's certainly not without its challenges, but I wouldn't change it for the world.\n\n## 1. Routine is everything\n\nOne of the biggest positives of remote working can also be one of the biggest problems: lack of routine. In a 'normal' office scenario, you arrive at a fixed time, leave at a fixed time, and most likely have other various activities happen on schedule: whether it's tea breaks, lunches, certain meetings.\n\nIn the remote world, a lot of the typical day to day routine is lost or somewhat fragmented. Often, because of the nature of remote work and synonymity with distributed teams in different timezones, start and end times to the working day are a lot looser, if not removed altogether. Meetings can be a lot more informal and less regular, instead happening on an 'as we need' basis, and you are most likely in charge of your own working schedule or hours.\n\nAll this freedom and flexibility is great, but it can be a nightmare for a lot of people (like me) who thrive with slightly more restriction and organisation in the mix.\n\n![An old fashioned bedside clock](/img/clock-20013_640.jpg)\n\nGetting yourself into a regular routine is important and helpful for many reasons. It can help your focus by training your brain that certain times mean certain things happen. It also helps with other things you might not think about, such as helping your co-workers understand when you're available, or letting people at home know when you're doing what.\n\nFor me, I like to work earlier in the day and finish earlier, but generally at the same times. I like to have lunch at roughly the same time each day and portion my working time into blocks, fitting in any regular meetings that I know about in advance (e.g. daily stand up)\n\nMy typical daily routine looks like this:\n\n- 07:45-08:00 - start work\n- 08:00 - 08:15 - catch up and admin (e.g. check blog articles, read any company updates, answer emails, update kanban board and tasks, etc.)\n- 08:15 - 10:00 - working on the current tasks I'm assigned on the board\n- 10:00 - 10:15 - daily stand up meeting\n- 10:15 - 11:30/12:00 - working on assigned tasks\n- 11:30/12:00 - lunch (30-45 mins, depending on the day)\n- 12:45 - 15:00 - working on assigned tasks\n- 15:00 - 15:15 - afternoon break, cuppa, snack, etc.\n- 15:15 - 16:30 - finishing work tasks, planning for tomorrow\n\n## 2. Communication is everything else\n\nWhilst you're not alone in remote work, you aren't physically present, so it's important to have a system or means to stay in touch with your colleagues, managers, and everyone else you need to have contact with.\n\nAnd you _will_ need to get in touch with others at some point. Whether it's sharing an update, office banter in the #bants channel on Slack, or code reviews, having a solid system in place allows work to happen and everyone to keep on the same page.\n\nSome of the burden of good communication lays with your company. Fundamentally, there needs to be a set of policies and a culture that outlines what platforms are available to connect with your fellow developers, what statuses mean what (available, busy, out of office, etc.), and how meetings are conducted.\n\nWhere I work, we have a very open door policy where we can reach out to whomever, whenever, and for whatever. This works well and isn't abused. Knowing when a bit of banter is appropriate and when people need to be left to work is something that happens over time, but no different than in a real life environment.\n\nOnce of the niceties of remote communication is its asynchronous nature. Tools such as Slack or MS Teams have a familiar chatroom approach where you can share your thoughts, and expect a reply at some point in the future. For some, this can feel a little alien and many will miss the physical presence of another human, but for the rest of us it allows for large periods of uninterrupted concentration and progression of tasks.\n\n## 3. Healthy habits keep you going\n\nSimilar to routine, it's all too easy for something as simple as looking after yourself to start slipping. After all, there might not be a gym near your home, but there was one near your old office. You can only usually eat what you take to the office, but your home is filled with tasty temptations.\n\n![A wicker basket full of fresh fruit](/img/vegetables-752153_640.jpg)\n\nFor me, it's been critical to keep an eye on what I eat during the day and weave in some sort of exercise to my daily routine. I like to alternate between yoga and an outdoors walk around my village (on that, outdoor time is really great for the mental state!).\n\nSimple actions can work well too, such as regular stands away from your desk. Even just spending 2-3 minutes getting up, walking to the next room and taking a look out of your window can help boost your productivity, [get you through your developers block](/blog/2019-06-07-getting-past-developers-block/), and save your sanity.\n\n## 4. Make your workspace your own\n\nOk, so it is _your_ desk in _your_ home, but I can't tell you how much it helps to really make an effort with your workspace.\n\nIt doesn't matter if you have the luxury of a separate office or merely a corner of a bedroom, find out what makes your working space a happy one and make it happen.\n\nBeing divided from your office-shackled counterparts, you have the luxury of being able to have free reign over the music you play, the decor on the walls and the pictures you hang up (no matter how offensive they might be).\n\n## 5. Supplement whatever's missing from 'the norm'\n\nBy this, I mean whatever comforts you're used to in a 'normal' office environment, you may need to add in to your working day or supplement elsewhere.\n\n![A spilled bottle of supplements](/img/pill-3069032_640.jpg)\n\nFor example, if you're a social person who revels in the company of others, working from home is going to remove that part of your day. Of course, you'll be using some sort of office chat system, but it's not quite the same. So, you'll need to replace this somehow; a regular catch at the corner shop, chatting with locals over lunch in the pub, or just visiting friends more often.\n\n## 6. Learn how your productivity works and adapt\n\nAs we've mentioned, with remote working, you're very much separated from the constraints of a 'typical' office environment. This includes working to someone else's schedule. Of course, you have to be flexible too, but now that you can choose when and how you work, you can really dig in and discover what makes your productivity tick.\n\nFor example, I've always been a real early bird, with my most productive periods being before 14:00-15:00. Being able to start work promptly in the morning, without a draining, time-zapping commute means that I can get the best out of myself and put out some great work.\n\nIt's up to you to discover what makes you most productive and use the freedom of remote working to harness that power.\n\n### Variety is helpful for productivity\n\nSomething that's helped me greatly has been varying my workspace. For the most part, I work in my home office just off the lounge. But, depending on household life, I might work in another room for a change, or I might travel to my parent's house for some different scenery.\n\nIt doesn't have to be every week or a series of constant changes, but by varying where you work or the space you work _in_ regularly, you can get a real boost to your productivity.\n\n## 7. Separate home and work\n\nAnother key tip and one that people commonly struggle with is the separation of work and home life. After all, when your home _is_ your work, it can be difficult to switch off.\n\nIf you have a separate office, such as I do, then this is a little easier: when I'm in the office, I'm working. When I leave, I'm at home.\n\n![A construction worker jumping in front of a house](/img/building-1080592_640.jpg)\n\nHowever, I didn't start this way. Initially, my 'office' was in my bedroom. In this case, I found it handy to do three things:\n\n1. Finish work at roughly the same time each day\n2. End the day by planning for the next\n3. Leaving work at the 'office'\n\nSure, sometimes I push on past the end of the day to finish off an almost completed task, or certainly if I've started a little later, but generally I like to end the day at the same time. This helps to mentally 'finish' the working day, even though you're in the same place.\n\nBy planning tomorrow's work at the end of today, you can help avoid that nagging feeling of something being unfinished and the temptation to 'just have 15 more minutes' working on a problem. Occasionally it can be a simple as just updating the task board with progress, but it can also be writing some notes for your future self on tricky points that you need to tackle tomorrow.\n\nFinally, once you've accomplished the first two, it's easier to 'leave work at the office' because you naturally have a sense of closure on the working day. This doesn't mean you can't talk to your partner about your day or think about work things, but it just cuts off the work part of your home life and starts the home part back up.\n\n## 8. Remember, 'remote' ≠ 'alone'\n\nThis is a biggie: you might be remote, but you need to remember that you are not _alone_. There are a team of other people out there that you work with. You should be reaching out to them regularly in order to enrich your working life and stay connected to your colleagues.\n\nYou should never feel like you're on your own and isolated. That said, it's important to be aware that it's all to easy for this exact thing to happen if you spend too long without communicating with colleagues.\n\n## Over to you\n\nAre you a remote worker? What tips and tricks do you have? What keeps you going when you're struggling to get motivated? Let us know in the comments.","src/content/blog/2020-01-14-how-to-survive-remote-working.mdoc","8337a876f97c1afd","2020-01-14-how-to-survive-remote-working.mdoc","2019-05-13-configure-parcel-js-and-babel-to-use-javascript-proposal-class-properties",{"id":245,"data":247,"body":253,"filePath":254,"digest":255,"legacyId":256,"deferredRender":156},{"title":248,"description":249,"featured":145,"featuredimage":250,"date":251,"tags":252},"Configure Parcel JS and Babel to use JavaScript proposal class properties","Want to use Parcel JS with frameworks like React but keep using shiny new JavaScript things like the proposed new class properties? Well read on my coding adventurer as we're going to learn to configure Babel and Parcel to do just that.","/img/using-proposal-class-properties-blog-post.png",["Date","2019-05-13T06:45:24.216Z"],[150,149,226],"![Article hero image including title Babel and Parcel using proposal class properties](/img/using-proposal-class-properties-blog-post.png)\n\nContinuing on from the recent posts on [using Parcel as a Webpack alternative](/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/) and [using React with Parcel JS](/blog/2019-04-29-using-parcel-bundler-with-react-js/), I've been thinking a lot about using modern JavaScript development approaches. One such approach is using the [shiny new class properties proposal](https://tc39.github.io/proposal-class-public-fields/), specifically the public fields declaration part.\n\nUsing the new proposal class properties syntax is almost second nature if you've been using React lately, especially via the super useful [Create React App](https://facebook.github.io/create-react-app/) which has them installed and turned on by default.\n\n## The beauty of class properties\n\nThere are a lot of good reasons to start using these new class properties and the new initialiser syntax, but the main two are to simplify class properties (methods and fields) and the binding of `this`\n\nAs an example, this is currently how you could create a JS class:\n\n```javascript\nclass MyClass {\n  someFunction() {\n    console.log(this.bigNumber);\n  }\n\n  constructor() {\n    this.someFunction = this.someFunction.bind(this); // bind our method to 'this'\n    this.bigNumber = 123456789; // a property\n  }\n}\n```\n\nNot a fancy class, not particularly hard on the eyes or difficult to read. However, imagine that you've got a ton of methods and properties like this. The class soon becomes difficult to read with lots of clunky `this` binding in the constructor.\n\nHowever, by switching it up with the new declaration syntax, you get this:\n\n```javascript\nclass MyClass {\n  bigNumber = 123456789;\n\n  someFunction = () => {\n    console.log(this.bigNumber);\n  };\n\n  constructor() {\n    // other constructor stuff\n  }\n}\n```\n\nThere's not much in it at this point, but the class is now much more self-documenting and, in this example alone, we've removed the need for the constructor altogether.\n\n## Let's start using the proposal class properties now!\n\nIf you've discovered the previous article on [using Parcel bundler as a Webpack alternative](/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/), then we're almost there in terms of setup for this to work. You can [fork the codebase here and implement your own solution](https://codesandbox.io/embed/8z4vzk10p8) using the Babel plugin we'll get to in a moment.\n\nBecause the new class properties are in the proposal stage, we need a bit of help from Babel JS magic to start using them now.\n\nIf you [head over to the official Babel JS plugin page](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties) you can read all about it. With that in mind, let's get a new project going.\n\n### The initial set up\n\nI've created a [fully-working solution using Parcel and the Babel plugin-proposal-class-properties plugin on CodeSandbox](https://codesandbox.io/embed/zqjr30zznm).\n\nIt's a simple project that involves 3 files of interest:\n\n1. `index.js` the main project file that kicks everything off\n2. `listmaker.js` that is our JS class with the new class properties being used\n3. `.babelrc` the Babel JS config file that enables Babel core functionality as well as configures the class properties transform function\n\n**Note:** _we're using [CodeSandbox.io](https://codesandbox.io)'s vanilla template which includes Parcel by default. You may need to add your own Babel Core dependencies if you're setting things up from scratch on your local machine._\n\nIf we run the project, we encounter this rather egregious error:\n\n![Syntax error showing because Babel JS is not configured correctly](/img/screenshot_2019-05-10-codesandbox.png)\n\nUrgh...\n\nFirst, we'll need to install the Babel plugin _[@babel/plugin-proposal-class-properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties)_, let's do that now:\n\n```bash\nyarn add @babel/plugin-proposal-class-properties --dev\n```\n\nNext, we'll need to add a .babelrc file (if you haven't one already) in the project root and add the following to it:\n\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-runtime\", \"@babel/plugin-proposal-class-properties\"]\n}\n```\n\nThe line with the '@babel/plugin-proposal-class-properties' part is the key here, it's where we enable the Babel plugin.\n\n### Working through the files\n\nStarting with `index.js`:\n\n```javascript\nimport './styles.css';\nimport ListMaker from './listmaker';\n\n// let's make some silly lists\nconst myLists = {\n  vegetables: ['cucumber', 'turnip', 'potato', 'carrot', 'spinach'],\n  dogsNames: ['Rover', 'Bosley', 'Finn', 'Digby', 'Doggy McDogface'],\n};\n\n// instantiate our ListMaker class\nconst listMaker = new ListMaker(myLists);\n\n// kick off the list html generation\nlistMaker.generateLists();\n\n// output the html to the browser\ndocument.getElementById('app').innerHTML = `\n\u003Ch1>Let's make lists!\u003C/h1>\n\u003Cdiv>\n  ${listMaker.listsOutput}\n\u003C/div>`;\n```\n\nNothing too scary or unfamiliar here. We import our class listmaker.js create a list object that holds some arrays, before instantiating the List Maker class and generating our lists. We add the lists' output into the final HTML on the page using the JavaScript string notation syntax.\n\nNext, inside listmaker.js:\n\n```javascript\nclass ListMaker {\n  listHtml = '\u003Cdiv>\u003Cul>{0}\u003C/ul>\u003C/div>';\n  listItemHtml = '\u003Cli>{0}\u003C/li>';\n  lists = {};\n  listsOutput = '';\n\n  constructor(listsObj = {}) {\n    this.lists = listsObj;\n  }\n\n  makeList = (list) => {\n    let listItemsOutput = '';\n\n    list.forEach(\n      (listItem) =>\n        (listItemsOutput += this.listItemHtml.replace('{0}', listItem))\n    );\n\n    return this.listHtml.replace('{0}', listItemsOutput);\n  };\n\n  generateLists = () => {\n    // loop through our list arrays from our initial lists object\n    // passed in via props\n    Object.entries(this.lists).forEach(([key, value]) => {\n      if (Array.isArray(value) && value.length) {\n        this.listsOutput += this.makeList(value);\n      }\n    });\n  };\n}\n\nexport default ListMaker;\n```\n\nRight away, at the top of the class, we're defining a few class variables such as the output HTML and default lists object.\n\nWhen the constructor is called, we're updating one of the class variables using the supplied list object.\n\nBack in `index.js` we call our instantiated List Maker class' `generateLists()` function which is where we use another nice JS feature, the `Object.entries()` method. Within here we loop through the objects within the class `lists` properties, grabbing each object's array of strings, before stuffing their string values into the final HTML string that will be returned to the function caller.\n\nAs you can see, the output with Babel proposal class properties transform enabled looks like this:\n\n![Final list output from out listmaker.js class. It shows two lists built from our arrays](/img/screenshot_2019-05-10-codesandbox-1-.png)\n\nAnd there you have it! Nothing fancy on the back, nothing fancy on the front, but it illustrates how simple and self-documenting your classes can become.\n\n## Rummaging in the final project\n\nIf you'd like to take a look at the finished project for reference, you can [jump to the project over on my CodeSandbox account](https://codesandbox.io/embed/zqjr30zznm).\n\nI've also included it here:\n\n{% iframe\n  url=\"https://codesandbox.io/embed/zqjr30zznm?fontsize=14\"\n  label=\"Parcel example with class transform from blog\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}","src/content/blog/2019-05-13-configure-parcel-js-and-babel-to-use-javascript-proposal-class-properties.mdoc","23b79e7e41feb10d","2019-05-13-configure-parcel-js-and-babel-to-use-javascript-proposal-class-properties.mdoc","2020-01-07-what-should-you-know-as-a-frontend-developer",{"id":257,"data":259,"body":265,"filePath":266,"digest":267,"legacyId":268,"deferredRender":156},{"title":260,"description":261,"featured":145,"featuredimage":262,"date":263,"tags":264},"What should you know as a frontend developer?","Whether you're a budding frontend developer or have been coding a while, what exactly should you know as a frontend developer?","/img/what-should-you-know-as-a-frontend-developer-blog-post.png",["Date","2020-01-07T12:32:00.302Z"],[177,149],"![What you should know as a frontend developer blog header image](/img/what-should-you-know-as-a-frontend-developer-blog-post.png)\n\nAs a [coding coach](https://codingcoach.io/) mentor I get asked a lot of questions about the intricacies of the web and how it works. The other day I was asked to take a look at a web page and explain how it worked, how it loaded and displayed the page.\n\nTo be honest, I struggled with some of the deeper technology and processes involved and this got me thinking: just what should you know as a frontend developer and to what level?\n\nI'm going to unload my brain a little and share some of the common skills or areas of knowledge that I feel are useful or essential to have as a budding frontend developer. These are certainly things that I would look for in a potential hire to join my team.\n\nThis is a long post, so here are some jump links to help you out:\n\n- [Technology-specific skills ](#technology-specific-skills-)\n- [Core, role-specific skills ](#core-role-specific-skills-)\n  - [HTML - the structural foundation ](#html---the-structural-foundation-)\n  - [CSS - the paint on top ](#css---the-paint-on-top-)\n  - [JavaScript - the behaviour controller ](#javascript---the-behaviour-controller-)\n  - [Accessibility ](#accessibility-)\n  - [Performance optimisation ](#performance-optimisation-)\n  - [Layouts, UI design patterns and UX ](#layouts-ui-design-patterns-and-ux-)\n  - [Debugging and troubleshooting (both skills and tools) ](#debugging-and-troubleshooting-both-skills-and-tools-)\n  - [Unit testing ](#unit-testing-)\n- [Broader, 'soft' skills ](#broader-soft-skills-)\n- [How deep is your ~~love~~ knowledge](#how-deep-is-your-love-knowledge)\n- [What's on your 'things frontend developers should know' list](#whats-on-your-things-frontend-developers-should-know-list)\n\n## Technology-specific skills \u003Ca name=\"tech-skills\">\u003C/a>\n\nIncreasingly, companies are hiring for person-fit and culture alignment these days over hardcore, specific or niche skillsets. A lot of forward-thinking companies prefer people who are adaptable and have a capacity to skill up quickly and play nicely with others.\n\nThat said, you're probably going to have an edge if you're applying for a role as a developer in the AWS platform and you have a solid understanding of Amazon's flagship cloud server technologies.\n\nUnderstandably, this causes a lot of stress for people starting out in frontend development as they're not sure where to focus their attention in learning — there's just so much!\n\nMy advice is always to learn what you can, take opportunities when they appear, and focus on what interests you. If you love Kubernetes, learn it! If you're interested in building a backend to your frontend, try Mongo DB. If you fancy React (whilst not strictly a 'technology in itself), go for it!\n\n![headphones, keyboard and mouse laid out on a pink background](/img/workplace-2303851_640.jpg)\n\nNo amount of exposure to different technologies, frameworks and platforms will do you harm, but if you have a real ambition to work within, say, the blockchain world, then I would endeavour to learn as much as possible in that direction.\n\nThe thing to remember is that technologies change very quickly and tying yourself into one too deeply too early in your career can have its drawbacks. I'd recommend gaining a solid, high-level overview by sourcing some great introduction articles or other media, such as [this great comic book intro to Kubernetes from Google](https://cloud.google.com/kubernetes-engine/kubernetes-comic/).\n\n## Core, role-specific skills \u003Ca name=\"core-skills\">\u003C/a>\n\nThis is where the meat and potatoes of your skills should lay as a frontend developer. Now, should these be hyper niched, specific, or more versatile and broad?\n\nFor me, the answer is...it depends.\n\nThere's tons of sub topics that you can delve into and specialise in, whether that's one of the fundamental pillars of frontend development (HTML, CSS, JavaScript), or something more overarching, such as performance or security. Of course, it's useful to have at least some understanding of things like security and performance, but there are tons of developers out there who are real specialists in, say, layouts and CSS performance, above their JavaScript skills, for example.\n\nIn terms of frontend development, the following list will give you a rounded set of applicable skills to just about any frontend role you do:\n\n### HTML - the structural foundation \u003Ca name=\"html-skills\">\u003C/a>\n\nThe building blocks of any web page, HTML offers to structure our raw data, as well as providing an interface called the [DOM (document object model)](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) to attach events to and which allows scripts to access and update the content.\n\nA good understanding of HTML would include being able to identify the right elements for the right job, semantics of structural layout, what attributes are available (important for accessibility), and at least a little on how the DOM works and what its purpose is.\n\n### CSS - the paint on top \u003Ca name=\"css-skills\">\u003C/a>\n\nWithout looking into preprocessors like SASS, raw CSS is the icing slathered on top of the HTML cake to make our structured content look a certain way and lay out in a particular fashion.\n\nWhen it comes to CSS it's important to know a few different ways to achieve the same goal. For example, older browsers don't support certain selectors or properties so it's useful to know how to get what you need using a different approach.\n\nIt's also helpful to know a little about _how_ and _when_ CSS kicks in and how it interacts with other resources on the page. How JavaScript can block CSS from rendering and the impact that importing certain items, such as fonts, can have on the loading of your page.\n\nIn terms of abject knowledge, the cascade part of cascading style sheets is one of the most common tripping points for many a dev. Get familiar with how the cascade works in terms of properties down the line from parent to child, learn how specificity affects your selectors and you'll prevent future headaches.\n\nAdditionally, I would study the more tricky concepts; things like flexbox, or CSS grid, which can be quite confusing and produce unexpected layouts when used without a solid base of understanding.\n\nFinally, some common layout gotchas, such as a collapsing parent element when all child elements are floated. **This will help you troubleshoot display bugs and solve them!**\n\n### JavaScript - the behaviour controller \u003Ca name=\"javascript-skills\">\u003C/a>\n\nJavaScript should look after the _behaviour_ of our pages. It manipulates content and allows us to truly interact with the page beyond the limited controls that HTML (and CSS) gives us.\n\nHowever, JavaScript is such a huge topic all on its own it's hard to know _what_ to know and what to recommend.\n\nFor a start, a good understanding of [OOP](https://en.wikipedia.org/wiki/Object-oriented_programming) and [SOLID](https://en.wikipedia.org/wiki/SOLID) principles are important, not strictly for JavaScript, but programming and development in general. JavaScript is becoming more object-oriented in its approach with the newer versions of the language offering more class-oriented options and strongly typed elements (it's still a very loose, dynamic language, however).\n\nUnderstanding the quirks of JavaScript, about its [data structures and conventions on 'this'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) will also help you avoid common pitfalls later in your development career.\n\n![lines of JavaScript code on a black background](/img/technology-1283624_640.jpg)\n\nIf I were starting out, I'd focus on ES6 habits and practices. Learning how the newer language features work, such as [arrow functions](/blog/how-to-use-arrow-functions-in-javascript-es6/) and array manipulations, and how to approach your JavaScript development in a component-based, modular way.\n\nAlso, take the time to do a little [reading on the CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model), the CSS version of the DOM. It's within here that JavaScript interacts with our CSS layer.\n\nFinally, I'd certainly check out the `fetch()` paradigm and all [about how Promises work](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). If you're dealing with anything in modern frontend development, you'll be interacting with an API. Of course, there are libraries that abstract a lot of this away from you, but knowing how these two core JavaScript concepts work will help your understanding of asynchronous code execution.\n\n### Accessibility \u003Ca name=\"accessibility-skills\">\u003C/a>\n\nAn increasingly hot topic, but a vital one to the web ecosystem for so many users who have different accessibility needs. You don't need to be a guru on the in's and out's of making everything accessible but it's certainly advised to be mindful of how to approach your frontend development with inclusion in mind.\n\nIn practice this means understanding how different people can access your site/app and working on making it easier to navigate without a keyboard, for example; at the very least it means not undoing a lot of the builtin controls and accessible constructs offered by HTML and the browser by default.\n\nRather than bolting it on as a separate topic, accessibility is helpful to weave into the initial learning. For example, if you're learning about HTML forms, learn how tab indexing and default HTML buttons help with making a form more accessible.\n\n### Performance optimisation \u003Ca name=\"performance-skills\">\u003C/a>\n\nAgain, there are people who specialise almost exclusively in optimising web app performance. You don't need that level of understanding, but it's helpful to know how to improve.\n\nThere are tons of tools out there whether it's directly within an IDE (such as Visual Studio) or in-browser (such as Google Chrome's Lighthouse), that will help you see any obvious blockers or bottlenecks in your code which can then be improved.\n\nOf course, if you follow a refactoring approach like [my own thoughts on continuous refactoring](/blog/continuous-refactoring-avoiding-technical-debt-in-the-here-and-now/) then you can save a number of problems before they begin by keeping code as lean and lightweight as possible.\n\nThis is also where some deeper knowledge of code execution comes into play. Are you performing too many unnecessary loops in that one JavaScript class? Are you targeting a lot of universal selectors in your CSS (\\*) in your stylesheets?\n\nKnowing what options are available during build and post-deployment steps help too. Can you leverage a CDN to serve content and assets? Are you using a rigorous compression and production building of your apps and web sites?\n\n### Layouts, UI design patterns and UX \u003Ca name=\"layout-skills\">\u003C/a>\n\nOK, these are three big topics here, but I don't think you need to be an expert in any of them as a frontend dev.\n\nThat said, you'll be working in the area where your users play, building the interfaces that they use. It's helpful, therefore, to have at least a passible knowledge of some common layout approaches, as well as some popular UI patterns.\n\nUX is a huge area in its own right, but it'll go a long way to bridging any gaps between departments and your users if you can articulate designs and ideas into wireframes, and interpret user feedback into meaningful changes to your code.\n\n### Debugging and troubleshooting (both skills and tools) \u003Ca name=\"debugging-skills\">\u003C/a>\n\nIt doesn't matter whether you're barely on page one of your first development textbook, or you've been a developer for 20 years, **things are going to go wrong and stop working or do something so weird that you'll be scratching your head**.\n\nBeing able to debug successfully is about narrowing the issue down into the most localised part of the code possible and correcting it. In my experience this is a combination of a few factors: working backwards from what you _expect to be happening_ and what _actually is_; using a built up knowledge base from experience and 'most likely reasons'; and useful tools, which might be within the IDE, or using browser dev tools; and finally, [Occam's Razor](https://www.britannica.com/topic/Occams-razor).\n\nIt can be an intangible skill, but learning how to solve problems is fundamentally what development is all about. When those solutions themselves cause problems, it's imperative to learn how to break down and step through your code to see what's at fault.\n\n_...PS - it's almost always caused by caching or spelling a variable name incorrectly :D_\n\n### Unit testing \u003Ca name=\"testing-skills\">\u003C/a>\n\nThis one's good for the team, but knowing some common concepts around how and what to test and what frameworks are available to help you is important.\n\nUnit tests help by offering an indication that your code does what you intended and that any recent changes haven't altered functionality elsewhere.\n\nBringing a willingness to unit test to the table, as well as some understanding of how to go about unit testing for your specific codebase, will go a long way.\n\nThere aren't too many hard and fast rules with unit testing, but in the frontend world, using a framework such as Jest, we tend to look at user-based outcomes rather than specific execution of code. For example, we might like to check that if a button is clicked (simulated in the unit tests of course), does a particular UI element change or update? As opposed to 'did this particular method in the JavaScript class fire?'.\n\n## Broader, 'soft' skills \u003Ca name=\"soft-skills\">\u003C/a>\n\nI'll put this out there, I'm not a fan of the term 'soft skills' for many reasons and there's a growing unease across our industry with the term too.\n\n![a male solving a Rubix cube](/img/magic-cube-1976725_640.jpg)\n\nHowever, until we have a better label for it (comments section help me out!), this does a good job of grouping together the types of skills or areas of knowledge that apply to things outside of being a developer. Those that don't pertain to a particular set of technology or the general tool belt of being a developer. Probably just those that make up good life skills.\n\nThese include:\n\n- **Assertiveness**\n  Often mistaken for being obtuse or bossy, this is merely being able to state your opinions and ideas in a firm and controlled manner. Being unafraid to ask for what you want and sharing your thoughts with others, good or bad.\n- **Communication**\n  Quite broad, but being able to get an idea or a point across successfully to others. This could be in writing or via a visual means, such as wireframes or sketches. Vital for anyone who wants to work in such as visual field as frontend development.\n- **Positive attitude**\n  Having a positive outlook on a situation can make a world of difference. It's not about relentlessly finding even a sliver of good, but it's focusing on the positive where possible and making things work. People like to work with people who aren't afraid to have a go and try something new and those that approach even mundane or less exciting tasks with a can-do attitude.\n- **Helpful spirit**\n  Similar to being positive, having a kind and helpful approach will pay dividends. Everyone needs help sometimes, even you, so it's just good sense to spread that help around when you can. If a fellow develop is struggling, help them out. If there's a second pair of hands needed, things will move forward sooner if you pitch in.\n- **For-the-good-of-the-team spirit**\n  No, you don't have to be a drone or mindless company lemming, but the choices you make and the decisions you arrive at should be with the team in mind: will this make everyone's life a little easier, will it help more than just me, etc.? You're all in the same boat with development so it helps to work towards the collective good where possible.\n- **Critical thinking**\n  Being able to look at a situation or task with an open mind and logical reasoning is invaluable, especially as a developer. That ability to break down a large problem into many cumulative solutions is a big part of our role.\n- **Objectiveness**\n  If you can take yourself and your feelings out of a situation and look at it from an overhead, third-party point of view, this is helpful to see if the decisions you're making are coming from your own opinions or long-held beliefs. Objectivity helps us to see if there could be a different way to do things.\n- **Learning learning learning**\n  Life happens, things move on, stuff changes. Especially in the tech industry. If you don't have a love of learning new things (not just for the sake of it) then you'll get left behind quickly. Being able to find joy in a new challenge and enjoying keeping up with the changes in our field is helpful in bringing new ideas to the collective table and solving all sorts of problems.\n\n## How deep is your ~~love~~ knowledge\n\nI have seen interviewers probing the depths of a candidate's knowledge of browsers and the intricate in's and out's of how a web page is physically rendered on a page and sometimes this feels a little unfair or 'trappy'.\n\nI mean, you don't have to know how a car physically converts small explosions in its engine to be able to drive it at a professional level. This is where the 'it depends' comes in: you would probably expect a mechanic to know how an engine works, wouldn't you?\n\nBut _again_, to what level? Would you expect that same mechanic to understand exactly how much fuel needs to be injected into each piston at any given moment? Would you expect him to be able to explain the underlying physics behind how brakes work?\n\nMaybe not...\n\nGetting away from the metaphor and back to frontend and browsers, how deep should your knowledge hole go?\n\nFor me, I think it's good to have a broad understanding of the major players in the rendering of a web page: the DOM, CSSOM and JavaScript and the distinct parts that each plays. Being able to break down a large problem into smaller ones and solving those in a neat, well-documented and well tested way is much more important to me than knowing, at a binary level, how the browser renders a page.\n\nThat said, it's all about levels and experience. If you're a senior dev, you'll likely have more experience with certain things and be able to build on that base knowledge, adding more advanced learning on top in layers.\n\n## What's on your 'things frontend developers should know' list\n\nLet me know if I've missed anything or what your list would look like.","src/content/blog/2020-01-07-what-should-you-know-as-a-frontend-developer.mdoc","c6c7f6f4da00c993","2020-01-07-what-should-you-know-as-a-frontend-developer.mdoc","2020-01-21-react-redux-components-apis-and-handler-utilities",{"id":269,"data":271,"body":277,"filePath":278,"digest":279,"legacyId":280,"deferredRender":156},{"title":272,"description":273,"featured":156,"featuredimage":274,"date":275,"tags":276},"React & Redux: components, API's and handler utilities","Learn how to use React and Redux with an API and a data handler utility to act as a bridge between our components and application state.","/img/react-redux-api-s-and-the-data-hander-part-i-blog-post.png",["Date","2020-01-21T13:06:05.233Z"],[149,150,226,151],"![Blog header image for the post on react redux and api data handling](/img/react-redux-api-s-and-the-data-hander-part-i-blog-post.png)\n\nIf you've been using React for a while, especially in a large, complex app, you'll have undoubtedly come across [Redux](https://react-redux.js.org/). Redux is a state container responsible for maintaining a centralised 'state' of various slices of data in your app.\n\nHowever, if you follow a lot of the tutorials out in the wild, Redux is often shown as being used directly within a component. Whilst this is fine and a perfectly valid way to call Redux's actions and dispatchers, when you mix in calls to an API, you can end up with really lengthy and ugly looking code. This becomes harder to maintain, more difficult for new team members to assimilate, and doesn't do as good a job of separating out the data handling concerns.\n\nIn this two part series, I'm going to show you the approach we use at [IAM Cloud](https://www.iamcloud.com/) to separate out our API calls into a centralised data handler utility that keeps in touch with our calling component and the Redux state management system.\n\nIn this first part, we're going to look at the overall concept of using the trio of React, Redux and an API. We'll look at a very common example of how you can use an API to fetch data, and how to dispatch Redux to update your app's state using reducers and Redux actions.\n\nIn part two, we'll look at a real-life, production-ready code example that shows how to implement a data handler pattern and how to shift your Redux state management into its capable hands.\n\nSound good? Let's get to it.\n\n## The typical React component, API, Redux mix\n\nThe common relationship between a React component, a data API and the Redux framework looks like this:\n\n![A diagram showing how a component, an API and app state interact showing connecting lines between each part](/img/redux-data-handler-diagram.png)\n\nThe diagram illustrates the flow from a user interacting with the component, to state updating. An example of this might go something along these lines:\n\n1. The user clicks a button to load a list of users\n2. The React component calls the API using a GET request to something like '/users'\n3. The API fetches the data and returns its Promise to the component\n4. The component then dispatches a Redux action with the API payload (e.g the list of users)\n5. Redux updates app state with the list of users it has been passed\n6. The state change is noticed by the component, which takes action to refresh, updating itself with the shiny list of users.\n\n## React, API and Redux in practice\n\nTheory's all good and well, but let's take a look at a real example. If you'd like to have a browse at the code right away, then you can [visit the Code Sandbox I've set up](https://codesandbox.io/s/bitter-bash-js30i?fontsize=14&hidenavigation=1&theme=dark) for this example and take a look.\n\n(**Sidebar**: Now, I'm assuming you're at least a little familiar with Redux; if not in practice, then hopefully in theory. It can be quite a difficult concept to wrap your head around and I've certainly struggled in the early days of using it, but stick with it, as it makes your life really easy once the building blocks are in place. For this example app, I've wired up all the necessary reducers, action creators and state, following the [really clear guides and documentation found on the React-Redux site](https://react-redux.js.org/introduction/quick-start) itself.)\n\n### First things first: creating the skeleton App component\n\nWhat we're looking for here is a simple button that when you click it, will call an API that returns some user data which is pushed into app state, then is displayed as a nice unordered list.\n\nA bit like this:\n\n![A screenshot of our working app, showing the button click that loads a list of users](/img/example-data-handler-app-flow.png)\n\nTo do that, first, we'll set out the building blocks of the App component.\n\n```javascript\nimport React from 'react';\n\nimport './styles.css';\n\nclass App extends React.Component {\n  handleLoadUsersClick = () => {\n    // TODO - we'll handle loading the users from the\n    // API here and some Redux state management.\n  };\n\n  render() {\n    return (\n      \u003Cdiv className=\"App\">\n        \u003Ch1>React, Redux, and Data Handling\u003C/h1>\n        \u003Ch2>An example \u003C/h2>\n        \u003Cp>\n          Click the load users button below to start loading users from the api\n        \u003C/p>\n        \u003Cp>\n          \u003Cbutton onClick={this.handleLoadUsersClick}>Load users\u003C/button>\n        \u003C/p>\n        \u003Chr />\n        \u003Ch3>Users\u003C/h3>\n        {this.props.loading ? \u003Cp>loading...\u003C/p> : null}\n        {!this.props.loading && this.props.users ? (\n          \u003Cul>\n            {this.props.users.map((user) => (\n              \u003Cli>\n                \u003Cstrong>{user.name}\u003C/strong> | {user.email}\n              \u003C/li>\n            ))}\n          \u003C/ul>\n        ) : null}\n      \u003C/div>\n    );\n  }\n}\n```\n\nNothing too fancy here. We've got some plain HTML with a simple button wired up to an internal click event handler `handleLoadUsersClick()` . Under that, we have some props values to show a loading message and display the list of users once we've loaded them and they're available.\n\n### Now to add in the Redux operations\n\nOf course, we'll need to populate these props values from our app state. The props, `loading` and `users` will be supplied from the central state by Redux. However, we need to get them using the [`connect()` function that Redux supplies](https://react-redux.js.org/introduction/quick-start#connect).\n\nWe'll also need to add our Redux actions in and wire them up to our App component.\n\nTo achieve these goals, we need to create two objects (or functions that return objects) which will both map our central state to our props, and map Redux's dispatch service to our props respectively.\n\nLet's add the `connect()` function to our App component and the two functions that wire up state and dispatch.\n\n```javascript\n// ...other imports\n\nimport { connect } from 'react-redux';\nimport { getUsers, getUsersSuccess } from './actions';\n\nclass App extends React.Component {\n  // ...App implementation\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  loading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLoadUsersClick: () => {\n      dispatch(getUsers());\n    },\n    onLoadUsersComplete: (users) => {\n      dispatch(getUsersSuccess(users));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n```\n\nThe main imports section and App implementation remain the same, but we just add in our new imports\n\n```javascript\nimport { connect } from 'react-redux';\nimport { getUsers, getUsersSuccess } from './actions';\n```\n\nTo load in the `connect` function from React Redux, and to grab our reducer actions from another file — that's the `getUsers` and `getUsersSuccess` named imports above.\n\nNow, we'll wire up elements of our app state into the App component's props:\n\n```javascript\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  loading: state.isLoading,\n});\n```\n\nThis is a very typical setup where we create a function that returns an object whose properties map to a number of props that our component can use. In our case, we're using `this.props.users` to create our unordered list of users.\n\nNext, we create a similar function to map Redux's dispatch function to the component's props object:\n\n```javascript\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLoadUsersClick: () => {\n      dispatch(getUsers());\n    },\n    onLoadUsersComplete: (users) => {\n      dispatch(getUsersSuccess(users));\n    },\n  };\n};\n```\n\nWith this function, we're accepting the Redux dispatch method (which will act upon our actions) and we build and return an object that will also be passed into our App component's props. In this case, we're returning a bunch of functions that our App can call to dispatch Redux actions and, ultimately, update our state.\n\nFinally, we wire up the state props, dispatch props, and our App component using the Redux connect function in this bit of code:\n\n```javascript\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n```\n\n### Wiring up the button handler and our API call\n\nThe final step in the puzzle to make everything hum is to make our button click handling event actually do something.\n\nCurrently, whilst connected to the `onClick` event of our button, the handler method is looking a little sad and empty:\n\n```javascript\nhandleLoadUsersClick = () => {\n  // TODO - we'll handle loading the users from the\n  // API here and some Redux state management.\n};\n```\n\nSo let's populate it with some of our Redux actions and our API call:\n\n```javascript\nhandleLoadUsersClick = () => {\n  this.props.onLoadUsersClick();\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((json) => this.props.onLoadUsersComplete(json));\n};\n```\n\nThe first thing we need to do is call our Redux dispatch method `onLoadUsersClick()`. If you follow the [Code Sandbox example code](https://codesandbox.io/s/bitter-bash-js30i?fontsize=14&hidenavigation=1&theme=dark) through, you'll see that this sets the 'isLoading' flag to 'true'. We're passing this piece of state into our App component's props, and it's being used to show and hide portions of the UI, such as a little 'loading...' message.\n\nNext, we call our API. In this case, I'm using [a handy free tool called JSONPlaceholder](https://jsonplaceholder.typicode.com/). It has a bunch of endpoints that return dummy data, but it's effectively a live API out in the wild. In our case, we're calling the '`https://jsonplaceholder.typicode.com/users'` endpoint that will return a nice set of user data — name, email, address, that sort of thing.\n\nUsing the native JavaScript `fetch()` method for this, we call the API, format the response into some JSON, before finally passing this data to our other Redux dispatch function we set up earlier, `onLoadUsersComplete()`. The action it calls updates state by setting our list of users and switching the 'isLoading' flag to 'false'.\n\n## The complete example\n\nHere is the complete, embedded example of all the code above in all it's working glory.\n\n{% iframe\n  url=\"https://codesandbox.io/embed/bitter-bash-js30i?fontsize=14&hidenavigation=1&theme=dark\"\n  label=\"Redux data handler - example 1\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Why is the above example bad?\n\nIt's not...\n\nIt's perfectly acceptable code that's relatively clean and tidy and can be followed nicely by a developer's eyes as to what it's doing.\n\nHowever (there's always a 'however')...\n\nThis example is quite small and very contrived. When you're dealing with real-world apps that are usually much larger and more complex and feature more moving parts, this sort of approach to integrating your API calls with your Redux actions and state management within your components can come with some drawbacks and some areas that can be improved:\n\n- By using `fetch()` directly within our components, we're going to have to repeat a lot of code for things like formatting the response into a suitable form.\n- Whilst a component might have to trigger an API call, it generally shouldn't be so closely tied to the API as to have it embedded within itself. From the component's point of view, it would be better for it to simply ask for some data and receive it, not caring from where that data is retrieved.\n- Additionally, we're not handling any sort of API error here. If we did, the code would start to grow and it raises the question about whether we add API error handling to each component or abstract it to a more centralised place.\n- We have multiple Redux action/dispatch calls to handle the common Redux action pattern of 'doing action', 'action has completed' and 'something went wrong during the action'.\n  Take the `handleLoadUsersClick()` event. Here we start with a call to set a loading flag and then dispatch another once the data has come back.\n- If we need to manipulate the data in any way before passing to our dispatch events (sometimes data received from an API is not in the exact shape we need) then this will add more code into our small component.\n- The list of dispatch functions at the end of our component file is only small now, just two. It's easy to see though how this could grow quite unwieldy over time as we need to add more functions.\n- The complexity of testing components built this way increases.\n\n## Useful links\n\nWe've used a few services and frameworks across the span of this article, so here's a helpful list of them in once place for your convenience:\n\n- [Redux JS](https://redux.js.org/) - the Redux framework built for JavaScript\n- [React Redux](https://react-redux.js.org) - the same Redux framework, with a React focus\n- [JSON Placeholder](https://jsonplaceholder.typicode.com/) - a super helpful online API that returns some common fake data\n\n## Coming up in part II\n\nIn [part two](/blog/2020-01-27-react-redux-components-apis-and-handler-utilities-part-two/), we'll be looking at how to improve this set up for more clarity, as well as abstracting the interactions with the API into a generic data handler utility. We'll even look at how you can create a reducer factory that will handle common state updates, such as updating a list, on your behalf, reducing code and creating a handy convention for your components to follow.\n\n[Continue on to part two](/blog/2020-01-27-react-redux-components-apis-and-handler-utilities-part-two/) now.","src/content/blog/2020-01-21-react-redux-components-apis-and-handler-utilities.mdoc","2ac494c9a10136e4","2020-01-21-react-redux-components-apis-and-handler-utilities.mdoc","2020-01-23-10-hot-tips-for-better-debugging",{"id":281,"data":283,"body":290,"filePath":291,"digest":292,"legacyId":293,"deferredRender":156},{"title":284,"description":285,"featured":156,"featuredimage":286,"date":287,"tags":288},"10 hot tips for better debugging","We all run into coding problems and get stuck. Fortunately, I've got 10 great tips to help you become a better debugger and to get your code flowing again.","/img/10-debugging-tips-blog-post.png",["Date","2020-01-23T10:59:02.993Z"],[150,227,289],"Tips","![Blog header image for 10 tips for better debugging](/img/10-debugging-tips-blog-post.png)\n\nWhether you're a seasoned, mature developer or just starting out, there is one universal truth: you're gonna get stuck. It's a regular part of the #DevLife to find that something just doesn't work how you expect it to, is doing something weird, or is just plain dead in the water.\n\nOne of the most valuable (and underrated) skills in the developer's toolkit is being able to smoothly and successfully debug their applications and get everything back on track.\n\nIn fact, it's such a key skill, I should have probably put it in my recent article on '[What you should know as a frontend developer](/blog/2020-01-07-what-should-you-know-as-a-frontend-developer/)'.\n\n## The importance of debugging\n\n'Why is debugging such a valuable skill?' I hear you cry! Well, it's because things go wrong during development. Sometimes a lot, sometimes a little, but roadblocks happen and your life is going to be so much easier if you know where to look and how to fix it.\n\nYou've got so many plates spinning, so many elements and layers interacting, it's not surprising that things can frequently perform in unexpected ways or not quite wire up how you intend. Even just focussing on the frontend (ignoring the backend, SQL, etc.) you've got HTML, CSS, JavaScript, browsers, API's, your own computer, and more all trying to mesh and bring your creation to life; you're going to get problems here and there.\n\nPlus, the less able you are to solve your own problems, the more resources you'll consume within your team and the more time will be lost during production.\n\nAs a coding mentor through the [popular Coding Coach platform](https://codingcoach.io/), it's a skill that I try to encourage in those I help. I love helping people and have lots of time to answer questions and look through code, but I firmly believe in the 'teach a man to fish' philosophy.\n\nBy learning how to quickly diagnose and solve and issue, you'll become a better developer, unblock yourself more frequently, and be able to help others to do the same.\n\nSo let's get to the tips!\n\n## 1 - It's probably caching\n\nNo, seriously, it probably is.\n\nIf I had a single £1 for every time I've been tripped up or caught out by caching, well...\n\nBut really, there is a lot to be said for caching and problems that it causes. It could be you have some images in a CDN or data from an API that have caching applied to them and, even though you've updated everything and cleared it out, you're still getting a weird issue that you can't put your finger on.\n\nThen you've got browsers, which, despite their best intentions of making your browsing experience smooth and quick, do enjoy hanging on for grim life to assets, such as JS files or stylesheets.\n\nFlush all the caches, try again, repeat!\n\n## 2 - No, it's _still_ probably caching\n\nSee 1.\n\n## 3 - If it's not caching, it's probably you\n\nThis sounds mean, and I don't intend for it to, but it's most likely that you have become your own worst debugging nightmare.\n\n![Boy sitting on a chair, facepalming](/img/boy-666803_640.jpg)\n\nI've lost count of the number of times I've been stumped merely because I've spelt a variable incorrectly, or just straight up used the wrong variable altogether.\n\nFrom typos, to missing semicolons, from calling the wrong function, to not calling the intended function at all, it's all to easy to have a really simple slip up that can cause you pain.\n\nIt leads us nicely into point four below, but double check your own work to make sure everything that should be wired up, is, and that the cause of a code malfunction isn't your own accursed hand.\n\n## 4 - Narrow it down\n\nFor all other non-caching issues, the best advice is the narrow your focus like a laser beam and target the specifics of what is (or isn't) happening.\n\nThis is the real skill when it comes to debugging, playing digital detective and trying to move through your app or process step by step and hunting down the area where the issue is actually happening.\n\nFor example, you've clicked a button and expect some data from an API to show up. But it hasn't...Hmmmm.\n\nThere's likely multiple factors at work here and you need to take them out of the equation. If you've got [Postman](https://www.getpostman.com/) then you should be able to test the API in isolation and rule it out as a suspect. If that's working, then could it be how you're _calling_ the API from your JavaScript?\n\nBy shifting your gaze from the broad and mushy 'it's not working' to a more focussed '_that's_ not working' and identifying the iffy part of an otherwise good whole, you'll be back on track in no time.\n\n## 5 - Use your browser tools\n\nThe most common browsers on the market are Google's Chrome and Mozilla's FireFox. They both have excellent dev tools jam-packed with handy utilities. You can do loads with the suite of tools at your disposal, including:\n\n- Inspecting HTML, CSS or JS files directly\n- Using browser extensions to monitor state for frameworks such as React or Vue\n- View network calls, requests and responses\n- Monitor your app's performance and see where the bottlenecks are\n- You can even live debug JS files and step through the code\n- ...and more\n\nEven Microsoft's abomination of a browser has some of these, so there is no excuse to fire up alt-cmd-i (well, for FireFox at least) and use the helpful suite of browser-based resources given to you for free.\n\n## 6 - Use your IDE\n\nI use the excellent VS Code for my development work, but whatever you use, it's most likely got some sort of debugger facility. For example, in VS code, you can launch a browser of your choice, attached to the running application and step through the code line by line to narrow down the issue.\n\nYou won't always need to do this, of course and it can be a slightly cumbersome task to be honest, but there are times when you just need to get a feel for how data is flowing around your app and stepping through it via the IDE's debugging process is a great place to start.\n\nOutside of an actual debugging flow, don't be afraid of the old `console.log()` function; `console.log()` is your friend! It allows you to get a snapshot of an object or variable without having to break the flow of your app by stepping through using the debugger.\n\n## 7 - Use your team\n\nEarlier in the article I mentioned learning to solve your own debugging issues, but this is a skill that grows over time. As you gain more experience, you'll see common problems flair up again and again and as that happens, you'll naturally take less time to fix these sorts of issues in the future.\n\n![group of people fist bumping over a table](/img/people-2569234_640.jpg)\n\nHowever, I would always recommend spending some time trying to figure things out for yourself, but not _all_ your time. If you've spent more than 20-30 minutes and haven't made any progress, then grab a colleague, a senior dev, anyone who can get a fresh pair of eyes on the matter and whose experience you can draw upon to get things moving forward.\n\n## 8 - Start simple and add in\n\nThere are times when things are just a bit of a mess. You've started with the best intentions, but it's got out of hand and you just can't see the wood for the trees.\n\nIn times like these, I like to strip out as much of the clutter as I can to achieve some clarity, some zen. Maybe it's just commenting lots of unnecessary lines out, or removing a component, but if you can strip back what you're currently working with to the bare bones, you'll have a better vantage point to be able to suss out what's going wrong.\n\nStarting from this base point, you can begin to add things back in until you hit the trouble spot, where you can solve for 'x'.\n\n## 9 - Start complex and take away\n\nConversely, there are times where you don't have the luxury of being able to pair things back. Besides, everything _was_ fine and dandy until you started adding in those other components.\n\nIn this scenario, it's best to remove things, one at a time, little by little, until you've got something working and then add to it until you've worked out the kinks.\n\n## 10 - Leave it alone and come back later\n\nGenuinely the best tip on this entire list. If you do _nothing_ else, do this:\n\nGo away.\n\n![Closed sign hanging on a door reading 'sorry we're closed but still awesome'](/img/sorry-we-re-closed-but-still-awesome-tag-1101720.jpg)\n\nSeriously, just leave it alone for 5, 10, 15 minutes. Hell, sometimes, you've got so frustrated that you need an overnight gap to spin yourself back up and tackle the beast.\n\nBy having a break, you'll cool off some of those burnt out brain endings and be able to see things more clearly and definitely move forward. It might be that you can't fix what isn't working, but you might have gleaned a better idea of how to solve your issue using a different approach.\n\nWhatever you're struggling with, having a mini-break will boost your productivity and help you push through the debugging pain.\n\n## What tips do you have to help fight the coding woes?\n\nDo you have any debugging tips? Have I missed any out? Let me know.","src/content/blog/2020-01-23-10-hot-tips-for-better-debugging.mdoc","4adf93920cd204c3","2020-01-23-10-hot-tips-for-better-debugging.mdoc","2020-01-27-react-redux-components-apis-and-handler-utilities-part-two",{"id":294,"data":296,"body":302,"filePath":303,"digest":304,"legacyId":305,"deferredRender":156},{"title":297,"description":298,"featured":156,"featuredimage":299,"date":300,"tags":301},"React & Redux: components, API's and handler utilities part two","Part two of the series on learning to use React and Redux with an API and a data handler utility to act as a bridge between our components and application state.","/img/react-redux-api-s-and-the-data-hander-part-ii-blog-post.png",["Date","2020-01-27T11:30:18.035Z"],[149,150,226],"![Blog article header for react & redux components, API's and data handling part two](/img/react-redux-api-s-and-the-data-hander-part-ii-blog-post.png)\n\nIn [React and Redux: components, API's and handlers Part I](/blog/2020-01-21-react-redux-components-apis-and-handler-utilities/), we looked at how to add Redux to your React app and add in calls to an API via JavaScript's `fetch()` .\n\nHere in part two, we're going to build on this idea and introduce the concept of a data handler. Our data handler will act as an intermediary between our component, our API and the Redux dispatching of actions.\n\nFor those eager to explore the finished article before ploughing on, you can [find the complete data handling project in a new Code Sandbox here](https://codesandbox.io/s/redux-data-handler-example-2-mklek?fontsize=14&hidenavigation=1&theme=dark).\n\n## Enter the data handler\n\nYou may remember that in part one, we had a diagram highlighting the different elements involved in fetching data, updating state and doing component things. In fact, here it is:\n\n![Diagram showing the relationship between a React component, an API and Redux state](/img/redux-data-handler-diagram.png)\n\nThis works fine and our app does what we set out to do: grab some users from an API and list them.\n\nHowever, it's very closely tied to our component. In fact, this model is very component-centric. The component is responsible for calling the API, updating state via Redux and then doing whatever the component is meant to be doing in the first place.\n\nThis can introduce a few headaches which we outlined in part one of this series, but two of the biggest flaws for me are:\n\n- We're going to potentially have a lot of duplicated code as our app grows,\n- and our component is handling too many responsibilities.\n\n### The data handling middleman\n\nWith the introduction of a data handling mechanism, our new diagram looks like this:\n\n![An improved diagram showing how a data handler can interact between state and our components](/img/redux-data-handler-diagram-updated.png)\n\nAs you can see, we now have a much better spread of roles and responsibilities. Our new data flow looks like this:\n\n1. The user clicks a button to load a list of users\n2. The React component calls the data handler to give it some data\n3. The data handler calls the API using a GET request to something like '/users'\n4. The API fetches the data and returns its Promise to the data handler\n5. The data handler then dispatches a Redux action with the API payload (e.g the list of users)\n6. Redux updates app state with the list of users it has been passed\n7. The state change is noticed by the component, which takes action to refresh, updating itself with the shiny list of users.\n\nGreat, this looks a lot better and our component is now only really concerned with asking for data, without caring as much about where that data comes from or how it is obtained.\n\n## Building the new app and data handler\n\nTo make our lives a little easier, we're going to replace the standard implementation of Redux (we've been using [React-Redux](https://react-redux.js.org/) up to this point) with the brilliant [Redux Starter Kit](https://redux-starter-kit.js.org). The starter kit lets us simplify our redux set up and will enable us to abstract a lot of similar redux operations into a nice reducer factory approach.\n\nSo let's get going. Here's a list of the changes we need to make:\n\n- Install Redux Starter Kit into our project\n- Strip out our Redux actions and reducers into a reducer factory\n- Create a data handler to talk to our API\n- Replace our Redux dispatching and API calls in our component with our new data handler utility\n\n## 1, Install and set up Redux Starter Kit\n\nLet's begin by installing the [Redux Starter Kit](https://redux-starter-kit.js.org/introduction/quick-start) by running the following command:\n\n```javascript\n# NPM\nnpm install --save @reduxjs/toolkit\n\n# Yarn\nyarn add @reduxjs/toolkit\n```\n\nNext, we'll need three things:\n\n- To create a root reducer that pulls together all the other reducers in our app\n- A users reducer that handles state management for the users slice of our app state\n- To wire this all up into our app's `index.js` file.\n\n### Creating the root reducer\n\nWe create a new file, `rootReducer.js` and populate it like so:\n\n```javascript\nimport { combineReducers } from '@reduxjs/toolkit';\nimport users from './usersReducer';\n\nconst rootReducer = combineReducers({\n  users,\n});\n\nexport default rootReducer;\n```\n\nUsing the `combineReducers` function provided by the Redux Starter Kit, we can import any number of reducers that our app needs and handily _combine_ them into one master reducer.\n\nNothing too fancy here, but we do need to create a users reducer because we're importing it in this file.\n\n### Creating the users reducer\n\nNormally, this reducer would contain a lot of reducer actions and updates to state, specifically the users section of state.\n\nHowever, by using our pending reducer factory, we can abstract a lot of this potentially repetitive code away from our users reducer.\n\nWe'll make a new file, `usersReducer.js` and code out the following:\n\n```javascript\nimport ReducerFactory from './reducerFactory';\n\nconst factory = new ReducerFactory('users', 'users');\n\nexport const reducer = factory.reducer;\nexport const actions = factory.actions;\nexport default reducer;\n```\n\nDon't worry, we'll create the reducer factory in a moment, but for now, just look at the simplicity of this users reducer. We import our factory and create an instance of it, supplying two arguments, a name for the reducer (e.g. 'users') and the name of the slice of state that we'll be amending (e.g. also 'users').\n\nOf course, both our reducer name and slice of state happen to be 'users' in this case. However, you might have different names to distinguish them, so it's useful to be able to supply two different arguments.\n\nYou could refactor this to use default arguments to reduce this doubling up of names, but that's an article for another day.\n\nFinally, we export our reducer and the actions that will be created and returned by our factory.\n\n### Wiring up our new Redux approach\n\nFinally, to make everything talk to each other, we need to fire up the `index.js` file and hook up our new root reducer to the Redux store and plug it into the main entry point of our app.\n\nIt looks like this:\n\n```javascript\n// ...other imports\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nimport App from './App';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  \u003CProvider store={store}>\n    \u003CApp />\n  \u003C/Provider>,\n  rootElement\n);\n```\n\nThe `\u003CProvider store={}>` line is a common Redux pattern and is essentially a type of [React context](https://reactjs.org/docs/context.html). The interesting parts that we're concerned with here, is the importing of the `configureStore` from the starter kit and the root reducer we just made.\n\nAll we need to create a Redux store is the `configureStore` method. We pass in an options object that contains a single property, `reducer` , and our root reducer and that's it!\n\n## 2, Create the reducer factory\n\nNow we have our smaller, handier version of Redux installed and configured, it's time to set up our reducer factory. Unsurprisingly, our reducer factory will be a central production class that will create and output very common, CRUD-style reducers.\n\nIt will reduce a lot of duplication when it comes to reducers that essentially do very common actions, such as getting lists of things.\n\nHere's our reducer factory class:\n\n```javascript\nimport { createSlice } from '@reduxjs/toolkit';\nimport initialState from './state';\n\nclass ReducerFactory {\n  constructor(slice, state) {\n    const reducerResult = createSlice({\n      name: slice,\n      initialState: initialState[state],\n      reducers: this._generateReducers(),\n    });\n\n    this.reducer = reducerResult.reducer;\n    this.actions = reducerResult.actions;\n  }\n\n  _generateReducers = () => {\n    return {\n      // get our list of items\n      requestGetItems: (state, action) => {\n        state.isLoading = true;\n      },\n      requestGetItemsSuccess: (state, action) => {\n        state.isLoading = false;\n        state.list = action.payload;\n      },\n      requestGetItemsError: (state, action) => {\n        state.isLoading = false;\n      },\n    };\n  };\n}\n\nexport default ReducerFactory;\n```\n\nStarting from the top, we import the `createSlice` method from the starter kit. This really is where the Redux Starter kit shines. `createSlice` auto-generates our action types and action creators for us, which saves a lot of, frankly, tedious code.\n\nWe supply it with a slice name, the section of state we wish to act upon and a list of reducers to alter that section of state.\n\n```javascript\nconst reducerResult = createSlice({\n  name: slice,\n  initialState: initialState[state],\n  reducers: this._generateReducers(),\n});\n```\n\nWe're doing this in the reducer factory's constructor to take advantage of our `slice` and `state` arguments. We also imported `initialState` from our state file and found the section we need using our `state` argument.\n\nThe `createSlice` function returns an object that contains the created reducer and actions, which we assign to our reducer factory instance like so:\n\n```javascript\nthis.reducer = reducerResult.reducer;\nthis.actions = reducerResult.actions;\n```\n\nFinally, we create our reducers in the private function, `_generateReducers()`.\n\n```javascript\n_generateReducers = () => {\n  return {\n    // get our list of items\n    requestGetItems: (state, action) => {\n      state.isLoading = true;\n    },\n    requestGetItemsSuccess: (state, action) => {\n      state.isLoading = false;\n      state.list = action.payload;\n    },\n    requestGetItemsError: (state, action) => {\n      state.isLoading = false;\n    },\n  };\n};\n```\n\nThis function returns an object populated with a series of reducer function properties.\n\nFor now, we're only creating three reducers that handle a GET mechanism, but you could expand this to handle updating, adding and deleting, and more. We have three because there are three states of dealing with our API: fetching in progress; fetch successfully completed; fetch error.\n\n### Editing state directly\n\nOne of the mantras you'll discover when using React and certainly Redux, is that **state is immutable** and that **state should never be edited directly**.\n\nAnd yet, in our reducer factory, we're directly setting state properties — `state.isLoading = false;` . Why is this?\n\nWell, behind the scenes, the Redux Starter Kit is kindly taking care of the hard work of mirroring state, updating this mirror, and assigning our app state to this new, updated version.\n\nWhat this means for us, is that instead of lengthy code where we have to carefully manipulate a copy of state (trust me, this get very cumbersome with nested objects and arrays), we just use our good old `=` to — seemingly — edit state directly with our changes.\n\n## 3, Create the data handler\n\nThe penultimate piece in the puzzle is to remove all of the Redux interactions and API handling into a new utility class, the data handler.\n\nOur new `dataHandler.js` looks like this:\n\n```javascript\nclass DataHandler {\n  constructor(dispatch, actions, baseUrl) {\n    this.dispatch = dispatch;\n    this.actions = actions;\n    this.baseUrl = baseUrl;\n  }\n\n  getAll = () => {\n    this.dispatch(this.actions.requestGetItems());\n\n    return fetch(this.baseUrl)\n      .then((response) => response.json())\n      .then((json) => this.dispatch(this.actions.requestGetItemsSuccess(json)));\n  };\n}\n\nexport default DataHandler;\n```\n\nThis deceptively simple class can reduce a ton of repetitive code from our app. We need to supply it with three arguments:\n\n- a `dispatch` function that will trigger our state actions\n- an `actions` object that is unique to the area of state we're dealing with\n- and a `baseUrl` that again, is likely to be unique to the area of current interest\n\nIt could be expanded for other CRUD operations, such as updating and deleting. For now, however, let's just deal with the common getting of items from an API.\n\nYou can see how we combine both dispatch methods to inform our app that we're starting a request (`requestGetItems`) and for handling our state update when we return with a list of users (`requestGetItemsSuccess`).\n\nThis neatly combines our state management calls with our data provisioning via an API into a nice, clean handler paradigm.\n\nThe one thing we've omitted here is dealing with errors from the API. That's where we'd do some app logging, inform the user about the error and dispatch our `requestGetItemsError` reducer.\n\n## 4, Refactor our App component\n\nFinally, to connect all the dots, we need to plumb our shiny data handler into our main App component.\n\nAs a refresher, here how it looked before:\n\n```javascript\nimport React from 'react';\n\nimport { connect } from 'react-redux';\nimport { getUsers, getUsersSuccess } from './actions';\n\nimport './styles.css';\n\nclass App extends React.Component {\n  handleLoadUsersClick = () => {\n    this.props.onLoadUsersClick();\n\n    // let's do our api call\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((json) => this.props.onLoadUsersComplete(json));\n  };\n\n  render() {\n    return (\n      \u003Cdiv className=\"App\">\n        \u003Ch1>React, Redux, and Data Handling\u003C/h1>\n        \u003Ch2>An example \u003C/h2>\n        \u003Cp>\n          Click the load users button below to start loading users from the api\n        \u003C/p>\n        \u003Cp>\n          \u003Cbutton onClick={this.handleLoadUsersClick}>Load users\u003C/button>\n        \u003C/p>\n        \u003Chr />\n        \u003Ch3>Users\u003C/h3>\n        {this.props.loading ? \u003Cp>loading...\u003C/p> : null}\n        {!this.props.loading && this.props.users ? (\n          \u003Cul>\n            {this.props.users.map((user) => (\n              \u003Cli key={user.id}>\n                \u003Cstrong>{user.name}\u003C/strong> | {user.email}\n              \u003C/li>\n            ))}\n          \u003C/ul>\n        ) : null}\n      \u003C/div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  loading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLoadUsersClick: () => {\n      dispatch(getUsers());\n    },\n    onLoadUsersComplete: (users) => {\n      dispatch(getUsersSuccess(users));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n```\n\nWe need to replace the `mapDispatchToProps` with our data handler, and the click handler `handleLoadUsersClick` method with a call to our new data handler.\n\nHere's the updated code:\n\n```javascript\n// ...other imports\n\nimport { actions } from './usersReducer';\nimport DataHandler from './dataHandler';\n\nclass App extends React.Component {\n  handleLoadUsersClick = () => {\n    this.props.dataHandler.getAll();\n  };\n\n  render() {\n    // ...render implementation\n  }\n}\n\n// ...mapStateToProps\n\nconst mapDispatchToProps = (dispatch) => ({\n  dataHandler: new DataHandler(\n    dispatch,\n    actions,\n    'https://jsonplaceholder.typicode.com/users'\n  ),\n});\n\n// ...rest of file\n```\n\nAt the top, we import our user actions to pass into the data handler class, and the data handler itself. We have to pass in specific item actions because, although the handler is generic, the data we want to fetch and process is definitely _not_.\n\nNext we can replace the entire `handleLoadUsersClick()` method with a single call to our data handler's `getAll()` function which takes care of fetching the users from an API and updating our state.\n\nTo round off the refactor, we replace the growing list of reducer actions we had previously within the `mapDispatchToProps` function, with a single call to create a new instance of the data handler. We pass in the dispatch function, our item-specific actions object, and a base API url for our data handler to call.\n\n## The final project in action\n\nAnd here, in all its finished, user-loading glory, is the Code Sandbox space.\n\n{% iframe\n  url=\"https://codesandbox.io/embed/redux-data-handler-example-2-mklek?fontsize=14&hidenavigation=1&theme=dark\"\n  label=\"Redux data handler - example 2\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Useful links\n\nHere's a list of useful links used throughout this article:\n\n- [Code Sandbox](https://codesandbox.io/s/redux-data-handler-example-2-mklek?fontsize=14&hidenavigation=1&theme=dark)\n- [React-Redux](https://react-redux.js.org/)\n- [Redux Starter Kit](https://redux-starter-kit.js.org)\n- [React and Redux, components, API's and data handlers, part one](/blog/2020-01-21-react-redux-components-apis-and-handler-utilities/)","src/content/blog/2020-01-27-react-redux-components-apis-and-handler-utilities-part-two.mdoc","abc6f76056b8a8c5","2020-01-27-react-redux-components-apis-and-handler-utilities-part-two.mdoc","2020-02-04-creating-unique-merged-arrays-using-javascripts-set-and-more",{"id":306,"data":308,"body":314,"filePath":315,"digest":316,"legacyId":317,"deferredRender":156},{"title":309,"description":310,"featured":156,"featuredimage":311,"date":312,"tags":313},"Creating unique, merged arrays using JavaScript's Set (and more)","Merging arrays in JavaScript isn't all that tricky. Getting unique values in merged arrays can be. We'll look at some different methods and approaches in JavaScript that create unique arrays, including the shiny Set object.","/img/merging-arrays-blog-post.png",["Date","2020-02-04T15:43:28.124Z"],[150,226,149],"![](/img/merging-arrays-blog-post.png)\n\nPicture the scene: you've got two (or more) similar arrays, each containing some overlapping data. How can you use JavaScript to merge the two into one single array that contains only _unique_ values?\n\nWell, as it turns out, there are quite a few ways...\n\nFor all the the sections below, we'll be using the following two array's that have a combination of different and identical numerical values:\n\n```javascript\nconst arr1 = [1, 2, 3, 4, 5, 6];\nconst arr2 = [1, 3, 4, 7, 8, 9];\n```\n\nWe'll be using the fancy arrow functions all over this article; if you [want to know more about arrow functions, then I have a lovely article on them here](/blog/how-to-use-arrow-functions-in-javascript-es6/).\n\n## What about `concat` or fancy spread syntax?\n\nSure, you can merge two (or more) arrays using the `concat()` method or the [shiny ES6/ES2015 spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\n```javascript\narr1.concat(arr2)\n// OR\n[...arr1, ...arr2] // this is functionally the same as concat\n\n// logging to the console, both the above will produce:\n// [1, 2, 3, 4, 5, 6, 1, 3, 4, 7, 8, 9]\n```\n\nBoth these methods are great: they're compact, efficient and do a really simple job in merging two or more arrays. However, they really just append one array to the end of the previous one.\n\nIf you really care about having a single array of _unique_ values, then we're going to have to try something else.\n\n## 1, The old fashioned, but reliable `forEach` loop\n\nAhh, nothing like the comfort of an old friend, the `forEach()` array method. As you can see from the [MDN web docs on forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) it's a simple loop over each of the items in an array. You pass it a function and do what you need to do.\n\nIt doesn't return a new array or alter the existing array's data, it just moves along from item to item in the array in question, doing whatever you need to in the callback function.\n\nTo use it to combine two arrays into a single, unique output, we can do the following:\n\n```javascript\nlet combinedArr = [];\n\narr1.forEach((value) => {\n  if (!arr2.includes(value)) {\n    combinedArr.push(value);\n  }\n});\n\ncombinedArr = combinedArr.concat(arr2);\n\n// outputs > [2, 5, 6, 1, 3, 4, 7, 8, 9]\n```\n\nThis is good. We've got the desired result of one single array, complete with a set of unique values.\n\nFor this example, we take the first array, `arr1` and loop through all the values, checking to see if each value is found in `arr2`. If they are unique, then we add them to our final array, `combinedArr`. Once the `forEach` is complete, we append the entire contents of `arr2` onto the end of `combinedArr` because we know that all the values in there will be unique.\n\nOn the plus side, `forEach` has a lot more compatibility with older browsers out of the box, without requiring a processor (like Babel) and it's compact enough if you're only looking to do something simple such as the above.\n\nThe downsides are is that it can grow to be a less elegant solution — especially for multiple arrays — and it doesn't offer any sort of ordering on the final array; maybe not a big deal, but if it matters for your needs, you might need to move on.\n\n## 2, The shinier `filter` approach\n\nAnother array method compatible with older browsers from the ES5/ECMAScript 5 specification, is the handy `filter()`. You can [read more on the MDN docs on the filter method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), but it works in a similar way to `forEach`, looping over each item in the array. However, this time, it performs a callback function that returns a true/false value to either keep an item in the final array, or remove it (i.e. filter it out).\n\nIt's also worth noting that whilst it doesn't alter the original array, it does return a new, filtered one.\n\nHere's how the previous example works by replacing the implementation with `filter`:\n\n```javascript\narr1.concat(arr2.filter((value) => !arr1.includes(value)));\n\n// outputs > [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nWe're performing a similar operation to the `forEach` one, but here, we're concatenating a filtered `arr2` onto `arr1`. During the filter, we remove any value from `arr2` that is present in `arr1` using the `includes` method.\n\nThe `filter` approach has the advantage of looking much neater with its terse syntax. It will also look a little clearer when repeating this approach for multiple arrays, but that too will start looking a little messy if you're doing a lot.\n\n## 3, Use `reduce` for something different\n\nIf you really want to get fancy, you can use `array.reduce()`. Looking at [the MDN docs on reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce), they do mention that it can be a more efficient approach than using multiple combinations of methods, such as `filter` and `map`.\n\nFor our purposes, however, we'll be using reduce like this:\n\n```javascript\nlet uniqueArr = arr1.concat(arr2).reduce((accumulator, currentValue) => {\n  if (!accumulator.includes(currentValue)) {\n    accumulator.push(currentValue);\n  }\n\n  return accumulator;\n}, []);\n\n// outputs > [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nWe have our concatenated starter arrays (`arr1` and `arr2`) and then we run `reduce` on them. Reduce accepts two arguments, a callback function and an initial value. The callback function accepts two arguments.\n\nHere are the arguments we're using and what they do:\n\n- Callback > accumulator - an array that ends up being an accumulation of our callback function's return statement(s).\n- Callback > current value - simply the current item in the array at the current position in the loop.\n- Reduce > Initial value - we pass in an empty array (`[]`) here so that the reducer will start at position 0 in our target array. If not supplied, it'll start at 1.\n\nThe `reduce` method can be a little cumbersome to get to grips with but once you get there, it's a powerful tool to have in your belt when it comes to manipulating arrays and certainly has a really useful place in specific applications. You can [read the MDN docs on reduce for more use cases](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce).\n\nAlthough it looks a little more ugly, it can be a very performant and efficient approach. It has the bonus of sorting our outputs too, which is nice.\n\nIt also has the super bonus of being able to work on a complete set. So, if you have multiple arrays to mush together, you can concatenate them all _first_ and then run `reduce` on the whole lot: nicer to look at and much more efficient in the long run.\n\n## 4, The super fancy `Set` method\n\nNow, if you're one of the shiny ES6/ECMA2015 types, then you can take advantage of the super fancy `Set` object. One more time, [referencing the MDN docs on Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), `Set` is an object that lets you store primitive types as a collection of values.\n\nIt offers a lot of similarities to the Array object, but the biggest advantage is that a Set may only contain _unique_ values! What's more, when creating a new `Set` it helpfully does the work for us by removing any duplicates — sweet!\n\nLet's take a look:\n\n```javascript\nconst mySet = new Set([...arr1, ...arr2]);\n\n// outputs > [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nNow, how clean and simple is that?! Especially when combined with the spread syntax to concatenate our two (or more) array's together.\n\nThis offers three huge advantages over the other methods:\n\n1. It offers a much cleaner, terser approach of creating merged arrays of unique values.\n2. It scales much better. You can see how we could easily add another handful of arrays into the constructor and the code would look just as neat.\n3. `Set` does the hard work for you and removes duplicates.\n\n**The biggest upside is that Set is blazing fast** and is my go-to method of combining arrays that need to be unique.\n\nThe downside, of course, is that `Set` is a newer language feature and, as such, isn't supported in older browsers unless you're inclined to use Babel or a polyfill. In addition, you will have to go the extra step and convert the result of a new `Set` into an array or otherwise iterable thing to be able to do more with it.\n\nThis isn't a huge burden, however, and can be achieved like this:\n\n```javascript\nconst newArr = Array.from(mySet);\n// OR\nconst newArr = [...mySet];\n```\n\n## A note on performance\n\nPeople like to get hung up on the performance of various JavaScript things. Indeed, if you have a quick nosey around Stack Overflow, you'll find a lot of 'um, actually...' types who love to explain why method a is faster or more efficient than method b and berate you for using the 'wrong' one.\n\nWith the examples above you can performance test them using the browser debug tools and you'll find that they all come in at around the same, i.e. somewhere in the 1-2ms range. However, this varies wildly because of things like browser operation caching and the sheer minute scale of the arrays we're merging here. Basically, they're too small to really make any sort of meaningful impact on performance times.\n\nHowever, when it comes to performance, there are lots of arguments around the application of a thing. For example, are you loading a public informational website, or are you offering an application with a captive audience, like an admin console?\n\nPerformance is important, no question, but don't be pressured into taking some sort of performance hunting axe to your code just because it'll save a fraction of a millisecond off a loading time.\n\nConsider your application's application, your users, and the clarity and maintainability of your code's ecosystem.\n\nThat said...\n\n### Let science do the talking!\n\nOk, ok, you want hard data. Well, here you go...\n\nTo test the performance of each of these methods on some large arrays, and check out the various times involved, I populated our original arrays (`arr1` and `arr2`) with 10,000 integer values each.\n\nAfter performing each of the listed operations, here are the times involved:\n\n- `forEach` > 102ms\n- `filter` > 124ms\n- `reduce` > 223ms\n- `Set` > 7 ms\n\nOur humble `forEach` is actually super quick compared to the clunkier `reduce` but none are quite as performant as the hero of the piece, `Set`.","src/content/blog/2020-02-04-creating-unique-merged-arrays-using-javascripts-set-and-more.mdoc","63c627111cf69feb","2020-02-04-creating-unique-merged-arrays-using-javascripts-set-and-more.mdoc","2020-02-20-creating-a-react-code-editor-and-syntax-highlighter",{"id":318,"data":320,"body":326,"filePath":327,"digest":328,"legacyId":329,"deferredRender":156},{"title":321,"description":322,"featured":156,"featuredimage":323,"date":324,"tags":325}," Creating a React code editor and syntax highlighter","Can you build a simple, lightweight code and syntax highlighter using Prism JS and React? Sure you can. I'll show how I did it in no time flat.","/img/react-syntax-highlighter-blog-post.png",["Date","2020-02-20T08:02:21.235Z"],[149,226,151],"![](/img/react-syntax-highlighter-blog-post.png)\n\nFuelled by a workplace conundrum about finding a reliable, efficient means to do a simple job, without needing to bring in the heavy hammer of another dependency, I recently created a React-based code syntax highlighter.\n\n## Surely there's something else already out there?\n\nYes, yes there is. There are a few code syntax highlighting components out there, but there are a few things to consider when shopping around for a third-party component:\n\n1. Adding an extra dependency adds more code weight and potential security problems into your project. If you can avoid this, you should.\n2. If the task is fairly small or not too onerous from an effort point of view then it's worth building an in-house solution where possible.\n3. The existing third-party offerings can be either quite out of date or paid options (and the paid options are usually expensive).\n\nUsing the ever useful [Prism JS](https://prismjs.com/) made by the helpful [Lea Verou](http://lea.verou.me/), we built a simple, to the point syntax highlighter that tracks its own state and dynamically swaps the language highlighting as needed.\n\nWithout further ado, here's how to do it\n\n## Building the React code syntax highlighter from scratch\n\nFirst things first, get a React project up and running and then let's install Prism JS\n\n```javascript\nnpm i prismjs\n\n// or\n\nyarn add prismjs\n```\n\nNext we need to add our CodeEditor component to the main App.js file to kick everything else off.\n\n```javascript\nimport React, { useState } from 'react';\n\n// Styles\nimport './styles.css';\n\n// Components\nimport CodeEditor from './CodeEditor';\n\nexport default function App() {\n  const [editorLanguage, setEditorLanguage] = useState('javascript');\n\n  return (\n    \u003Cdiv className=\"App\">\n      \u003Ch1>React code syntax hightlighter\u003C/h1>\n\n      \u003Cfieldset>\n        \u003Clegend>Choose language:\u003C/legend>\n        \u003Cinput\n          type=\"radio\"\n          id=\"javascript\"\n          name=\"language\"\n          value=\"javascript\"\n          checked={editorLanguage === 'javascript'}\n          onChange={() => setEditorLanguage('javascript')}\n        />\n        \u003Clabel htmlFor=\"javascript\">JavaScript\u003C/label>\n        \u003Cinput\n          type=\"radio\"\n          id=\"xml\"\n          name=\"language\"\n          value=\"markup\"\n          checked={editorLanguage === 'markup'}\n          onChange={() => setEditorLanguage('markup')}\n        />\n        \u003Clabel htmlFor=\"xml\">XML\u003C/label>\n        \u003Cinput\n          type=\"radio\"\n          id=\"css\"\n          name=\"language\"\n          value=\"css\"\n          checked={editorLanguage === 'css'}\n          onChange={() => setEditorLanguage('css')}\n        />\n        \u003Clabel htmlFor=\"css\">CSS\u003C/label>\n      \u003C/fieldset>\n\n      \u003CCodeEditor language={editorLanguage} />\n    \u003C/div>\n  );\n}\n```\n\nNothing too tricky going on here. We're adding `useState` from React to keep track of our language selection. Speaking of which, we've also got some simple radio button elements that update our language selection into state.\n\nWhen a user selects a different language, we update their choice in state and then pass this along to our CodeEditor component which will, eventually, call Prism to update the syntax highlighting.\n\nOne caveat to watch out for here is to make sure you add the `checked` property to the radio buttons and compare that radio button's language with the current state value. This relationship between state values and form fields [turns ordinary form fields into controlled components](https://reactjs.org/docs/forms.html#controlled-components).\n\nNow, although we haven't created the CodeEditor component yet (we'll do that next), we've finished off the main App component with all the necessary bits we need.\n\n### Creating the CodeEditor component\n\nNow we come to the main event, the syntax highlighter itself, the CodeEditor component.\n\nHere it is in full:\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport Prism from 'prismjs';\n\nconst CodeEditor = (props) => {\n  const [content, setContent] = useState(props.content);\n\n  const handleKeyDown = (evt) => {\n    let value = content,\n      selStartPos = evt.currentTarget.selectionStart;\n\n    console.log(evt.currentTarget);\n\n    // handle 4-space indent on\n    if (evt.key === 'Tab') {\n      value =\n        value.substring(0, selStartPos) +\n        '    ' +\n        value.substring(selStartPos, value.length);\n      evt.currentTarget.selectionStart = selStartPos + 3;\n      evt.currentTarget.selectionEnd = selStartPos + 4;\n      evt.preventDefault();\n\n      setContent(value);\n    }\n  };\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, [props.language, content]);\n\n  return (\n    \u003Cdiv className=\"code-edit-container\">\n      \u003Ctextarea\n        className=\"code-input\"\n        value={content}\n        onChange={(evt) => setContent(evt.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n      \u003Cpre className=\"code-output\">\n        \u003Ccode className={`language-${props.language}`}>{content}\u003C/code>\n      \u003C/pre>\n    \u003C/div>\n  );\n};\n\nexport default CodeEditor;\n```\n\nIt's not too big or complex of a component, but let's break it down.\n\nFirst, we import the `useEffect` and `useState` hooks from React as well as importing the PrismJS module.\n\nWe're using `useState` to track updates to our input, for which we're using a text area element. We also output the Prism-styled _input_ into a `pre` block as per Prism JS's documentation.\n\n```javascript\n\u003Cpre className=\"code-output\">\n  \u003Ccode className={`language-${props.language}`}>{content}\u003C/code>\n\u003C/pre>\n```\n\n`useEffect` replaces many React lifecycle functions, such as `componentDidMount()`. For our purposes, we're essentially watching changes to both the language passed in via props, and our input changes. If either happens, we fire Prism's `highlightAll` function to update the styling.\n\n```javascript\nuseEffect(() => {\n  Prism.highlightAll();\n}, [props.language, content]);\n```\n\nWhich is very neat and effective. One of the benefits of React Hooks!\n\nThe most interesting part is what happens on the `onKeyDown` event:\n\n```javascript\nconst handleKeyDown = (evt) => {\n  let value = content,\n    selStartPos = evt.currentTarget.selectionStart;\n\n  console.log(evt.currentTarget);\n\n  // handle 4-space indent on\n  if (evt.key === 'Tab') {\n    value =\n      value.substring(0, selStartPos) +\n      '    ' +\n      value.substring(selStartPos, value.length);\n    evt.currentTarget.selectionStart = selStartPos + 3;\n    evt.currentTarget.selectionEnd = selStartPos + 4;\n    evt.preventDefault();\n\n    setContent(value);\n  }\n};\n```\n\nIn a nutshell, whenever the user hits a key, we check to see if it's the tab key. If it is, we alter the current state value from our input and add in some spacing, updating the selection point of the cursor along the way. This almost makes it feel like a genuine code editor.\n\nAnd that's it. All done. But wait, things are looking a bit weird.\n\n![Screen capture of a weird styling issue in Code Sandbox from our React syntax highlighter](/img/screenshot-2020-02-19-codesandbox.png)\n\nLet's create some nice styles to join up the dots.\n\n### Adding the styles\n\nFor our styles, there's nothing too flash, but here they are:\n\n```css\n/** ---------------------------- */\n/** --- Code editor ------------ */\n/** ---------------------------- */\n.code-edit-container {\n  position: relative;\n  height: 500px;\n  border: 1px solid hsl(0, 0%, 60%);\n  background-color: hsl(212, 35%, 95%);\n  margin: 1em 0;\n}\n\n.code-input,\n.code-output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  padding: 1rem;\n  border: none;\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  font-size: 0.8rem;\n  background: transparent;\n  white-space: pre-wrap;\n  line-height: 1.5em;\n  word-wrap: break-word;\n  font-size: 1rem;\n}\n\n.code-input {\n  opacity: 1;\n  margin: 0;\n  color: hsl(0, 0%, 40%);\n  resize: none;\n}\n\n.code-output {\n  pointer-events: none;\n  z-index: 3;\n  margin: 0;\n  overflow-y: auto;\n}\n\ncode {\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: 0;\n  padding: 1rem;\n  display: block;\n  color: hsl(0, 0%, 40%);\n  font-size: 0.8rem;\n  font-family: 'PT Mono', monospace;\n}\n\n/* overrides */\n.code-edit-container :not(pre) > code[class*='language-'],\n.code-edit-container pre[class*='language-'] {\n  background: transparent;\n  margin: 0;\n}\n```\n\nThe main take away is that we create comparative text styling (font size, line-heights, etc.) between the text area input and the code output, and then layer the Prism-styled output _over_ the text area input.\n\nFinally, we have to add a few Prism overrides to just neaten everything up.\n\n## React code syntax highlighter in action\n\n{% iframe\n  url=\"https://codesandbox.io/embed/focused-forest-y9re6?fontsize=14&hidenavigation=1&theme=dark\"\n  label=\"focused-forest-y9re6\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Helpful links\n\nAnd that's it really. If you'd like to see it in action, there's a Code Sandbox below as well as some other helpful links.\n\n- [React forms and controlled components](https://reactjs.org/docs/forms.html#controlled-components)\n- [Prism JS for syntax highlighting](https://prismjs.com/)\n- [Code Sandbox example project to see the React highlighter in action](https://codesandbox.io/s/focused-forest-y9re6?fontsize=14&hidenavigation=1&theme=dark)","src/content/blog/2020-02-20-creating-a-react-code-editor-and-syntax-highlighter.mdoc","3dabbb487db6d221","2020-02-20-creating-a-react-code-editor-and-syntax-highlighter.mdoc","2020-04-02-funky-text-backgrounds-with-background-clip-css",{"id":330,"data":332,"body":339,"filePath":340,"digest":341,"legacyId":342,"deferredRender":156},{"title":333,"description":334,"featured":156,"featuredimage":335,"date":336,"tags":337},"Funky text backgrounds with background-clip CSS","Want to spice up your text-effects in CSS? Check out this quick tip on creating funky text backgrounds with the CSS background-clip property.","/img/css-background-clip-blog-post.png",["Date","2020-04-02T09:01:00.263Z"],[338,149,226,289],"CSS","![Blog header for the article on background-clip CSS property](/img/css-background-clip-blog-post.png)\n\nOnce of the best ways to learn new things is to see them in the wild, take an interest and give them a hack about, see what makes them tick. It's [how I got started in development](https://thefrontendpodcast.site/episodes/episode-1/) way back in the old days of MySpace; editing the CSS in your profile and changing things up.\n\nA while back, I came across this funky looking text effect on Apple's website, [in the iPhone HR section](https://web.archive.org/web/20190105152534/https://www.apple.com/uk/iphone-xr/) (it was a little while ago!).\n\n![example of background-clip property used by Apple on their website](/img/apple-bg-effect.png)\n\nHaving had a little dig around in the behind the scenes, you might be surprised to learn that it's really quite simple, taking advantage of the CSS 'background-clip' property.\n\nThe background-clip is a CSS property that determines whether an element's background is visible/shows underneath the content's border box, padding bounds, or box of the content itself. However, you can also restrict this to just the text, which is how we're going to achieve our final look in this article. You can [read more about background-clip and its uses](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) in the ever-helpful MDN documentation on background-clip.\n\nHere's a quick, paired back demo on how to achieve this really cool text effect for yourself.\n\n## Implementing the background-clip property on your text\n\nFirstly, fire up your favourite editor and create a new HTML page; I used CodePen and [there's a link to the completed demo](https://codepen.io/robkendal/pen/MWwRmMo) at the bottom of this article.\n\nHere's the simple code we need to get things looking almost like Apple's example:\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cp>...put whatever text you like in here\u003C/p>\n\u003C/div>\n```\n\nFor the complete demo, I used the excellent [Samuel L. Ipsum](https://slipsum.com/) generator for mine, you may want something a little more 'safe for work'.\n\nNext, our simple base styles:\n\n```css\nhtml {\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  background-color: black;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n.container {\n  max-width: 950px;\n  font-size: 64px;\n  font-weight: 600;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-image: url(https://images.unsplash.com/photo-1553356084-58ef4a67b2a7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=640&q=80);\n}\n```\n\nNothing too special here, just a few base styles on the document to give it a punchy look, like Apple's on the HTML, and for the `.container` class, we're just restricting the width and making the text bold and big.\n\nOh, and I found this [excellent background texture on Unsplash](https://unsplash.com/photos/8uZPynIu-rQ). It's a textural image created by Paweł Czerwiński.\n\n![Texture image from Unsplash comprising of pinks, purples and light blue swirls](/img/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg)\n\nNow, without the `background-clip` property, it looks a little weak and unreadable, like this:\n\n![Example of the unfinished text with the background applied](/img/texture-without-clip.png)\n\nSo, we need to add in the final property, `background-clip: text` to make the magic happen:\n\n```css\n/* The magic */\nbackground-clip: text;\n-webkit-background-clip: text;\ncolor: transparent;\n```\n\n**Note:** we need the `color: transparent;` part to make the background show through. Without it, all you'll have is white text that, whilst looking classy enough, doesn't achieve our desired effect.\n\n![Example of the finished text background effect using background-clip CSS property](/img/finished-background-clip.png)\n\n### Browser support for background-clip text\n\nSupport is pretty good actually with modern browsers happily clipping that text. However, in an unsurprising move, **Internet Explorer does not support this CSS property**. Fortunately, you can just have your text fall back to a solid colour which will work just fine.\n\n## Funky backgrounds for your text, as simple as that\n\nAnd there we have it. Simple, quick, but such a striking effect that can brighten up some otherwise dull text — just be mindful of what background you choose as it can have an impact on visual impairments and make some text hard to read.\n\n{% iframe\n  url=\"https://codepen.io/robkendal/embed/MWwRmMo?height=550&theme-id=dark&default-tab=result\"\n  label=\"Textured Transparent Text Effect - CSS\"\n  style=\"width:100%; height:550px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Helpful links\n\nHere are some supporting links used in the article:\n\n- Unsplash background image I used for the text effect\n- [Background-clip CSS property on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip)\n- Apple's use of this property [on their iPhone HR webpage](https://web.archive.org/web/20190105152534/https://www.apple.com/uk/iphone-xr/) (archived)\n- The final [demo on my CodePen](https://codepen.io/robkendal/pen/MWwRmMo)\n- [The Front End podcast](https://thefrontendpodcast.site) (because who else is going to shamelessly promote my podcast about all things frontend?)","src/content/blog/2020-04-02-funky-text-backgrounds-with-background-clip-css.mdoc","f458048fbc6199a2","2020-04-02-funky-text-backgrounds-with-background-clip-css.mdoc","2020-04-17-saving-text-to-client-side-file-using-vanilla-js",{"id":343,"data":345,"body":351,"filePath":352,"digest":353,"legacyId":354,"deferredRender":156},{"title":346,"description":347,"featured":156,"featuredimage":348,"date":349,"tags":350},"Saving text to a client-side file using vanilla JS","Want to save files to the client using JavaScript? Let's look at how to save a file client-side using s simple handful of vanilla JavaScript","/img/saving-to-client-side-files-blog-post.png",["Date","2020-04-17T14:30:00.263Z"],[226,150],"![](/img/saving-to-client-side-files-blog-post.png)\n\nAnother one of those 'born of an issue I stumbled across' sort of situations, I came across the need to save some data entered into a form (some configuration details into a textarea to be specific).\n\nSure, there are lots of means available to save something to the local machine of a user, but they tend to involve either less-than-ideal solutions such as a browser's local storage, a cookie, or even using the [HTML canvas blob](https://html.spec.whatwg.org/multipage/canvas.html).\n\n## The need for simple solutions\n\nThere is a great article (if not a little out of date by now) by Eli Grey on [saving generated files on the client side](https://eligrey.com/blog/saving-generated-files-on-the-client-side/) that also discusses his excellent utility [FileSaver.js](https://github.com/eligrey/FileSaver.js), which utilises the very same canvas blob functions mentioned above.\n\nHowever, for me, it seemed a little overblown to bring in _another_ utility dependency to perform a really simple task of creating a small text file and stashing it on the client's machine.\n\n## A vanilla JS solution to client-side file saving\n\nSo here we are, a really simple way to create and save a file on the client side, from the browser, based on some information saved into a textarea.\n\nFirst, the HTML...\n\n```html\n\u003Cfieldset>\n  \u003Clegend>Enter some config details\u003C/legend>\n  \u003Ctextarea>\u003C/textarea>\n  \u003Cbutton id=\"btnSave\">save config\u003C/button>\n\u003C/fieldset>\n```\n\nWhich renders the following no-frills elements in the browser (styling not shown for simplicity):\n\n![Screenshot of the textarea and save button ready to save the file](/img/config-file-save.jpg)\n\nNow, for the JavaScript:\n\n```javascript\nconst downloadToFile = (content, filename, contentType) => {\n  const a = document.createElement('a');\n  const file = new Blob([content], { type: contentType });\n\n  a.href = URL.createObjectURL(file);\n  a.download = filename;\n  a.click();\n\n  URL.revokeObjectURL(a.href);\n};\n\ndocument.querySelector('#btnSave').addEventListener('click', () => {\n  const textArea = document.querySelector('textarea');\n\n  downloadToFile(textArea.value, 'my-new-file.txt', 'text/plain');\n});\n```\n\nWhat we've got going on here, is a plain, browser-native querySelector call that grabs our button with the id `btnSave`, attaches an event listener that fires on click — nothing too fancy here.\n\nWhere the magic (well, really simple magic) is in the 'downloadToFile' method above. We create a new anchor element and a new [Blob object](https://developer.mozilla.org/en-US/docs/Web/API/Blob) using the content and contentType arguments we passed in.\n\nNext, we set the `href` element to the result of the `URL.createObjectURL()` method that creates a DOMString containing a URL that represents the file object we just made.\n\nFinally, we trigger our new anchor element's click event, which kicks off the download process in the browser, before cleaning things up using the `URL.revokeObjectURL()` method.\n\n## See it in action\n\nYou can [view the code in action](https://codepen.io/robkendal/pen/dyYMqMP) in my CodePen, or below in a handy iFrame.\n\n{% iframe\n  url=\"https://codepen.io/robkendal/embed/dyYMqMP?height=265&theme-id=dark&default-tab=result\"\n  label=\"Saving files with JavaScript\"\n  style=\"width:100%; height:650px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Wrapping things up\n\nAnd that's it. Nice and simple, gets the job done. Sometimes, the most straightforward solution is the best one if you need something lightweight that just works.\n\nYou might also like these articles that use plain old JS and CSS:\n\n- [Funky text backgrounds with background-clip CSS](/blog/2020-04-02-funky-text-backgrounds-with-background-clip-css/)\n- [Creating unique, merged arrays using JavaScript's Set (and more)](/blog/2020-02-04-creating-unique-merged-arrays-using-javascripts-set-and-more/)\n- [Configure Parcel JS and Babel to use JavaScript proposal class properties](/blog/2019-05-13-configure-parcel-js-and-babel-to-use-javascript-proposal-class-properties/)\n- [How to use arrow functions in JavaScript ES6](/blog/how-to-use-arrow-functions-in-javascript-es6/)","src/content/blog/2020-04-17-saving-text-to-client-side-file-using-vanilla-js.mdoc","f21c942c8416f09c","2020-04-17-saving-text-to-client-side-file-using-vanilla-js.mdoc","2020-04-07-replacing-reacts-redux-library-with-usereducer-hook",{"id":355,"data":357,"body":363,"filePath":364,"digest":365,"legacyId":366,"deferredRender":156},{"title":358,"description":359,"featured":156,"featuredimage":360,"date":361,"tags":362},"Replacing React's Redux library with the useReducer Hook","Redux can be a tricky concept to get. By using React's useReducer Hook we can replace complex Redux configurations and still use state management.","/img/useReducer-blog-post.png",["Date","2020-04-07T08:01:00.263Z"],[151,149,226,150],"![Blog header for the article on replacing Redux libraries with the useReducer Hook](/img/useReducer-blog-post.png)\n\nI've been moving over to using React Hooks in my development of late. They offer a much simpler, terser approach to development and are super powerful. They do require a certain mind-shift towards [thinking in React Hooks](https://wattenberger.com/blog/react-hooks) (read that article by Amelia Wattenberger, it's so well written and helpful!), but they really push your development on.\n\nAnyway, up until now, I had been like a lot of developers who wanted to employ a centralised state management system; I had been using the [Redux library](https://redux.js.org/), specifically [React Redux](https://react-redux.js.org/introduction/why-use-react-redux) and the [Redux Toolkit](https://redux-toolkit.js.org/) (which just simplifies things a little I feel).\n\nHowever, the React core team has [introduced the `useReducer` Hook](https://reactjs.org/docs/hooks-reference.html#usereducer) and I've found it a little nicer to use. It doesn't require additional libraries or tooling, and I feel like it might just take some of the edge off learning the Redux pattern(s) for beginners. It certainly removes a lot of the configuration 'fun' that accompanies a typical Redux setup.\n\nSo let's start using it!\n\n## Contents\n\nThis is a long article, so if you want to skip around then you'll find this outline handy:\n\n- [Redux primer](#redux-primer) a gentle introduction to Redux for beginners\n  - [Reducers](#reducers)\n  - [Action creators](#action-creators)\n  - [Dispatchers](#dispatch-methods)\n- [Redux with useReducer](#redux-with-usereducer)\n  - [Creating the reducer](#creating-reducers)\n- [Wiring up the App component](#wiring-the-app)\n  - [Faking API calls](#fake-api-calls)\n  - [Rendering components](#rendering-components)\n- [Displaying our ShoppingList](#displaying-the-list)\n  - [Introducing React's Context](#introducing-context)\n  - [Dispatching updates to state](#dispatch-updates)\n- [Adding new items](#add-new-items)\n- [Demo and working code in action](#demo)\n- [Further reading and resources](#further-reading)\n\n## A Redux primer\n\n\u003Ca name=\"redux-primer\">\u003C/a>\n\n**(If you're already a Redux king or queen and just want to start using the useReducer Hook, you can** [**skip to the tutorial part now**](#redux-with-usereducer)**)**\n\nI mentor some junior and aspiring developers and at some point they all land on the Redux methodology for managing their state. It's easy to see why: it's a very common approach to solving application state management in complex apps; let's face it, most commercial apps qualify as 'complex' and you are always better off learning things that are geared to helping you in a realistic role.\n\nHowever, the concepts involved in Redux are where a lot of beginners come unstuck. I think it's a combination of having to understand several moving parts that wire together to make a Redux-y state change, as well as some unfamiliar (and potentially confusing) terminology.\n\nHopefully, this little interlude can help get you familiar with the basics before we plough on with implementing the useReducer Hook for our own Redux stuff.\n\n### The main players in Redux\n\nSo, there are four main players within the Redux pattern:\n\n1. Application state\n2. Dispatchers\n3. Action creators\n4. Reducers\n\n### Application state\n\nThe most straightforward of the bunch, this is simply a centralised object with various properties that represent the 'state' of our application at a given moment. It can contain anything your app needs, but typically it could contain collections of items, settings, preferences and so on.\n\nIn more complex applications you might find that state is broken into small sections (often referred to as 'slices' in Redux land) which are then stitched together when the application is served.\n\n### Reducers\n\n\u003Ca name=\"reducers\">\u003C/a>\n\nReducers are functions that modify our state.\n\nThey usually accept an output of an **action creator** and use this to determine what _action_ to take on our state.\n\nYou might see something like this:\n\n```javascript\nfunction mySuperReducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    default:\n      return state;\n  }\n}\n```\n\nFor some state changes, however, we also need to modify our state based on a passed in value. For this, we'll use an action that contains a **payload**.\n\nA **payload** could be anything: a value, string, integer, array, object, etc. It's passed in with the action object into the reducer and is used to modify state.\n\nIt might look like this:\n\n```javascript\nfunction mySuperReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_USER':\n      return [...state, action.payload.newUser];\n    default:\n      return state;\n  }\n}\n```\n\n### Action creators\n\n\u003Ca name=\"action-creators\">\u003C/a>\n\nAction creators are functions that create actions. That's not very helpful though.\n\nWhat they are, are quite simple functions that return an object. This object usually contains two things:\n\n1. The type of action you want to take (often a string constant)\n2. The value you want to take action with (see above example in the reducers section)\n\nWhen you pass an action (the result of an action creator) into a reducer, it is the action type that determines what will happen to state, and (if required/available) what _value_ will be used as part of the state changes.\n\nWhat they look like varies from use to use, but in a relatively standard Redux setup, they'll look either like this:\n\n```javascript\nconst ADD_USER = 'ADD USER; // our string constant part\n\nfunction addUser(newUser) {\n    return { type: ADD_USER, newUser };\n}\n```\n\nor like this if you're using one of the Redux library's handy helpers:\n\n```javascript\nconst addUser = createAction('ADD USER');\n```\n\n### Dispatchers\n\n\u003Ca name=\"dispatch-methods\">\u003C/a>\n\nThe final piece of the puzzle, dispatchers. Dispatchers are the gophers between actions and reducers. Essentially, dispatchers are functions that trigger/kick-off all state updates.\n\nYou call a dispatch function, passing in an action. The dispatch function takes the action to the reducer and the reducer modifies the state.\n\nUsing a dispatcher might look like this:\n\n```javascript\n// Here's our action\nfunction addUser(newUser) {\n  return { type: 'ADD_USER', newUser };\n}\n\n// here's a new user object\nconst user = {\n  name: 'rob kendal',\n  age: 380,\n  dob: 01 / 01 / 1901,\n};\n\n// and here's the dispatch to trigger things\ndispatch(addUser(user));\n```\n\n### Putting it all together\n\nThere is [a good explanation of the flow of data and the various interaction points](https://redux.js.org/basics/data-flow) in a Redux update cycle available on the Redux JS website. In the meantime, here's a handy diagram that should help cement the concepts at a high level.\n\n![Diagram showing the data flow and connectivity between various Redux components](/img/redux-data-flow.png)\n\n### Further reading\n\nIf you need further help on this, check out the various [Redux JS documentation sites](https://redux.js.org/) and I have a couple of articles on using Redux with a data handler:\n\n1. [React and Redux components - part one](/blog/2020-01-21-react-redux-components-apis-and-handler-utilities/)\n2. [React and Redux components with data handlers - part two](/blog/2020-01-27-react-redux-components-apis-and-handler-utilities-part-two/)\n\n[![banner highlighting the beginner guide to React](/img/react-course-cta.png \"Beginner's Guide to Real-World React\")](https://www.newline.co/courses/beginners-guide-to-real-world-react/ \"Learn real-life React with The Beginner's Guide\")\n\n## Redux with React and useReducer\n\n\u003Ca name=\"redux-with-usereducer\">\u003C/a>\n\nOK, to the main meat and potatoes of the article, using the useReducer Hook to manage your application state in React.\n\nWe're going to build a small shopping list app that accepts some simple data via input elements and uses the Redux pattern to update a global state-held list.\n\nThe tools we'll be using include:\n\n- `useReducer` - this is the [React Hook](https://reactjs.org/docs/hooks-reference.html#usereducer) that is billed as an alternative to `useState`.\n- `useContext` - the [useContext Hook](https://reactjs.org/docs/hooks-reference.html#usecontext) will allow us to grab the current context value from the specific context we're referencing. In our case, we'll be passing down both a dispatch function to allow for state updates and the state object itself to make use of its contents.\n- Creating a reducer function to update our state\n- Making an action creator function that just simplifies the building of an action\n- Creating an initial state with some predefined items on our list\n\nSo let's get to it; first up, we'll create our initial state\n\n### Initial state\n\nFirstly, we'll need a place to store our app's data, our initial state. We'll create a new file `initialstate.js` and load it up.\n\n```javascript\nexport default {\n  loadingItems: false, // our app uses this to determine if we're loading our list\n  shoppingList: [\n    // our initial list of items\n    {\n      id: 1,\n      name: 'Bananas',\n      description: 'A bunch of 5 bananas, fresh from the plant',\n      price: 1.83,\n    },\n    {\n      id: 2,\n      name: 'Soup',\n      description: 'A can of beef broth',\n      price: 0.54,\n    },\n  ],\n};\n```\n\nNothing too clever here, just a plain old JavaScript object with a couple of properties that are fairly self-explanatory;\n\n### Creating the reducer\n\n\u003Ca name=\"creating-reducers\">\u003C/a>\n\nNext, we'll create our reducer file, `reducer.js`. It will contain a few items when we're done:\n\n1. **A React context**, this will contain our dispatch method and our application state. It will be wrapped around our React app to be referenced in child components further down the tree.\n2. **Action types**: this is just be a simple JS object with string constants. We'll use these to prevent ambiguity or errors when triggering dispatches.\n3. **A reducer function**, the main star of the show that will ultimately affect change in our app's state.\n\nOur new file looks like this:\n\n```javascript\n// We need React in scope to create our context objects\nimport React from 'react';\n\n// Context\n// will be used to pass down the dispatch method and our\n// application state via the Context Provider and consumed\n// in child components using the useContext Hook\nexport const StoreContext = React.createContext(null);\n\n// Action constants\n// we will import this object and use the various properties\n// in child objects when calling the dispatch method\nexport const actions = {\n  GET_ITEMS: 'get items',\n  GET_ITEMS_SUCCESS: 'get items success',\n  ADD_ITEM: 'add item',\n  REMOVE_ITEM: 'remove item',\n};\n\n// This is a simple helper function that will take a type\n// (from the constants above) and a payload, which will be the\n// value which needs to be affected in state it returns\n// a simple object that will be passed to our dispatch function\nexport const createAction = (type, payload) => {\n  return {\n    type,\n    payload,\n  };\n};\n\n// Reducer\n// the function that accepts our app state, and the action to\n// take upon it, which then carries out that action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.GET_ITEMS:\n      return {\n        ...state,\n        loadingItems: true,\n      };\n    case actions.GET_ITEMS_SUCCESS:\n      return {\n        ...state,\n        loadingItems: false,\n      };\n    case actions.ADD_ITEM:\n      const nextId = Math.max.apply(\n        null,\n        state.shoppingList.map((item) => item.id)\n      );\n      const newItem = {\n        ...action.payload,\n        id: nextId + 1,\n      };\n      return {\n        ...state,\n        shoppingList: [...state.shoppingList, newItem],\n      };\n    case actions.REMOVE_ITEM:\n      return {\n        ...state,\n        shoppingList: state.shoppingList.filter(\n          (item) => item.id !== action.payload\n        ),\n      };\n    default:\n      return state;\n  }\n};\n```\n\nIn a more complex app, it may make sense to split these functions out, but for smaller apps and our example, it makes sense to me to keep them contained within one reducer file. You could name it something that encompasses the more holistic nature of the elements within it, but for now, it's fine.\n\nThe main thing to understand is that each part in here is related and will join together throughout our app to make changes to our state.\n\nThe reducer function is the most interesting part and you can see that it accepts our current state (this is taken care of by React's `useReducer` function that you will see later on) and the action we want to take against the state.\n\nBased on the supplied action's type, the reducer determines which action we're talking about and then does some simple state mutation based on what that action type may be.\n\nFor example, if we pass the action type 'REMOVE_ITEM' (just a string constant), the reducer returns a new version of state with the 'shoppingList' property where the previous shopping list has been filtered to remove the item that matches the action's payload (which will be the item's id value).\n\n## Wiring up the App component with `useReducer`\n\n\u003Ca name=\"wiring-the-app\">\u003C/a>\n\nSo we've got a reducer (and it's other moving parts) and some state for the reducer to act upon. Now we need to wire this up into our App.\n\nFirst, we'll import some important items at the top of the file:\n\n```javascript\nimport React, { useReducer, useEffect } from 'react';\n\n// Styles\nimport './styles.css';\n\n// Data\nimport initialState from './initialstate';\nimport { reducer, StoreContext, actions } from './reducer';\n\n// Components\nimport AddItem from './components/AddItem';\nimport ShoppingList from './components/ShoppingList';\n```\n\nWe'll get to useReducer and useEffect in a minute. The important bits of this so far are that we're importing our app's initial state, as well as most items from the `/reducer.js` file.\n\nNext, we'll define our main export and proceed to fill it as we go.\n\n```javascript\nexport default (props) => {\n  return \u003Cdiv>The app has landed\u003C/div>;\n};\n```\n\nFrom here, we'll finally use our useReducer Hook:\n\n```javascript\nexport default props => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n    // simulate loading of items from an API\n    dispatch({\n        type: actions.GET_ITEMS\n    });\n\n    setTimeout(() => {\n        dispatch({\n        type: actions.GET_ITEMS_SUCCESS\n        });\n    }, 2000);\n    }, []);\n\n    return (\n        ...\n    );\n};\n```\n\nThe useReducer Hook is a really simple function in essence. It returns an array, `[state, dispatch]` which contains our app's state, and the dispatch function we will use to update it.\n\nWe're also using the useEffect Hook with an empty array, which means it will only fire once, **not on every render**.\n\nThe useEffect Hook here is not at all necessary, but I've used it to mimic a realistic scenario whereby an app would load and then go off and fetch some data from an API.\n\n### Faking the API call\n\n\u003Ca name=\"fake-api-calls\">\u003C/a>\n\nIn a real app, you'll need to interact with an API and you'll most likely want to show some sort of loading message whilst you wait for data back. We're not using an API and our data is miniscule by comparison, but we can fake the _effects_ of an API using a `setTimeout` callback.\n\nIn the useEffect Hook, we actually use the dispatch method for the first time. We pass it a type of 'GET_ITEMS' which is a string property on our imported actions constants object (`actions`) from the top of our App component.\n\nYou can see in our `reducer.js` file what affect this has on state:\n\n```javascript\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.GET_ITEMS:\n      return {\n        ...state,\n        loadingItems: true,\n      };\n    // ... rest of reducer\n  }\n};\n```\n\nWe simply set the 'loadingItems' flag to true, which means in our App component, we'll display a loading element.\n\n### Rendering the components\n\n\u003Ca name=\"rendering-components\">\u003C/a>\n\nFinally, we need to wire up the app so that it actually renders something useful. We'll do that here:\n\n```javascript\nexport default (props) => {\n  // ...unchanged\n\n  return (\n    \u003CStoreContext.Provider value={{ dispatch, state }}>\n      \u003Ch1>Redux fun with shopping lists\u003C/h1>\n      \u003Chr />\n      {state.loadingItems && \u003Cdiv className=\"loading\">...loading\u003C/div>}\n      {!state.loadingItems && (\n        \u003Cdiv className=\"columns\">\n          \u003Cdiv className=\"column\">\n            \u003Ch2>Add a new item\u003C/h2>\n            \u003CAddItem />\n          \u003C/div>\n          \u003Cdiv className=\"column\">\n            \u003Ch2>Shopping list\u003C/h2>\n            \u003CShoppingList />\n          \u003C/div>\n        \u003C/div>\n      )}\n    \u003C/StoreContext.Provider>\n  );\n};\n```\n\nThe main take away here is the context provider that we use to wrap the main App component in.\n\nThe line, `\u003CStoreContext.Provider value={{ dispatch, state }}>` allows us to pass down the `dispatch` function and store `state` to child components.\n\nThis is a key part of the process as they allow us to access `dispatch` and `state` from child components. You can [read more about React's Context on the official documentation](https://reactjs.org/docs/context.html).\n\n### Finishing off the App component\n\nEverything else is pretty much standard React stuff. We check to see if the `loadingItems` property/flag is set to 'true' and either display a loading element, or our AddItem and ShoppingList components.\n\nHere's our app's entry point in complete, the App component:\n\n```javascript\nimport React, { useReducer, useEffect } from 'react';\n\n// Styles\nimport './styles.css';\n\n// Data\nimport initialState from './initialstate';\nimport { reducer, StoreContext, actions } from './reducer';\n\n// Components\nimport AddItem from './components/AddItem';\nimport ShoppingList from './components/ShoppingList';\n\nexport default (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    // simulate loading of items from an API\n    dispatch({\n      type: actions.GET_ITEMS,\n    });\n\n    setTimeout(() => {\n      dispatch({\n        type: actions.GET_ITEMS_SUCCESS,\n      });\n    }, 2000);\n  }, []);\n\n  return (\n    \u003CStoreContext.Provider value={{ dispatch, state }}>\n      \u003Ch1>Redux fun with shopping lists\u003C/h1>\n      \u003Chr />\n      {state.loadingItems && \u003Cdiv className=\"loading\">...loading\u003C/div>}\n      {!state.loadingItems && (\n        \u003Cdiv className=\"columns\">\n          \u003Cdiv className=\"column\">\n            \u003Ch2>Add a new item\u003C/h2>\n            \u003CAddItem />\n          \u003C/div>\n          \u003Cdiv className=\"column\">\n            \u003Ch2>Shopping list\u003C/h2>\n            \u003CShoppingList />\n          \u003C/div>\n        \u003C/div>\n      )}\n    \u003C/StoreContext.Provider>\n  );\n};\n```\n\n## Displaying our list in the ShoppingList component\n\n\u003Ca name=\"displaying-the-list\">\u003C/a>\n\nNext, we'll dig into the ShoppingList component. At the top of the file, we'll see a familiar set of imports:\n\n```javascript\nimport React, { useContext } from 'react';\n\n// State\nimport { StoreContext, actions, createAction } from '../reducer';\n```\n\nNext, we'll define the main output for this component:\n\n```javascript\nexport default (props) => {\n  const store = useContext(StoreContext);\n  const state = store.state;\n  const dispatch = store.dispatch;\n\n  const handleRemoveItem = (id) => {\n    dispatch(createAction(actions.REMOVE_ITEM, id));\n  };\n\n  return (\n    \u003C>\n      {!state.shoppingList && \u003Cp>no items in list\u003C/p>}\n      {state.shoppingList && (\n        \u003Ctable>\n          \u003Cthead>\n            \u003Ctr>\n              \u003Cth>Name\u003C/th>\n              \u003Cth>Description\u003C/th>\n              \u003Cth>Price\u003C/th>\n              \u003Cth>Actions\u003C/th>\n            \u003C/tr>\n          \u003C/thead>\n          \u003Ctbody>\n            {state.shoppingList &&\n              state.shoppingList.map((item) => (\n                \u003Ctr key={item.id}>\n                  \u003Ctd>{item.name}\u003C/td>\n                  \u003Ctd>{item.description}\u003C/td>\n                  \u003Ctd>£{item.price}\u003C/td>\n                  \u003Ctd>\n                    \u003Cbutton onClick={() => handleRemoveItem(item.id)}>\n                      remove\n                    \u003C/button>\n                  \u003C/td>\n                \u003C/tr>\n              ))}\n          \u003C/tbody>\n        \u003C/table>\n      )}\n    \u003C/>\n  );\n};\n```\n\nThe main return of the component doesn't have anything too interesting beyond standard React stuff. The interesting things, however, are the 'const' definitions and the `handleRemoteItem()` method.\n\n### Wiring up context in the ShoppingList component\n\n\u003Ca name=\"introducing-context\">\u003C/a>\n\nWe know from our App component that we're already passing down the Redux dispatch method and our application state, but how do we access them?\n\nSimple: with the `useContext` Hook...\n\n```javascript\nconst store = useContext(StoreContext);\nconst state = store.state;\nconst dispatch = store.dispatch;\n```\n\nThat's all there is to it. We can now use `state` to access various properties on our global application state, such as `shoppingList`, which we actually use to display our table.\n\nSimilarly, we use `dispatch` to trigger state changes; in our case to remove items from our list.\n\n### Dispatching updates to our shopping list\n\n\u003Ca name=\"dispatch-updates\">\u003C/a>\n\nWhilst you could inline the following directly into the button element (and I normally would for brevity), I think it's a little clearer for learning to abstract the 'remove' button's click handler into its own variable.\n\n```javascript\nconst handleRemoveItem = (id) => {\n  dispatch(createAction(actions.REMOVE_ITEM, id));\n};\n```\n\nAgain, quite a simple approach, but we call the dispatch function, passing in the result of the createAction function. The createAction function accepts a 'type' and a value, referred to as a 'payload'.\n\nIt's worth noting that the above is functionally equivalent to the following:\n\n```javascript\nconst handleRemoveItem = (id) => {\n  dispatch({ type: 'remove item', payload: id });\n};\n```\n\nIt just looks a bit neater in the first example, and leaves less room for error(s).\n\nAgain, you can see that this links through to our reducer file like so:\n\n```javascript\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // ...rest of reducer\n    case actions.REMOVE_ITEM:\n      return {\n        ...state,\n        shoppingList: state.shoppingList.filter(\n          (item) => item.id !== action.payload\n        ),\n      };\n  }\n};\n```\n\nWe employ a straightforward `Array.filter()` on the state's shoppingList property that just skips over the item with the id value that we've passed in, that we want to remove.\n\n## Adding new items with the AddItem component\n\n\u003Ca name=\"add-new-items\">\u003C/a>\n\nFinally, we need to be able to add an item to our list to complete the circle of CRUD (almost, we're not doing updates...).\n\nBy now, things should start looking familiar, so we'll take a look at the entire AddItem component as a whole and walk through the finer points:\n\n```javascript\nimport React, { useContext, useState } from 'react';\n\n// State\nimport { StoreContext, actions, createAction } from '../reducer';\n\nexport default (props) => {\n  const _defaultFields = {\n    name: '',\n    description: '',\n    price: '',\n  };\n  const store = useContext(StoreContext);\n  const dispatch = store.dispatch;\n  const [fields, setFields] = useState({ ..._defaultFields });\n\n  const handleInputChange = (evt) => {\n    setFields({\n      ...fields,\n      [evt.target.id]: evt.target.value,\n    });\n  };\n\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    dispatch(createAction(actions.ADD_ITEM, fields));\n    setFields(_defaultFields);\n  };\n\n  return (\n    \u003Cform onSubmit={handleFormSubmit}>\n      \u003Clabel htmlFor=\"name\">Name\u003C/label>\n      \u003Cinput\n        id=\"name\"\n        type=\"text\"\n        value={fields.name}\n        onChange={handleInputChange}\n      />\n      \u003Clabel htmlFor=\"description\">Description\u003C/label>\n      \u003Cinput\n        id=\"description\"\n        type=\"text\"\n        value={fields.description}\n        onChange={handleInputChange}\n      />\n      \u003Clabel htmlFor=\"price\">Price\u003C/label>\n      \u003Cinput\n        id=\"price\"\n        type=\"text\"\n        value={fields.price}\n        onChange={handleInputChange}\n      />\n      \u003Cbutton type=\"submit\">Add item\u003C/button>\n    \u003C/form>\n  );\n};\n```\n\nRight at the top, we've got our React and state imports.\n\nNext, in our main output, we have a default state object, `_defaultFields` that we're using to reset the fields in local state when we've finished adding a new item.\n\nWe consume the dispatch function using the `store` variable which consumes the `useContext` Hook so we can pass a new item into our shopping list. **Notice that we're not using the state context, however.** We don't need to use anything from our application's state, so there's no need to grab it and assign it to a variable.\n\nMost everything else is pretty standard React form field handling [using controlled components](https://reactjs.org/docs/forms.html#controlled-components) that is beyond the scope of this article.\n\nWhat we're interested in, however, happens in the `handleFormSubmit()` method:\n\n```javascript\nconst handleFormSubmit = (evt) => {\n  evt.preventDefault();\n  dispatch(createAction(actions.ADD_ITEM, fields));\n  setFields(_defaultFields);\n};\n```\n\nFirstly, we call the synthetic event's `preventDefault()` method to prevent the page from refreshing.\n\nNext, we call our familiar dispatch method, passing in the action 'ADD_ITEM' and the fields object from state which is a collection of any values we've made into the form's fields.\n\nWhat happens in our reducer looks like this:\n\n```javascript\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // ...rest of reducer\n    case actions.ADD_ITEM:\n      const nextId = Math.max.apply(\n        null,\n        state.shoppingList.map((item) => item.id)\n      );\n      const newItem = {\n        ...action.payload,\n        id: nextId + 1,\n      };\n      return {\n        ...state,\n        shoppingList: [...state.shoppingList, newItem],\n      };\n    // ...rest of reducer\n  }\n};\n```\n\nThis is arguably the most complex part of our reducer, but it's easy to follow:\n\n- We work out the current highest id value in our shopping list items and increment it by one (not recommended in real life!);\n- We add the id to a new item object;\n- We update the state's shoppingList property by copying the array to a new array, adding in the new item object.\n\nFinally, we clear out any saved fields/input data by replacing local state with the `_defaultFields` object.\n\n## Putting it all together\n\n\u003Ca name=\"demo\">\u003C/a>\n\nYou can see the finished app and play about with it below, and you can [view it online in the CodeSandbox environment](https://codesandbox.io/s/redux-with-usereducer-9tfko).\n\n{% iframe\n    url=\"https://codesandbox.io/embed/redux-with-usereducer-9tfko?fontsize=14&hidenavigation=1&theme=dark\"\n    label=\"redux-with-usereducer\"\n    style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Caveats, gotchas and things to bear in mind\n\nThis article covers the basics of using the useReducer Hook in conjunction with React's Context mechanism to both update and access your application's state. It can be used instead of the standard Redux library's approach, and it certainly requires no additional setup or configuration, which is handy (because there's a lot of that in the traditional Redux world).\n\nHowever, this particular approach I've used may not suit you and your situation. It probably won't scale that well 'as-is' and could benefit from some smoothing out in terms of using this exact approach for a full-scale application. For example, you may wish to split your state into smaller parts for different areas of your application, which is great, but you can see how you'll need to work on that with from we've done here.\n\nThere is always more than one way to approach a problem and I think it's worth knowing your options. This article helps to introduce the Redux patterns and concepts whilst employing a nice new approach of employing reducers using built-in Hooks.\n\nI would (and do) use this commercially, but do take what you see here and adapt it to your own means.\n\n## Further reading and references\n\n\u003Ca name=\"further-reading\">\u003C/a>\n\nIt's always handy to have a list of other sources of information, so here's that very list of useful references, links, resources that are worth a peek to help you in your quest to be a Redux master:\n\n- [Redux JS](https://redux-toolkit.js.org/tutorials/basic-tutorial) - discover more about the Redux methodology and library\n- [Redux Toolkit](https://redux-toolkit.js.org/) - an opinionated version of the Redux JS library for React\n- [React's official documentation on Hooks](https://reactjs.org/docs/hooks-reference.html) - especially helpful for the [useContext](https://reactjs.org/docs/hooks-reference.html#usecontext) and [useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer) Hooks\n- Amelia Wattenberger's ['thinking in hooks' article](https://wattenberger.com/blog/react-hooks) - super helpful, clear resource for shifting your mindset into using Hooks in your own code\n- My own articles on Redux and React, using API's and data handlers. I have an [article part one](/blog/2020-01-21-react-redux-components-apis-and-handler-utilities/), and [article part two](/blog/2020-01-27-react-redux-components-apis-and-handler-utilities-part-two/) available, which cover some more real-world examples.","src/content/blog/2020-04-07-replacing-reacts-redux-library-with-usereducer-hook.mdoc","860dfdc3692f0209","2020-04-07-replacing-reacts-redux-library-with-usereducer-hook.mdoc","2020-05-29-github-activity-graphs-are-meaningless",{"id":367,"data":369,"body":375,"filePath":376,"digest":377,"legacyId":378,"deferredRender":156},{"title":370,"description":371,"featured":156,"featuredimage":372,"date":373,"tags":374},"GitHub activity graphs are meaningless","Worried about your GitHub graph and that you're not coding as much as others. Don't worry, I'm here to tell you why the GitHub activity graph can be a double-edged sword.","/img/github-graphys-meaningless.png",["Date","2020-05-29T10:01:20.985Z"],[177],"First off, I'm going to just hold my hands up and apologise straight out of the gates for the triggering title. I don't think they're meaningless. I do, however, think that we need to be careful about the importance we place on them and how there is a worrying trend to use them as a measure of another developer's _value_.\n\nLet's dive in and you'll see what I mean...\n\n## What's going on with GitHub's graphs?\n\nOK, so there's a lot going on on Twitter at the moment around the GitHub activity graph. It's a hot topic and brings out the worst in our community; all the bad parts: gatekeeping, abhorrence at someone having a different opinion, debasing people and flat out verbally attacking them.\n\nA couple of the recent tweets that kicked this all off include these two:\n\nA commendable tweet by Laurie Barth ([@laurieontech](https://twitter.com/laurieontech)) calling for GitHub graphs to be removed altogether.\n\n{% tweet url=\"https://twitter.com/laurieontech/status/1265762973202726912?ref_src=twsrc^tfw\" /%}\n\nAnd a very satirical one by Jacob Paris ([@jacobmparis](https://twitter.com/jacobmparis)), who was parodying a popular tweet asking what was stopping men looking really buff.\n\n{% tweet url=\"https://twitter.com/jacobmparis/status/1265740598277025792?ref_src=twsrc^tfw\" /%}\n\nIf you read the comments it becomes clear very quickly that it's quite the polarising topic and some people will fiercely defend their beloved graph — personally, this seems like a weird hill to die on, but you do you.\n\nThe problem is that there seems to be far too much value placed on what the graph represents. This presents a dangerous ideal amongst the community that **more green === better developer doing more code.**\n\nEven more troublesome than this, however, is that now some employers are picking up on this as a metric for new hires' abilities or level of effort.\n\nFrankly, this attitude is what needs to stop and, in that respect, then the graph is very meaningless at worst and flat out arbitrary at best.\n\nBut before we get into all that, let's just explore what exactly GitHub's graph is, and what it means.\n\n## What is GitHub's activity graph?\n\nThe first thing we need to understand is what exactly the graph _does_ represent. It might surprise some people to learn that it's not just _how much code you push_ or _how many times a day you commit_.\n\nIn fact, [according to GitHub themselves](https://help.github.com/en/github/setting-up-and-managing-your-github-profile/viewing-contributions-on-your-profile), the graph is an indication of your level of activity in public repositories; the darker the green, the more 'activity' there supposedly is.\n\nHowever, this _activity_ is composed from a few different sources:\n\n- Committing to a repo's default branch\n- Opening an issue\n- Proposing a pull request\n- Submitting a pull request\n\nFairly simple and makes sense.\n\n## So why is this so bad?\n\nThe main problem we have here is that there seems to be a growing trend to look at this little grid of shades of green and directly equate it to other developers' _value._ This seems to be based on the assumption that **doing more code === more green squares**.\n\nTechnically, this isn't entirely wrong. But as we've seen in the last section, you could literally spend your days just opening issues and submitting pull requests for typos. No code involved.\n\nIn fact, someone with almost zero development skills at all could easily get more green squares than me, a professional developer who has built popular open source tools.\n\nDoes this make me _better_ than the other person? Not in the slightest, but it does highlight the worthless and arbitrary nature of placing some sort of value on a small green square.\n\nAnd as I mentioned above, I've also heard murmurs that some employers are naively looking to candidates' GitHub accounts and using their graphs to give weight to their hiring decision.\n\nAgain, a rather awful thing to do in my opinion.\n\n### It doesn't measure quality\n\nQuality can be very subjective. After all, who's to say those 20 lines of JavaScript I wrote are better quality than my colleagues, or even the lines I wrote yesterday?\n\nSome organisations do have some internal methods to help gauge and improve code quality:\n\n- Peer to peer code reviews\n- Linting and static code analysis ([See Episode 3 of my Front End podcast](https://thefrontendpodcast.site/episodes/episode-3/) for a whole discussion on this)\n- Coding standards documents and practices\n\nHowever, I could literally check in anything I like to a GitHub repo and I'll get a contribution point or two and a little green square. Does this mean I'm pushing quality work? Maybe, but you have no way of telling from a coloured shape alone...\n\n### It doesn't measure value\n\nValue is another difficult attribute to measure. People measure it in different ways, but the worse companies use these sorts of arbitrary means to judge how effective someone is and how much value they're bringing to the table.\n\nFor example, I used to work in an awful place where your value, your efforts, were largely measured in how much time you spent at the office.\n\nI'll tell you now, that just because you do 12 hour days does not mean you are doing more work. If anything, this leads to unhealthy habits and, if anything, a drop in quality of work and productivity levels. (If you can, do, and actively like working long hours though, then again, you do you. What works for you is important!).\n\nBut some bosses like this level of visibility.\n\nSame thing with our friend the GitHub graph, right? You must be creating something amazing and bringing lots of value to the table because you have a clean sweep of daily markers on your profile...\n\n### It feeds a toxic competition culture\n\nFollowing on from the last point is this rise in toxic workplaces that promote a constant competitive culture, in addition to things like unspoken long hours requirements.\n\nThe graph doesn't help this as it can enable this backwards culture. Developers end up comparing their graphs to others' and at best whip themselves into an unsustainable overdrive mode; at worst, can feel like they're not good enough.\n\nWhich leads me nicely into...\n\n### It fuels imposter syndrome\n\nImposter syndrome is a funny old thing. Lots of us have it: some temporarily, others on a more frequent/permanent basis.\n\nHowever it's a largely internalised negative self belief. Usually it's not influenced by people and their actions directly pointing at you and saying 'you're not good enough' or 'you can't do this'. Rather, it's nature is to consume knowledge of indirect achievements and habits of others, and start a nagging little dialogue inside our heads that tells us 'we're not good enough at X because person Y has done all this and what have we done?!'.\n\nIn some respects it's largely up to the imposter syndrome sufferer to handle their own treatment of this, often by reflecting on their own achievements and blocking out some extraneous noise. It's not up to others to suppress their successes.\n\nThat said, by promoting systems like GitHub's graph can feed into this and create real problems for our fellow developers as they struggle to measure up to the _perceived_ activity levels of others.\n\nI should point out that your success is your success. You should never apologise for it, nor shy away from shouting about it. But I think it's helpful to be mindful about how others can perceive these and how it can affect them.\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n## Is the graph any good at all?\n\nOK, so that seems like a laundry list of negatives for the graph, but does it have any benefits or merits at all?\n\nOf course it does. I think if we take the graph away from an external measure of our activity and think about it in a more personal-to-me style, then it becomes quite helpful.\n\n### It becomes a coding journal of sorts\n\nA lot of people keep a daily journal and the graph can be utilised in a similar way. Of course, you wouldn't pointedly create some activity on GitHub just to get an (well, some might :D) as you would with a diary or journal — that would come as a result of doing the activity.\n\nHowever, you can use the graph to look back at past activity and reflect on what you've been up to or projects that worked on in the past.\n\n### It can highlight periods of productivity\n\nSimilarly, it is very helpful for some people (as mentioned in the Twitter posts at the start of this article) to highlight their productivity. This might be tied to certain things in their lives, or purely their work, but you can — albeit a little crudely —, and without any extra effort, look back at your time and see where you were most productive.\n\nIt might be that you have more darker green areas on an afternoon, or that you tend to be less active on Fridays.\n\nThis data can help you maintain or improve your productivity or otherwise get a measure of how you're doing with very little extra effort.\n\n### It can be used to track areas of interest\n\nWhilst I absolutely disagree with the practice of using a developer's graph to measure their value or standard as a developer, it can be an interesting tool to see where their areas of interest lie.\n\nFor example, are they active on particular projects or types of projects? Do they do a lot of open source work or prefer private projects (which may just be their day job)?\n\nEven for personal use, you can look back and see that you were really busy last July on project XYZ and maybe you should revisit it because it was great fun. Who knows?!\n\n## It just plain makes you feel good\n\nAnd let's not forget that it can just make you smile a little to see that little green square appear in your graph. It gives you a warm sense of self satisfaction.\n\nAnd that's OK too.\n\n## Is there a point to this article?\n\nWhy yes, I'm glad you asked!\n\nWhat I want to get across here is that, good or bad, the GitHub graph (and similar mechanisms) are just an arbitrary collection of activities.\n\nThey do not and can not measure:\n\n- Your personality\n- Your abilities\n- Your level or breadth of knowledge\n- Your skillset\n- Your experience(s)\n- How good you are at coding\n\nI think this message is especially important for junior and aspiring developers because they look to more senior developers for guidance and support.\n\nIf we send the message that their focus should be on fulfilling a set of tiny green squares every day or you're not fit to be a developer, we have failed them and will continue to do so.","src/content/blog/2020-05-29-github-activity-graphs-are-meaningless.mdoc","8ad3a1f0bfeec4bb","2020-05-29-github-activity-graphs-are-meaningless.mdoc","2020-06-12-30-helpful-tools-apps-and-websites",{"id":379,"data":381,"body":388,"filePath":389,"digest":390,"legacyId":391,"deferredRender":156},{"title":382,"description":383,"featured":156,"featuredimage":384,"date":385,"tags":386},"30+ Helpful tools, apps and websites","Where would we be without our beloved tools and apps? I'm going to share my favourite tools, apps and websites that I use as a frontend developer to get more done in less time.","/img/helpful-tools-blog-post.png",["Date","2020-06-12T15:49:00.000Z"],[289,177,387],"Tools","![Blog header image for helpful tools, apps and websites](/img/helpful-tools-blog-post.png)\n\nWhether you're starting out in development or you've been in the game for a while, everyone wants to be a productive developer who enjoys what they're doing.\n\nSometimes a good tool, helpful website, or killer piece of software can make all the difference to your experience.\n\nWith that in mind, I've compiled a list of my favourite tools that I use on a daily basis across a range of areas, such as communications, development, graphics, emails and more.\n\nEnjoy the list and please give it a share if you think anyone else will find these useful. Why not add your own in the comments and I'll update the list so we can all benefit?!\n\n**Note:** _Just in case anyone's suspicious about any ulterior motives, I can assure you that none of the links below are affiliate or promotional links. I 100% use and recommend everything on this list and don't make a single penny if you use them too. All I ask is that if you find something useful, pass it on_ 👉🏻\n\n## Communication\n\n![two adults using laptops to communicate](/img/adult-brainstorming-chair-515167.jpg)\n\n- [Coggle](https://coggle.it/) - I don't use mind maps all the time, but they're a really helpful tool in order to think through ideas and their branches. Coggle is a really modern tool that has integrations with Google Drive, Dropbox and supports multiple teams.\n- [Draw IO](https://drawio-app.com/) - this could live in the design heading too, but Draw IO lets teams create all sorts of helpful utility diagrams from user flows, tree diagrams, and architectural layouts.\n- [Franz](https://meetfranz.com/) - a weird one to explain, but Franz offers a sort of containerised desktop app where you can load in all your other daily comms apps from Gmail to Teams, Slack, Skype, Whatsapp and more. One app for all your apps! It's free and one of my 'can't live without' applications.\n- [Asana](https://asana.com/) - another love of my digital life, Asana allows teams to plan and keep track of their work in one centralised place. I track personal goals and projects on there too. It's like a todo list on steroids, mixed with a project management tool, all hidden away behind a friendly user interface.\n\n## Design\n\n![picture of a basket of fruit](/img/vegetables-752153_640.jpg)\n\n- [Pixlr](https://pixlr.com/editor/) - a free, online image editor that has a Photoshop look and feel\n- [Canva](https://www.canva.com/) - I absolutely love Canva! It's a really slick, simple online graphics creation tool where you can create just about anything from presentations, social media posts, and blog headers just like this very article's image right here.\n- [Kraken](https://kraken.io/web-interface) - I use Kraken to optimise a lot of my images where I need to smush them down and reduce the file size\n\n## Images\n\n![wall of images](/img/architecture-art-assorted-1742370.jpg)\n\n- [Unsplash](https://unsplash.com/) - freely-useable images by every day photographers and content creators\n- [Pixabay](https://pixabay.com/) - one of many alternatives to services like Unsplash, offering a different range of free to use images\n- [Undraw](https://undraw.co/illustrations) - a huge collection of open-source illustrations and graphics\n\n## Development\n\n![wall of tools of different shapes and sizes](/img/cesar-carlevarino-aragon-778069-unsplash.jpg)\n\n- [CodeSandbox](https://codesandbox.io/) - test out more elaborate ideas and complex projects in a suite of easily-configurable environments. I use it all the time for my students as it's a great way to share code back and forth.\n- [JS Bin](https://jsbin.com/?html,output) - a dead simple, straightforward playground to test out JS snippets.\n- [Regex 101](https://regex101.com/account/all) - OK, regex is a dark and mystical art. However, if you do have to write on or test one out, regex 101 makes it as painless as it can be.\n- [Netlify](https://www.netlify.com/) - this very blog (well, if you're not viewing it on Dev) is hosted on Netlify. Netlify is a hosting service that's aimed at JAM Stack apps. It offers a really empowering developer experience with lots of plugins and integrations to allow you to host all sorts of online applications from SPA's to websites and more.\n- [Postwoman](https://postwoman.io/) - now I'm a big fan of Postman for testing my API's out, but Postwoman offers a superb alternative. Online based, open source and with a ton of options, it's a must to check out.\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social call to action image](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n## JavaScript\n\n![code on a computer screen](/img/dlanor-s-703975-unsplash.jpg)\n\n- [ES6 guide](https://www.tutorialspoint.com/es6/es6_quick_guide.htm) - a helpful guide to all of the main features within the ES6 flavour of everyone's favourite language.\n- [Parcel JS](https://parceljs.org/) - a great alternative to Webpack for your JS project bundling needs. I have a [good article on configuring Parcel](https://robkendal.co.uk/blog/2019-04-26-using-parcel-bundler-as-a-webpack-alternative/) that's worth checking out.\n- [Thinking in React Hooks](https://wattenberger.com/blog/react-hooks) - I keep plugging this article because Amelia Wattenberger has an unbeatable approach to explaining the benefits of React Hooks over traditional class-based components, including a library of Hooks utility classes.\n- [Unpkg](https://unpkg.com/) - if you'd like to use a module or package from the NPM library via a CDN then Unpkg is the tool for you.\n\n## CSS\n\n- [30 CSS selectors you must memorise](https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048) - a simple guide to the best CSS you must learn today!\n- [A complete guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) - I use this all the time, it's a fantastic resource for learning the intricacies of Flexbox.\n- [BEM](http://getbem.com/) - Block Element Modifier is a popular methodology for structuring your CSS classes. This is the complete guide and is super useful.\n- [Tailwind CSS](https://tailwindcss.com/) - a handy utility-first CSS framework that offers a different approach to 'standard' CSS styling and methodologies like our friend BEM, above. There's also a good discussion on this in [episode 6 of The Front End Podcast](https://thefrontendpodcast.site).\n\n## Blogging, writing and podcasts\n\n![a poorly lit laptop screen and lamp](/img/contemporary-dark-data-669996.jpg)\n\n- [Carbon](https://carbon.now.sh/) - I wish I'd discovered this earlier, but Carbon is a simple code editing window where you can write your code, style it up and then export it to Twitter or download it as an image file.\n- [HypeFury](https://app.hypefury.com) - I've just started using this for my Twitter management, but it's a queuing and promotion tool. It has a load of features like evergreen tweets and clever scheduling.\n- [Otter AI](https://otter.ai/login) - I use this to transcribe my podcast episodes, but you can use it for meetings, lectures or just about anything. The transcriptions are very accurate and quick.\n- [Zencastr](https://zencastr.com/) - continuing on the podcast theme, Zencastr is amazing. It's dead simple and offers a unique recording approach whereby you get several streams, one per guest — this makes it easy for post production and mixing.\n- [Anchor](https://anchor.fm/dashboard) - offers an all in one solution for recording, promoting and distributing your podcast. I've been using it for 6 months or so and it helped get The Front End podcast off the ground in no time flat.\n- [Notion](https://www.notion.so/) - I use Notion a lot. Like, a lot a lot! It offers a striped back, yet powerful writing experience with some killer features — like exporting your copy into markdown. It also has a ton of different uses and page layouts available.","src/content/blog/2020-06-12-30-helpful-tools-apps-and-websites.mdoc","19de10c67ee1718d","2020-06-12-30-helpful-tools-apps-and-websites.mdoc","2021-06-07-should-you-learn-react-angular-or-vue",{"id":392,"data":394,"body":400,"filePath":401,"digest":402,"legacyId":403,"deferredRender":156},{"title":395,"description":396,"featured":156,"featuredimage":397,"date":398,"tags":399},"React, Angular and Vue compared, which should you learn in 2021?","Learn which of the most popular JavaScript frameworks should you spend your time learning in 2021. We compare Angular, React, and Vue.","/img/which-frameworks-to-learn-2021-post.png",["Date","2021-06-07T08:08:20.000Z"],[151,177,150],"![Blog header for which JavaScript framework should you learn in 2021](/img/which-frameworks-to-learn-2021-post.png 'Which of the most popular JavaScript frameworks should you learn in 2021')\n\nOne of the most common questions I get as a [coding mentor](/mentorship) when it comes to moving on from learning the basics of HTML/CSS and JavaScript is:\n\n> **which is the best JavaScript framework to learn, right now, in 2021? Should I learn React, Angular or Vue?**\n\nI recently released a brand-new course for React students, [The Beginner's Guide to Real-World React](https://www.newline.co/courses/beginners-guide-to-real-world-react), where you can learn how to go from complete React beginner to building realistic UI applications using the React framework. Hot on the heals of the course release, I thought it would be good time to answer this very important question.\n\nLet's dive in!\n\n## Similar frameworks and their comparisons\n\nThere are many JavaScript libraries, frameworks, tools, projects, and platforms out there that help solve developers’ problems, help them build user interfaces, and ship excellent products faster. When it comes to the building user interfaces part, arguably the most popular libraries out there are Angular, VueJS, and ReactJS.\n\nMuch like React (which I'm a huge fan of) both Vue and Angular are concerned with empowering developers to build complex user interfaces in a modular way, breaking down parts of those interfaces into component parts.\n\n![Search trends for React, Vue, and Angular between 2019 to 2021](/img/react-vue-angular-search-trends.png)\n\nLooking at the search data from Google Trends, you can see that Vue has been steadily gaining interest over the past few years, only dipping over the course of late 2020. React has increased dramatically, whilst Angular has declined over the same time frame. Both React and Angular have dropped off in search interest over the course of late 2020, with React gaining more popularity once more towards present day (June 2021)\n\n## Comparing Angular, React and Vue frameworks\n\nLet's take a quick tour of each of these three big players in the front-end web application building space and see if we can help you determine which of the popular JavaScript frameworks you should be learning in 2021.\n\n## React\n\nReact came onto life in 2013 and has gone from strength to strength. React is more of a library than a complete framework and it has many missing pieces of the overall development puzzle (this is one of the things [The Beginner's Guide to Real-World React](https://www.newline.co/courses/beginners-guide-to-real-world-react) aims to address!).\n\nReact is _declarative_, meaning it allows us to break down our complex user interfaces into smaller, bite-sized pieces of functionality that operate on their own; managing their state, given some sort of input data referred to as props. These smaller components can be brought together as building blocks for larger, more complex user interfaces that interact via passed in data and events.\n\n[![course banner for beginners React course](/img/react-course-cta.png \"Beginner's Guide to Real-World React\")](https://www.newline.co/courses/beginners-guide-to-real-world-react/ \"See the Beginner's Guide to Real-World React\")\n\n### Benefits\n\n- Small and relatively lightweight as libraries go.\n- Declarative in nature; you can write your UI as you want it to be rendered.\n- Shallow learning curve, especially when it comes to learning the essentials.\n- Works a lot on an 'opt-in' fashion where you can adopt as much or as little as you need.\n- React is very unopinionated, it gets out of your way.\n\n### Drawbacks\n\n- Some library differences can cause confusion and add to the learning curve (e.g. classes vs. function components).\n- React is very unopinionated, you're going to have to fill in the blanks to add things like navigation to your app.\n- It's made by Facebook -- this could be a deal-breaker for some developers.\n- Because of its free and easy approach, there aren't a lot of best-practices or clear guidelines around developing with React.\n\n## Vue\n\nVueJS came onto the scene around 2014 and was developed by a former Google employee Evan Yu. Vue is a progressive JavaScript framework, similar to React, and has a rich ecosystem of additional libraries and plug-ins to enable additional functionality.\n\n### Benefits\n\n- Empowered HTML: Vue has a lot of similarities with Angular in the way that it decorates HTML blocks within its components.\n- Detailed documentation: one of the best features of Vue is the hugely detailed and informative documentation that helps developers at either end of the experience scale.\n- Ease of integration: whether you’re building single-page applications (SPA’s) or more complex applications, Vue’s smaller, interactive parts mean it can be integrated into existing infrastructure without affecting the wider \\* system.\n- Large scaling: Vue can be used to develop pretty large, reusable templates to power very complex apps.\n- Small code footprint: Vue weighs in at around 20KB keeping its size small, but also aiding in increasing its speed and performance.\n- Short learning curve\n\n### Drawbacks\n\n- Lack of support and resources: whilst rising in interest and boasting a loyal and growing community, Vue has the smallest market share and so naturally has limited resources and solutions out there for budding developers or those seeking answers.\n\n## Angular\n\nAngular (formerly AngularJS, which is a very different beast), is a fully-fledged framework released back in 2009. It boasts a very mature framework that handles everything you need to build rich, data-driven user interfaces right out of the box. It offers an MVVM (Model, View, View Model) approach to development structure that separates the working parts into their respective areas of responsibility.\n\n### Benefits\n\n- MVVM structure: this allows developers to work on the same area of the app without stepping on colleagues’ toes. However, the MVVM approach is not as intuitive to those starting out or those unfamiliar with this particular project structure.\n- Two-way data-binding: this enables singular behaviour within the app, reducing the risk for errors.\n- Dependency injection of the required features that the current components depend on.\n- Deep coupling with TypeScript: including excellent TypeScript support.\n- Very detailed documentation and guides\n- Mature ecosystem: similar to the documentation, Angular is widely used and has a large ecosystem of resources, guides, help, and advice for just about any situation you’ll come across.\n- Opinionated approach: even down to the structure and architecture to make sure your project can scale well.\n\n### Drawbacks\n\n- Steep learning curve: Angular is very complex and has an equally steep learning curve which is a big barrier to entry, especially for new developers\n- Migration: is often a problem when moving from older versions to new\n- Deep coupling with TypeScript: yes, this is also a benefit, but TypeScript is not widely adopted by new developers and adds yet another few degrees to an already steep learning curve\n\n## When it comes to React, Angular and Vue, which framework is best?\n\nThis is really a deceitful question as it pits each framework against one another and it really boils down to opinions and preference. There are many solid reasons to choose any of these three frameworks, or indeed, none at all.\n\nRemember, that any library, framework, platform, language, design, pattern, whatever, they’re all just tools.\n\nIn the same way that you wouldn’t use a hammer to unscrew a bolt, sometimes it’s about finding the right tool for the job. When you have a choice of hammers, then it can be a simple as ‘I prefer this one over that one’. And it’s just as easy to write bad code in a good library.\n\n## Should I learn React, Angular or Vue to get a job?\n\nIf you're coming here with the angle of looking for a job then the best advice is to take a look at the local job market where you are. For example, here in Yorkshire, we have the two cities of York and Leeds, the latter being a huge tech-hub for the North of England.\n\nIt’s very diverse as tech goes with a wide variety of technologies, languages and sectors that you can choose to apply for roles within. In terms of tech stack, the job market in this part of the world is very React and Angular dense at the front-end, with PHP and .NET forming the largest part of the server-side technologies.\n\nSo, if I were in the market for a job, I’d be focusing on those languages and tech-stack.\n\n## What about other frameworks, which should I learn?\n\nThere are, of course, about as many user interface building libraries, frameworks, and platforms as there are hairs on your head, with more popping up all the time. The big question you should be asking is \"which one is right for me, my team, my project(s)?\".\n\nYou might not have much of a choice in this, depending on where you choose to work and what projects you choose to work on. This article is really about comparing the good and bad parts of the three heavy hitters in the market today, midway through 2021.\n\nIf you’re interested in looking at other front-end, UI-building libraries and frameworks then some other popular choices include:\n\n- [Preact](https://preactjs.com/), a tiny alternative to React that operates in a very similar way.\n- [Svelte](https://svelte.dev/), a very popular alternative to other interactive UI building languages that shifts to a compiled step (as opposed to React and Vue that do work in the browser).\n- [Ember](https://emberjs.com/), a very robust and battle-tested JS framework for building modern web applications.\n\n## Further reading and other resources\n\nWhilst I have a lot of love for the other JavaScript frameworks on show here, React is my first love and where I spend most of my time building funky things. If you're interested in learning React then I recommend the following:\n\n- Check out my recently launched novice guide to those just starting out learning the library, [The Beginner's Guide to Real-World React](https://www.newline.co/courses/beginners-guide-to-real-world-react).\n- Talk to me about my [mentorship](/mentorship) options, even if it's just a one-off email to ask questions or pick my brains.","src/content/blog/2021-06-07-should-you-learn-react-angular-or-vue.mdoc","f1a16f745026bfc0","2021-06-07-should-you-learn-react-angular-or-vue.mdoc","2024-11-21-detecting-os-level-dark-mode",{"id":404,"data":406,"body":413,"filePath":414,"digest":415,"legacyId":416,"deferredRender":156},{"title":407,"description":408,"featured":145,"date":409,"tags":410,"imgtitle":412},"How to detect light or dark mode at the OS level with JavaScript","Detecting user dark mode or light mode preferences at the browser or OS level with JavaScript is really easy, let's see how",["Date","2024-11-21T14:46:11.293Z"],[150,411],"Svelte","Detecting user colour schemes with JavaScript","Recently I needed to update some settings and swap out some components in a Svelte app depending on the users colour theme choice -- i.e. light or dark mode. \n\nWe'd been using Svelte's built in state handling mechanism (Svelte 4, so not Runes, but the `writeable()` stores business) and checking that. This was set directly by the user when they got in amongst the settings area of the app. It worked; all was well. \n\nThat was, until we discovered that if you load the app without choosing a particular light or dark theme in the app, leaving it as `system` then the app relies on your OS or browser-level theme choice. \n\nThe challenging part was that the user preference was still _set_, but the app wasn't deriving this from state. TL;DR: I needed to know what their preferences were from a higher, system level.\n\nBut how do you find out a user's colour theme preferences directly from the OS or browser using JavaScript? \n\nTurns out it's maddeningly simple as you'll see...\n\n## Show me the JavaScript\n\nOK, here's the current way I'm doing this using plain ol' vanilla JavaScript:\n\n```js\nwindow.matchMedia(\"(prefers-color-scheme: dark)\").matches\n```\n\nThat's it! Dead simple, no?! That tiny snippet will return you a true/false value that matches whether a user has a dark mode preference set at their system level. \n\nOf course, you can edit this and replace the 'dark' with 'light' to discover the opposite. Again, dead simple.\n\n[![course banner for beginners React course](/img/react-course-cta.png \"Beginner's Guide to Real-World React\")](https://www.newline.co/courses/beginners-guide-to-real-world-react/ \"See the Beginner's Guide to Real-World React\")\n\n### Watching for changes\n\nYou might need to do something more reactive based on if this preference changes though, and that's really easy too. \n\nHere's how I'd do it:\n\n```js\nconst switchColourScheme = (isDarkMode) => {\n  // Do something here with the isDarkMode value\n};\n\nwindow\n  .matchMedia(\"(prefers-color-scheme: dark)\")\n  .addEventListener(\"change\", (event) => switchColourScheme(event.matches));\n```\n\nOnce more, really simple and clean. All we're doing is adding in a plain ol' event listener that fires when the `prefers-color-scheme` value changes, then passing the `matches` value (i.e. true/false) into a separate function that does something with it. It's a little cleaner to do that in my opinion, but not necessary. \n\nThat extra function might do something like update state, change the UI, set other values, whatever you need.\n\n_If you like this article, you’ll love the other helpful content I post on socials like Threads._ [Find me on Threads @kendalmintcode](https://www.threads.net/@kendalmintcode) _and say hi._\n\n## Example with Svelte\n\nI have a lot of love for Svelte, it's like a full-circle web development moment where we're back to using HTML/CSS/JS but with superpowers. Very clean, easy to use but powerful to boot. Anyway, my original need for this particular piece of code came about from within a Svelte app where I also had to respect the user's app settings choice _as well as_ their system preference, with the former trumping the latter.\n\nHere's how I ended up doing it in the Svelte app:\n\n```svelte\n\u003Cscript lang=\"ts\">\n  import { theme } from \"$lib/stores\";\n  \n  let isDarkMode = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n  theme.subscribe((value) => {\n    if(['light', 'dark'].includes(value)) {\n      isDarkMode = value === 'dark';\n    }\n  });\n\t\n  window\n\t  .matchMedia(\"(prefers-color-scheme: dark)\")\n\t  .addEventListener(\"change\", (event) => {\n\t\t  isDarkMode = event.matches;\n\t  });\n\u003C/script>\n\n{#if isDarkMode}\n  \u003C!-- Do dark mode things  -->\n{:else}\n  \u003C!-- Do light mode things -->\n{/if}\n```\n\nAnd that's all folks. Nice and simple, clean and easy to work into your app if you need a vanilla JavaScript means of detecting a user's colour scheme preferences for dark mode or light mode.","src/content/blog/2024-11-21-detecting-os-level-dark-mode.mdoc","f09376075bc22e20","2024-11-21-detecting-os-level-dark-mode.mdoc","2024-12-21-storyblok-best-practices",{"id":417,"data":419,"body":428,"filePath":429,"digest":430,"legacyId":431,"deferredRender":156},{"title":420,"description":421,"featured":156,"date":422,"tags":423,"imgtitle":427},"Top 5 best practices for using Storyblok or a headless CMS","Get tips and tricks for using Storyblok CMS including my top 5 personal best practices",["Date","2024-12-21T07:46:11.293Z"],[424,425,426],"Guides","Storyblok","Headless CMS","5 best practices for using Storyblok","As a [freelance Storyblok developer](/freelance-storyblok-developer), most of my clients fall into one of these categories:\n\n- They're looking to build/rebuild a website and want advice on how to do it.\n- They already have Storyblok and want to improve on its use.\n- They _want_ to use a headless CMS like Storyblok but aren't sure what to do.\n\nAs a Storyblok partner, my goto advice is to of course recommend Storyblok as a CMS to power just about any situation. I love using it and do so every day on a variety of projects. It's flexible, powerful, and offers an intuitive editing experience for marketers and content creators, whilst simultaneously offering a great developer experience to make the most of that valuable content.\n\n> **What is headless anyway?**\u003Cbr />\n> The non-technical muggles among us tend to be unfamiliar with the term 'headless'. In the context of a content system, it means that you would be entering your content in one place (e.g. Storyblok) and consuming it in another, separate place (e.g. a website). \u003Cbr />\n> The benefits of this include improved content workflows, being able to power multiple end points from the same content management system, and building better user experiences without being locked into any specific choices (e.g. WordPress).\n\n\nThat aside, you're here for some tips, tricks, and best practices for using Storyblok as your primary CMS, so let's get to it!\n\n## 1. Structure Your Content Thoughtfully\n\nStoryblok’s component-based architecture is one of its most powerful features. No matter your background, technical or not, it empowers users to create reusable, modular blocks for your content. To make the most of this, focus on designing components with scalability and flexibility in mind:\n\n- **Avoid overcomplication**: \u003Cbr />\nAim to break your content into small, reusable components that can be easily combined. For example, instead of creating a unique component for every type of hero section, create a flexible hero component with customisable fields.\n- **Use nesting carefully**: \u003Cbr />\nWhile Storyblok supports nesting of components, you should be mindful to avoid excessive nesting as it can make the content editor interface difficult to navigate. There's a balance to be had between flexibility and complexity for editors.\n- **Plan ahead**: \u003Cbr />\nDefine your content model in advance based on your website’s needs. This will help reduce the need for significant restructuring later. It can help to do some simple drawings of a page of your website and break down all the content on there and how it will be modelled and structured.\n\nBy designing intuitive and reusable components, you not only streamline content creation but also empower editors to work independently and efficiently.\n\n### Real world examples\n\nHere's a couple of examples from one of my clients' Storyblok instances. The first, shown below, is how we've structured a `blockquote` component. You can see it's very simple with a message element, possible image (it could be used in a avatar for example or testimonial), and name and company fields for a citation display. This block can be reused as much as you like across the platform and added to larger modules or blocks of content.\n\n\u003Cdiv class=\"w-1/2 mx-auto\">\n![modular content editing of blockquote component](/img/storyblok-components-1.png)\n\u003C/div>\n\nWith the next example I've built out a classic FAQ item list. The `faq-list` block is super simple, it has a Blocks field (Storyblok's special field type that allows child blocks to be added to it) called 'items'. You can see in the second image that I've restricted the _type_ of content that can be added to this list-style component. In this case you can only add an `faq-item`, but you can add as many as you like. \n\n\u003Cdiv class=\"flex flex-row gap-2 justify-evenly mx-auto\">\n  \u003Cdiv>\n    \u003Cimg src=\"/img/storyblok-components-2.png\" class=\"block\">\n  \u003C/div>\n  \u003Cdiv>\n    \u003Cimg src=\"/img/storyblok-components-3.png\" class=\"block\">\n  \u003C/div>\n\u003C/div>\n\nThis approach allows us to offer content editors flexibility on how they build out their content, whilst adding safety rails and restrictions so that things don't go off piste. \n\n\n## 2. Leverage Roles and Permissions\n\nStoryblok allows you to define roles and permissions to manage user access effectively. Use this feature to ensure that each team member only accesses the areas they need:\n\n- **Separate developer and editor tasks**: Developers can focus on technical implementation, while marketers and content creators work on editing and managing content without fear of breaking the system.\n- **Custom workflows**: Create workflows that reflect your content approval process. For example, one of my clients has sales team members who can add new business listings, but require a final editor approval before the content is published.\n- **Restrict access**: Limit user permissions based on their roles. For example, grant editors access to content folders while reserving schema editing rights for developers.\n\nThis approach minimises errors, improves collaboration, and enhances security within your projects.\n\n\n## 3. Take Advantage of Visual Editing\n\nStoryblok’s real-time visual editor is a standout feature that can drastically improve content management. This tool allows editors to see changes to the website as they make them, reducing the need for constant developer intervention:\n\n- **Train your team**: Provide training for your content team on how to use the visual editor effectively. This ensures everyone understands its capabilities, including inline editing and previewing changes.\n- **Preview content across devices**: Use the visual editor to preview content on different devices (desktop, tablet, mobile) to ensure consistency and responsiveness.\n- **Enable collaboration**: The editor allows multiple users to work on content simultaneously, streamlining workflows for large teams.\n\nThe visual editor not only enhances productivity but also helps bridge the gap between technical and non-technical team members. The other nice bonus here is that you can enjoy full visual editing of the destination's content (e.g. a website) _before_ committing to publishing it live. \n\n\n## 4. Integrate Third-Party Tools\n\nOne of Storyblok’s key strengths is its flexibility to integrate with other tools and frameworks, thanks to its API-first approach. Whilst this might not interest you much as a potential client of mine or a business interested in improving their content editing experience, it makes a _huge_ difference to your development team. Storyblok's developer experience is superb, and I say this as someone's who's worked with Storyblok's Content API for a few years.\n\nTo make the most of this feature, identify and implement integrations that enhance your project’s functionality:\n\n- **Framework compatibility**: Storyblok works seamlessly with popular frameworks like Nuxt.js, Next.js, Sveltekit and React, and even just plain vanilla JavaScript, so choose the one that aligns with your development goals.\n- **Marketing tools**: Integrate Storyblok with tools like Google Analytics, HubSpot, or Salesforce to optimise your marketing and customer experience strategies.\n- **E-commerce platforms**: Pair Storyblok with platforms like Shopify or BigCommerce to create dynamic, content-driven e-commerce sites.\n\nCustom integrations enable you to really bend Storyblok your will to get the best out of it for your project’s needs, ensuring a cohesive and efficient digital ecosystem.\n\n\n## 5. Maintain a Clean Content Repository\n\nA well-organised content repository is crucial for long-term success, especially as your project grows. Storyblok provides tools to help you manage and maintain your content repository efficiently:\n\n- **Organise folders**: Group content into folders by type or project (e.g. blog posts, landing pages, product pages). This makes it easy for editors to find what they need. This is especially key for organising your media/assets folder -- images and files get out of hand really fast if you're not careful!\n- **Use datasources**: Storyblok's datasources are a great way to organise and categorise content. For example, I use blog categories all the time to help give some order to articles within the CMS.\n- **Use naming conventions**: Establish a clear and consistent naming convention for components, folders, and content entries to avoid confusion and help with self-service for your content editors.\n- **Archive outdated content**: Regularly audit and archive or delete content that is no longer in use to keep your repository clutter-free.\n\nA clean repository not only makes day-to-day operations smoother but also reduces the risk of errors when updating or reusing content. This also helps reduce the learning curve for new editors trying to get up to speed.\n\n\n## More Storyblok help\n\nThese are my top 5 Storyblok best practices and will help you to create and maintain a clean, tidy, and efficient content editing workspace that will scale with you.\n\nStoryblok’s powerful features make it an excellent choice for creating dynamic, content-driven digital experiences. Sounds fancy and grandiose, but really we're talking about creating a centralised content base that can provide content to several other separate digital end points; this might be a website, or a mobile app, or digital billboard. \n\nBy structuring your content thoughtfully, leveraging roles and permissions, embracing the visual editor, integrating useful third-party tools, and maintaining a clean repository, you can unlock Storyblok's full potential. These best practices ensure a smoother workflow, better collaboration between teams, and an enhanced content management experience.\n\nIf you have any specific questions about Storyblok (or any headless content management system) and how it can help power your business' digital platforms then you can [arrange an intro with me](/contact) and I'd be happy to share my experience.","src/content/blog/2024-12-21-storyblok-best-practices.mdoc","79481ebce5164f2a","2024-12-21-storyblok-best-practices.mdoc","2021-09-03-sending-contact-forms-with-next-js-and-wordpress",{"id":432,"data":434,"body":442,"filePath":443,"digest":444,"legacyId":445,"deferredRender":156},{"title":435,"description":436,"featured":156,"featuredimage":437,"date":438,"tags":439},"How to use contact forms with headless WordPress and Next.js","Part 4 in Getting Started with Next.js and this time we're looking at how to send a contact form using WordPress in headless mode.","/img/next-js-with-wordpress-part-4-blog-post.png",["Date","2021-09-03T20:08:20.000Z"],[151,440,441],"Next","Static Sites","![Blog header for How to use contact forms with headless WordPress and Next.js](/img/next-js-with-wordpress-part-4-blog-post.png 'How to use contact forms with headless WordPress and Next.js')\n\nIf you’ve been following along with the series, you’ll have come across the previous posts:\n\n- [Configuring WordPress for use as a headless CMS and setting up a Next.js project](/blog/configuring-wordpress-as-a-headless-cms-with-nextjs)\n- [Using WordPress as a headless CMS with Next.js](/blog/using-wordpress-as-a-headless-cms-with-nextjs)\n- [Create a Next.js RSS feed for your static website](/blog/create-a-static-website-rss-feed-with-nextjs)\n\nIn this article, part 4, we’re going to cover a key part of and good website: handling contact forms within a static website.\n\n_If you like this article, you’ll love the other helpful content I post on Twitter._ [Find me on Mastodon @kendalmintcode@indieweb.social](https://indieweb.social/@kendalmintcode) _and say hi._\n\n## Contact forms and headless WordPress with Next.js\n\nWhen it comes to allowing your visitors to send information to you via a contact form on your headless WordPress backend from a statically-generated front end, there are a few options, and I’m sure more are being added all the time.\n\nHowever, in my experience, there are two solid, reliable, stand-out options to choose from:\n\n- [Netlify Forms](https://www.netlify.com/products/forms/).\n- [The WPGraphQL WordPress plugin](https://wpgraphqldocs.gatsbyjs.io/extenstion-plugins/wpgraphql-send-email/).\n\nLet’s take a look at these options in more detail.\n\n## Netlify Forms\n\n[Netlify Forms](https://www.netlify.com/products/forms/) is yet another super powerful extension to the ever-popular [Netlify](Netlify) platform. It works so easily and simply, using the familiar magic that only Netlify has.\n\nIt’s a cinch to set up with very minimal changes to your form HTML (or JSX in our case as we _are_ dealing with React after all 😊), so let’s start with an example.\n\n> **Wait!** What if I don’t want to host things on Netlify? Good point. Netlify is awesome and I highly recommend it, but Vercel (the makers of Next) do the best job of hosting Next sites. That’s why we’re looking at the powerful Forms feature from Netlify _first_ and then I’ll explain about the next best option.\n\nHere’s a typical HTML form that you might have in your React app:\n\n```js\nconst MyContactForm = () => (\n  \u003Cform name=\"contact\" method=\"post\">\n    \u003Cp>\n      \u003Clabel>\n        Your Name: \u003Cinput type=\"text\" name=\"name\" />\n      \u003C/label>\n    \u003C/p>\n    \u003Cp>\n      \u003Clabel>\n        Your Email: \u003Cinput type=\"email\" name=\"email\" />\n      \u003C/label>\n    \u003C/p>\n    \u003Cp>\n      \u003Clabel>\n        Message: \u003Ctextarea name=\"message\">\u003C/textarea>\n      \u003C/label>\n    \u003C/p>\n    \u003Cp>\n      \u003Cbutton type=\"submit\">Send\u003C/button>\n    \u003C/p>\n  \u003C/form>\n);\n```\n\nNothing too fancy there. To add Netlify’s form-handling powers to this then you need to do a few things:\n\n1. Add in a hidden input with a `form-name` attribute and provide the name of your form.\n2. Add in a `netlify` or `data-netlify` attribute to help Netlify identify the form.\n3. Add in a `data-netlify-honeypot` attribute to help avoid unnecessary captchas for your visitors.\n\nWith these parts in place, the form now looks like this:\n\n```js\nconst MyContactForm = () => (\n  \u003Cform\n    name=\"contact\"\n    method=\"post\"\n    data-netlify=\"true\"\n    data-netlify-honeypot=\"bot-field\"\n  >\n    \u003Cinput type=\"hidden\" name=\"form-name\" value=\"contact form\" />\n\n    {/* ...Rest of the form*/}\n  \u003C/form>\n);\n```\n\nYeah, I know, it really is _that_ simple. Depending on what React flavour your using (Next, Gatsby, etc.), you might need to add in a couple of additional small steps to make sure the form is wired up with Netlify. In this case you can read all the details on their blog post about [integrating Netlify Forms in a React App](https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/#form-handling-with-static-site-generators).\n\nYou can also read more in the [official Netlify Forms documentation](https://docs.netlify.com/forms/setup/#javascript-forms).\n\n## WPGraphQL Send Email\n\nOur next option is to use the popular WordPress plugin [WPGraphQL Send Email](https://en-gb.wordpress.org/plugins/add-wpgraphql-send-mail/). Before we dive into the setup and implementation, head over to the plugin’s page on WordPress.org and download and install it, or search for it directly in your WordPress site and add it there.\n\nThe WPGraphQL Send Email plugin wires up email sending capability into WordPress and exposes a GraphQL mutation inside of the WPGraphQL schema. This new `sendEmail` mutation enables you to send emails from your static front-end _via_ WordPress.\n\n[![course banner for beginners React course](/img/react-course-cta.png \"Beginner's Guide to Real-World React\")](https://www.newline.co/courses/beginners-guide-to-real-world-react/ \"See the Beginner's Guide to Real-World React\")\n\nYou can integrate the sending capability with different providers too, such as SendGrid, Gmail, and Outlook/Office365. That part of the setup is a little beyond the scope of this article, but you’re free to use a simple SMTP server if you’d prefer — basically any service that can fire emails to other people.\n\n## Updating our Next.js site to use the WPGraphQL Send Email plugin\n\nIt’s not too difficult to plug all this into our Next site, but it does require a little more work than the Netlify Forms configuration.\n\nWe need to do two things here:\n\n1. Add a new `async` API function to our `/lib/api.js` file.\n2. Add a new contact page complete with a new contact form.\n\n### Add a new API handling function\n\nOK, so first things first we need to add a new function to our `/lib/api.js` file. This new function will be a GraphQL _mutation_. Its sole purpose will be to pass our website visitor’s form data to our WordPress backend. Here, the Send Email plugin (now wired into the WPGraphQL system) will handle the physical sending of the email to whomever we’ve set up in there.\n\nIf you’re following on from the previous article on [Using WordPress as a Headless CMS with Next.js](/blog/using-wordpress-as-a-headless-cms-with-nextjs) then you can go ahead and open up the `/lib/api.js` file.\n\n> If you’re reading this article fresh with no existing codebase, then you can download a great starter kit project to wire up WordPress with Next.js on my GitHub profile. Check out the [wordpress-next-starter repo](https://github.com/bpk68/wordpress-next-starter) to get started.\n\nWith the `api.js` file open and ready, add in the following new function:\n\n```js\nexport async function sendMail(subject, body, mutationId = 'contact') {\n  const fromAddress = 'noreply@yourwebsite.com';\n  const toAddress = 'someone@yourwebsite.com';\n  const data = await fetchAPI(\n    `\n\t\tmutation SendEmail($input: SendEmailInput!) {\n\t\t\tsendEmail(input: $input) {\n\t\t\t\tmessage\n\t\t\t\torigin\n\t\t\t\tsent\n\t\t\t}\n\t\t}\n\t`,\n    {\n      variables: {\n        input: {\n          clientMutationId: mutationId,\n          from: fromAddress,\n          to: toAddress,\n          body: body,\n          subject: subject,\n        },\n      },\n    }\n  );\n\n  return data?.sendEmail;\n}\n```\n\nWhat’s going on here in this new `sendMail` API function? Well, the [official Send Mail plugin](https://en-gb.wordpress.org/plugins/add-wpgraphql-send-mail/#description) isn’t hugely helpful in explaining this on the plugin info page, but let’s go over what’s what.\n\nFirst up, we have a function that accepts a `subject`, a `body`, and a `mutationId` which defaults to `contact`. The `subject` and `body` arguments are going to represent the subject line of the email we wish to send, and the body (HTML or otherwise) of the very same email. The `mutationId` field helps us to identify the name of the form we wish to send an email about.\n\nWe have a few variables at the start of the function that outline a ‘from’ address and ‘to’ address’, which will be attached to the email to identify who it’s _from_ and where it’s going _to_. With the `data` variable, this is the main GraphQL mutation.\n\nThe mutation calls the `sendEmail` endpoint (this is the new endpoint exposed by the Send Email plugin) and is passed a `SendEmailInput` object. What it gives us back is a message, origin, and sent values. These are useful, particularly the sent value, for our front end to be sure that the form has been submitted successfully.\n\nFurther down the mutation in the supplied `variables` we just connect up all the incoming data and arguments we have so far, such as the body, from address and subject.\n\nWith that taken care of, let’s create a new page to house our contact form.\n\n### Add a new contact page and form\n\nYou could create a contact form anyway, or even create a reusable component that does the same trick, but for our purposes we’re going to create a good ol’ contact page with a form directly upon it.\n\nWe want this to live at the `/contact` route in our website, so in your Next.js project, under the `/pages` directory, create a new folder `contact` and a new file `index.js`.\n\nWith that done, populate the new `index.js` file with the following:\n\n```js\nimport Head from 'next/head';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\n\nimport styles from '../../styles/Home.module.css';\n\nconst Contact = ({ menuItems }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (evt) => {\n    // we'll fill this in in a moment\n  };\n\n  return (\n    \u003Cdiv className={styles.container}>\n      \u003CHead>\n        \u003Ctitle>Contact us page\u003C/title>\n      \u003C/Head>\n      \u003Cmain className={styles.main}>\n        \u003Ch1 className={styles.title}>Contact us\u003C/h1>\n        \u003Chr />\n\n        \u003Cform onSubmit={handleSubmit}>\n          \u003Cdiv>\n            \u003Clabel className=\"label\">Your name\u003C/label>\n            \u003Cinput\n              className=\"input\"\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          \u003C/div>\n          \u003Cdiv>\n            \u003Clabel className=\"label\">Your email\u003C/label>\n            \u003Cinput\n              class=\"input\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          \u003C/div>\n          \u003Cdiv>\n            \u003Clabel className=\"label\">Your message\u003C/label>\n            \u003Ctextarea\n              className=\"textarea\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            >\u003C/textarea>\n          \u003C/div>\n\n          \u003Cbutton>Send\u003C/button>\n        \u003C/form>\n      \u003C/main>\n    \u003C/div>\n  );\n};\n\nexport default Contact;\n```\n\nLooks quite long, but I always feel anything involving forms tends to look like this. Let’s break it down.\n\nAt the top, in the imports section, we’re bringing in `useState` from React, which we’ll use to store the entered values in our upcoming form fields. We also bring in `useRouter` and `Head` from Next which we’ll respectively use to route the user to another page when they’ve submitted the form, and to inject some SEO values in the page meta area.\n\nNext we bring in the `styles` CSS module for the same generic styling we used before in the previous articles.\n\nNow we’re onto the component itself. We set up a few `useState` variables, one each for our name, email, and message form fields we’ll be defining shortly:\n\n```js\nconst [name, setName] = useState('');\nconst [email, setEmail] = useState('');\nconst [message, setMessage] = useState('');\nconst router = useRouter();\n```\n\nWe’re also initialising Next’s built-in `useRouter()` function so that we can redirect our visitors to a ‘thank you’ page when they’ve submitted the form.\n\nWe’ve created a `handleSubmit()` function that you won’t be surprised to hear will handle the submission of our form, which we’ll define next.\n\nIn the component’s JSX, after we add a bit of page scaffolding, title, SEO meta data, etc. you can see we return a pretty standard HTML form. We’re attaching the `handleSubmit` function to the form’s `onSubmit` event, and then everything else is straightforward HTML form business. The only thing of note here is that we connect each of the `useState` getters and setters to their corresponding form fields’ `value` attributes and `onChange` events.\n\nSo now, when people update the form fields’ values, their input values will be stored in our component’s `state`. Pretty neat!\n\nWith that out of the way, let’s fill out the `handleSubmit` function:\n\n```js\n// ...other imports\n\n// bring in the new sendMail API function\nimport { sendMail } from '../../lib/api';\n\nconst Contact = ({ menuItems }) => {\n  // ...variables as before\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    const emailContent = `\n      Message received from \u003Cstrong>${name}\u003C/strong>. \n      Their email address is \u003Cstrong>${email}\u003C/strong>. \u003Cbr />\n      They'd like to know about...\n      ${message}\n    `;\n    const data = await sendMail(\n      'New message from website contact form',\n      emailContent\n    );\n\n    if (data.sent) {\n      // email was sent successfully!\n      router.push('/contact/thanks');\n    }\n  };\n\n  return (\n    \u003Cdiv className={styles.container}>\n      {/* ...rest of page and contact form */}\n    \u003C/div>\n  );\n};\n\nexport default Contact;\n```\n\nWe’ve brought in out `sendMail` function from the API file, and filled out the `handleSubmit` function. Walking through the function, the process looks like this:\n\n- We call the `evt.preventDefault()` to stop the form from refreshing the page.\n- Next, we construct a string message, `emailContent` which will represent the body of the email we’re going to send from WordPress.\n- After this, we call our `sendMail` API function, passing in an email subject and our `emailContent` email body, and `await` the return.\n- Once the function returns, we check the `sent` property and if it’s successfully sent it’ll be true, which means we can redirect our visitor to the `/contact/thanks` page via Next’s built-in router.\n\n**We haven’t actually created the `/contact/thanks` route** as it’s outside the aim of this article, but you could redirect your visitor’s anywhere at this point, an external URL, another internal page, or even not route them anywhere and just display a simple ‘thank you’ message.\n\n> **Note**: you could abstract some of the email body creation into a separate function in a utility/helper library to build up a suite of rich HTML email templates if you wanted. We’ve just opted for a plain ‘someone sent you a message on your website’ situation here for simplicity.\n\n## Sending contact forms with WordPress and Next.js\n\nAnd that’s it! With very little effort, we’ve managed to wire up our WordPress backend with our detached, Next-powered front-end to facilitate sending contact forms from our static sites via the handy WPGraphQL Send Email plugin.\n\n## Helpful links\n\nHere’s a reminder of the links used in this article:\n\n- [Netlify](https://www.netlify.com/)\n- [Netlify Forms](https://www.netlify.com/products/forms/) and the [official Forms documentation](https://docs.netlify.com/forms/setup/)\n- [WPGraphQL Send Mail](https://en-gb.wordpress.org/plugins/add-wpgraphql-send-mail/)\n- Part one of the series: [Configuring WordPress as a Headless CMS with Next](/blog/configuring-wordpress-as-a-headless-cms-with-nextjs)\n- Part two of the series: [Using WordPress as a Headless CMS with Next](/blog/using-wordpress-as-a-headless-cms-with-nextjs)\n- Part three of the series: [Create a Next.js RSS feed for your static website](/blog/create-a-static-website-rss-feed-with-nextjs)","src/content/blog/2021-09-03-sending-contact-forms-with-next-js-and-wordpress.mdoc","54a693d3a3e30b7d","2021-09-03-sending-contact-forms-with-next-js-and-wordpress.mdoc","2024-09-09-swot-analysis-choosing-javascript-framework",{"id":446,"data":448,"body":454,"filePath":455,"digest":456,"legacyId":457,"deferredRender":156},{"title":449,"description":450,"featured":145,"featuredimage":451,"date":452,"tags":453},"Choosing the perfect JavaScript framework with a SWOT analysis","Learn how to choose the perfect JavaScript framework by conducting a SWOT analysis of each option, including examples like React, Angular, and Vue.js","/img/blog-headers/choosing-js-using-swot.png",["Date","2024-09-09T18:06:11.293Z"],[150,151],"![Blog header image for choosing a JS framework using SWOT](/img/blog-headers/choosing-js-using-swot.png 'Blog header image for choosing a JS framework using SWOT')\n\n***This blog was produced in collaboration with [SEO Baguette](https://seobaguette.com/)***\n\nIn the world of web development, selecting the right JavaScript framework can make or break your project. With a plethora of choices available, each offering unique strengths and weaknesses, the decision can be daunting. To streamline this process, applying a SWOT analysis provides a strategic approach, ensuring you choose the most suitable framework for your specific needs.\n\n## Why Choosing the Right Framework Matters?\n\nThe choice of a JavaScript framework has significant implications on the efficiency, scalability, and maintainability of your project. The right framework can enhance development speed, improve code quality, and ensure future scalability. On the other hand, a poor choice might lead to compatibility issues, technical debt, and a lagging development pace. Among popular options like React, Angular, and Vue.js, each has its own set of advantages and challenges, making the selection process critical.\n\n## How to Conduct a SWOT Analysis to Choose the Right Framework?\n\nA SWOT analysis is a structured planning method used to evaluate the strengths, weaknesses, opportunities, and threats of a specific option or decision. When applied to selecting a JavaScript framework, it helps identify each framework's unique attributes and compare them against your project requirements.\n\n### What is SWOT Analysis?\n\nSWOT stands for Strengths, Weaknesses, Opportunities, and Threats. It is a strategic planning tool used to evaluate these four elements for a particular subject. By systematically identifying and analysing these factors, you can make a more informed decision about which JavaScript framework aligns best with your project requirements.\n\n### Benefits of Applying SWOT Analysis to Framework Selection\n\nUsing SWOT analysis allows you to systematically weigh the pros and cons of each framework. It helps in clarifying the alignment between the framework’s strengths and your project goals. By understanding the opportunities and threats, you can anticipate future challenges and benefits, ensuring a more strategic choice.\n\n### Examples of SWOT Analysis for Selecting JavaScript Frameworks\n\nHere are 3 [SWOT analysis examples](https://www.adobe.com/uk/express/learn/blog/swot-analysis) to enhance your understanding of the process:\n\n**SWOT Analysis: React.js**\n\n\u003Cdiv class=\"grid grid-cols-2\">\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Strengths:\u003C/p>\n- Large community with extensive resources.\n- High performance due to virtual DOM.\n- Reusable components for efficient development.\n\u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Weaknesses:\u003C/p>\n- Steep learning curve for beginners.\n- Heavy reliance on third-party libraries.\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Opportunities:\u003C/p>\n- Integration with modern tools (e.g., Next.js).\n- Expanding use in mobile development via React Native.\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Threats:\u003C/p>\n- Frequent updates may introduce breaking changes.\n- Competition from simpler frameworks like Vue.js and Svelte.\n  \u003C/div>\n\u003C/div>\n\nFor a detailed comparison, check out the article [React, Angular and Vue compared](https://robkendal.co.uk/blog/2021-06-07-should-you-learn-react-angular-or-vue/), which should help you learn valuable insights to inform your decision.\n\n**SWOT Analysis: Angular**\n\n\u003Cdiv class=\"grid grid-cols-2\">\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Strengths:\u003C/p>\n- Comprehensive framework with built-in features.\n- Strong scalability for large applications.\n- Backed by Google for long-term support.\n\n\u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Weaknesses:\u003C/p>\n- Complex and verbose, with a steep learning curve.\n- Less flexible compared to other frameworks.\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Opportunities:\u003C/p>\n- Attractive for large organisations and enterprise-level adoption.\n- Alignment with modern practices like PWAs and SSR.\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Threats:\u003C/p>\n- Slower adoption among smaller projects.\n- Competition from simpler frameworks like Vue.js and Svelte.\n\n  \u003C/div>\n\u003C/div>\n\nFor an example of integration, check out our guide on [how to build a fullstack Astro website with GraphQL](https://robkendal.co.uk/blog/how-to-build-astro-site-with-graphql/).\n\n\n**SWOT Analysis: Vue.js**\n\n\u003Cdiv class=\"grid grid-cols-2\">\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Strengths:\u003C/p>\n- Simple, easy to integrate, with a gentle learning curve.\n- Growing community and ecosystem.\n- Versatile for various applications.\n\n\u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Weaknesses:\u003C/p>\n- Smaller ecosystem compared to React and Angular.\n- Lacks significant corporate backing\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Opportunities:\u003C/p>\n- Increasing popularity, especially in Asia.\n- Potential expansion into new markets and industries.\n\n  \u003C/div>\n  \u003Cdiv class=\"border p-4\">\n  \u003Cp class=\"text-center\">Threats:\u003C/p>\n- Strong competition from React and Angular.\n- Slower growth due to limited corporate support.\n\n  \u003C/div>\n\u003C/div>\n\nDevelopers can boost user engagement by adding a multi-image carousel to their projects. Check out our guide on [how to build a multi-image carousel in React and Tailwind](https://robkendal.co.uk/blog/how-to-build-a-multi-image-carousel-in-react-and-tailwind/).\n\n## Applying SWOT Analysis to Your Project\n\n![typewriter with Vue.js on it](/img/vue.js.png)\n\nWhen selecting a front-end framework for your project, begin with a SWOT analysis. If you're looking at [headless contact form WordPress and Next.js](https://robkendal.co.uk/blog/2021-09-03-sending-contact-forms-with-next-js-and-wordpress/), look into how to implement contact forms with these technologies.\n\n### Scope and Complexity\n\nWhen evaluating the scope and complexity of your project, it's essential to determine which framework aligns best with your needs. Larger projects generally benefit from Angular's extensive and comprehensive structure, which is well-suited for complex applications requiring robust features and scalability. On the other hand, smaller projects may find Vue.js more advantageous due to its simplicity and ease of integration, allowing for quicker development without a steep learning curve.\n\n### Performance Needs\n\nPerformance requirements are critical in the selection process. Assess the performance demands of your application to choose a framework that optimises speed and efficiency. For high-performance applications, React is often preferred as it excels in rendering speed and state management, making it ideal for dynamic user interfaces.\n\n### Development Speed\n\nLastly, consider your development timeline and available resources. Selecting a framework that aligns with your team's skills and capabilities can significantly impact productivity. If your team is already familiar with a specific framework, sticking with it may accelerate development, while adopting a new framework might require additional training and adjustment time.\n\n### Align Framework Strengths with Project Goals\n\nWhen selecting a framework, it's essential to consider scalability to ensure it can handle future growth and project expansion without complications. A framework like Angular can provide a solid foundation for large-scale applications, but React’s component-based architecture offers remarkable flexibility, allowing for quick updates and changes as the project evolves.\n\nThis adaptability ensures that your team can efficiently respond to new requirements or unforeseen challenges.\n\nAdditionally, community and ecosystem support play an important role in your decision. Ensure that the framework you choose has a robust support network, including a wealth of resources, plugins, and tools, which can significantly ease the development process and enhance your project’s longevity.\n\n### Mitigate Weaknesses and Threats\n\nWhen deciding on a framework, it's vital to assess the learning curve associated with it, especially if your team lacks experience. A steeper learning curve can pose challenges in training and onboarding, potentially slowing down development timelines.\n\nIn such cases, opting for a more straightforward framework may alleviate these obstacles, allowing your team to ramp up quickly and efficiently.\n\nMoreover, consider the long-term viability of the framework. Selecting one with a strong track record of support and stability is essential to mitigate potential disruptions in future development.\n\nA framework that is actively maintained and updated not only ensures access to ongoing improvements but also helps protect your investment by reducing the risk of obsolescence in a rapidly evolving tech landscape.\n\n### Consider Future Opportunities\n\nWhen selecting a framework, consider alignment with future career growth and market demand. For instance, React has been steadily increasing in popularity, making it a valuable skill for developers seeking to enhance their employability and project opportunities.\n\nAdditionally, assessing a framework's capacity for integration with emerging technologies is necessary. A framework that can easily pair with new tools, such as machine learning libraries or progressive web app technologies, will position your team to leverage innovations and maintain a competitive edge in the ever-evolving tech landscape.\n\nBy choosing a framework that aligns with these future trends, you can ensure that your development efforts not only meet current needs but also pave the way for continued success.\n\n### Making an Informed Decision\n\nWhen evaluating various frameworks, you need to balance their strengths and weaknesses against your project's specific requirements. Each framework offers unique advantages, such as speed, scalability, or a robust community, but may also present challenges like a steep learning curve or limited versatility.\n\nReviewing case studies and examples from similar projects can provide valuable insights into how these frameworks perform in real-world scenarios, revealing their suitability for your objectives.\n\nFurthermore, consulting with stakeholders—including key team members, developers, and project managers—ensures that the decision-making process is collaborative.\n\nEngaging these individuals not only fosters alignment with the project's goals but also secures buy-in, which is essential for a successful implementation. Through this multifaceted approach, teams can make informed choices that maximise the benefits of their selected framework while minimising potential drawbacks.\n\n## After Choosing the Right JavaScript Framework\n\n![Wall of code on a screen](/img/code-wall.png)\n\nOnce you have selected the optimal JavaScript framework for your project, the next crucial step is to transition into the implementation phase.\n\n### Starting with Prototypes\n\nTesting the chosen framework with a small prototype is an important step before proceeding with full implementation. Prototyping allows your team to explore the framework's capabilities, revealing any potential issues early on. This approach enables you to experiment with key functionalities and assess how well the framework aligns with your project's demands without committing extensive resources.\n\n### Continuous Evaluation\n\nRegularly assessing the framework's performance throughout the project is essential for long-term success. By remaining flexible and ready to adapt, your team can respond to challenges as they arise, ensuring that the framework continues to meet evolving requirements. This iterative evaluation not only helps in identifying performance bottlenecks but also aids in optimising workflows, ultimately leading to a more robust and efficient development process.\n\n## Conclusion\n\nChoosing the right JavaScript framework is pivotal to your project's success. By employing a SWOT analysis, you can make a strategic and informed decision that aligns with both immediate project needs and long-term goals. This approach not only supports efficient development but also ensures your project remains scalable and sustainable in the future.\n\nTaking the time to carefully consider your options will pay dividends in the successful execution and maintenance of your project. As you move forward, continue to evaluate and adapt, ensuring your framework choice supports both current and evolving requirements.","src/content/blog/2024-09-09-swot-analysis-choosing-javascript-framework.mdoc","bedd2fbe2c6f4409","2024-09-09-swot-analysis-choosing-javascript-framework.mdoc","build-a-restful-node-api-server-using-json-and-typescript",{"id":458,"data":460,"body":468,"filePath":469,"digest":470,"legacyId":471,"deferredRender":156},{"title":461,"description":462,"featured":145,"featuredimage":463,"date":464,"tags":465},"Build a restful Node API server using JSON and TypeScript","In this updated tutorial article, we'll build a simple Node API server with TypeScript that uses JSON files to serve our data.","/img/node-api-server-with-typescript.png",["Date","2023-08-10T23:00:00.000Z"],[466,467,226],"Node","TypeScript","![](/img/node-api-server-with-typescript.png)\n\nA while ago I wrote a popular article on [how to build a RESTful Node API server.](/blog/how-to-build-a-restful-node-js-api-server-using-json-files) This and it's [accompanying GitHub repo](https://github.com/bpk68/api-server-starter), went down well and even became part of the curriculum in a US university course!\n\nHowever, times and technology move on. After revisiting the repo and the code, I decided to revamp and rewrite from scratch, this time using not only the latest version of Express, but using a slightly different architecture and structure in the form of the controller and routes pattern. Also, for you TypeScript fans out there the new and updated version is fully type aware and is written entirely in TypeScript. Good times!\n\nYou can check out the [Node API starter kit with TypeScript on GitHub](https://github.com/bpk68/api-server-starter-ts), but for now, let's dive in!\n\n## 1. Node API project setup\n\nI like to start any project (especially smaller ones like this skeleton Node API server) by installing dependencies we'll need and defining a skeleton folder and files structure. With that in mind, let's create a folder on your machine where the project will live and kick things off with a package.json file:\n\n```javascript\npnpm init\n```\n\n> We'll be using pnpm as the package manager here. If you've not installed or used pnpm before, then head over to [pnpm.io ](https://pnpm.io)and get it installed on your machine. Alternatively, you can use npm or yarn just as easily if you prefer.\n\nNext, let's get a folder structure in place like this:\n\n```javascript\n/projectfolder\n--/data\n  --users.json\n--/server\n--/--/controllers\n        --types.ts\n        --users.ts\n--/--/routes\n        --index.ts\n        --users.ts\nserver.ts\npackage.json\ntsconfig.json\n```\n\n### Installing dependencies and build scripts\n\nWith pnpm ready to go and our skeleton file structure in place, let's install some dependencies and add the build scripts to the package.json file.\n\nIn your `package.json` file, add the following JSON:\n\n```json\n\"scripts\": {\n  \"start\": \"nodemon server.ts\"\n},\n```\n\nThis is all we need for now, so let's move onto our dependencies. Run the following commands, separately, in your console:\n\n```javascript\npnpm add -D @types/express @types/node ts-node typescript\n```\n\nThis command will add some dev dependencies, namely some TypeScript types information for Express and Node, as well as TypeScript itself, and finally, ts-node, which is a library that allows us to run TypeScript in Node environments without having to precompile it first.\n\nNext, let's add some regular dependencies like this:\n\n```javascript\npnpm add express module-alias nodemon\n```\n\nHere we're adding a couple of packages:\n\n- **Express**, which is a web application framework that offers us lots of HTTP utility methods and is the defacto standard for creating node-based API's.\n- **Nodemon**, (optional) a file-watcher that helps keep an eye on our files, reloading things if we change them during development.\n- **Module-alias**, again optional but we'll use this handy package to save us from having to type some ugly file paths for our module imports. We'll cover this later, but it's not a requirement for this project.\n\n### Configuring TypeScript\n\nFinally, as part of the project set up, we need to give TypeScript some solid defaults to work with. Open the `./tsconfig.json` file and add the following:\n\n```json\n{\n  \"compilerOptions\": {\n    \"forceConsistentCasingInFileNames\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"./\",\n    \"target\": \"ESNext\",\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"sourceMap\": true,\n    \"lib\": [\"ESNext\"],\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@controllers/*\": [\"./server/controllers/*\"],\n      \"@routes/*\": [\"./server/routes/*\"],\n      \"@data/*\": [\"./data/*\"]\n    }\n  },\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n### Adding some basic user data\n\nOur Node API server with TypeScript is founded on its ability to deal with data stored in JSON files. For us, we're going to start with some simple user data, so open up the `./data/users.json` file and flesh it out:\n\n```json\n{\n  \"users\": [\n    {\n      \"name\": \"king arthur\",\n      \"password\": \"password1\",\n      \"profession\": \"king\",\n      \"id\": 1\n    },\n    {\n      \"name\": \"rob kendal\",\n      \"password\": \"password3\",\n      \"profession\": \"code fiddler\",\n      \"id\": 2\n    },\n    {\n      \"name\": \"ash ketchum\",\n      \"password\": \"pikapika\",\n      \"profession\": \"pokemon botherer\",\n      \"id\": 3\n    }\n  ]\n}\n```\n\nNothing too fancy, just some simple JSON data about a typical user including their name and profession.\n\n## 2. Building the new server.ts file\n\nWith our project structure and dependencies in place, let's move on to building out our API server. Open up the `./server.ts` file and paste the following into it:\n\n```typescript\nimport 'module-alias/register';\nimport http from 'http';\nimport express, { Express } from 'express';\nimport routes from '@routes/index';\n\nconst router: Express = express();\n\nrouter.use(express.urlencoded({ extended: true }));\nrouter.use(express.json());\n\nrouter.use((req, res, next) => {\n  // set the CORS policy\n  res.header('Access-Control-Allow-Origin', '*');\n  // set the CORS headers\n  res.header(\n    'Access-Control-Allow-Headers',\n    'origin,X-Requested-With,Content-Type,Accept,Authorization'\n  );\n  // set the CORS method headers\n  if (req.method === 'OPTIONS') {\n    res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE');\n    return res.status(200).json({});\n  }\n  next();\n});\n\nrouter.use('/', routes);\n\n/** Error handling */\nrouter.use((_, res) => {\n  const error = new Error('not found');\n  return res.status(404).json({\n    message: error.message,\n  });\n});\n\n// Start that server\nconst httpServer = http.createServer(router);\nconst PORT: string | number = process.env.PORT ?? 8080;\nhttpServer.listen(PORT, () =>\n  console.log(`API server alive and kicking on port ${PORT}`)\n);\n```\n\nAlthough this is a relatively small file, there's a lot going on in it, so let's break it down...\n\n### The imports\n\nRight at the start, we bring in some dependencies:\n\n```javascript\nimport 'module-alias/register';\nimport http from 'http';\nimport express, { Express } from 'express';\nimport routes from '@routes/index';\n```\n\nThe very first line where we `import module-alias/register` is an important line if you want to be able to use aliased paths for your module imports. There's an entire section coming up where we'll discuss this, but for now, just note that if you want to use imports like import thing from '@routes/myawesomefile' then you'll need this import right at the top of your project's entry point.\n\nWe also bring in the http utility from the built-in http module, then Express (both the main package and the Express type for TypeScript) and finally our routing information from the `@routes/index` file — we'll create this later on so don't worry about it for now.\n\n### Setting up the Express router\n\nWith our imports done, we can create an instance of the Express framework, and then set up some encoding rules to make sure the data we receive is encoded in the same way as is described in the OPTIONS argument that's sent before the main API request.\n\n```typescript\nconst router: Express = express();\n\nrouter.use(express.urlencoded({ extended: true }));\nrouter.use(express.json());\n```\n\nWe also make use of the `json()` method so that our API server will parse JSON requests.\n\n### Configuring CORS\n\nCORS ([Cross-Origin Resource Sharing from MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)) can be a horrendously frustrating part of development life. It helps to restrict the origins from which HTTP requests are made. However, in doing so, it can thwart many a local development environment by cutting off access to some legitimate requests.\n\nThat said, it is a necessary and important part of any API set up as it helps prevent bad actors from making requests from unauthorised URLs or origins.\n\nOur little server will be no different so let's set up CORS for our API server now:\n\n```javascript\nrouter.use((req, res, next) => {\n  // set the CORS policy\n  res.header('Access-Control-Allow-Origin', '*');\n  // set the CORS headers\n  res.header(\n    'Access-Control-Allow-Headers',\n    'origin,X-Requested-With,Content-Type,Accept,Authorization'\n  );\n  // set the CORS method headers\n  if (req.method === 'OPTIONS') {\n    res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE');\n    return res.status(200).json({});\n  }\n  next();\n});\n```\n\nThis is a simple portion of code that basically sets which origins our API server will allow access from, which types of requests (e.g. what's been set in the header), and then what sorts of methods we'll allow — e.g. here we're allowing the four main CRUD methods, GET, PUT, POST, and DELETE.\n\n> Note that in our example here, we're allowing all origins as denoted by the '\\*' symbol. In production, you'll definitely want to restrict calling of this API to perhaps just your app's url(s), depending on your needs!\n\n### Adding in the routes and handling errors\n\nOf course, our API server will be of no use if we don't let it handle some routes. That's where the following line comes in:\n\n```javascript\nrouter.use('/', routes);\n```\n\nWe've imported our routes object right at the start of the file and this will be further broken down (as we'll see later on) into sub-routes, each with their own controller and router handling logic. In our main server file, however, we just need to let the server know that anything starting with `/` will be handled by the imported routes object.\n\nNext up, we'll cater for any routes that aren't handled above:\n\n```javascript\n/** Error handling */\nrouter.use((_, res) => {\n  const error = new Error('not found');\n  return res.status(404).json({\n    message: error.message,\n  });\n});\n```\n\nEssentially, what we're saying here is 'any route that isn't already catered for, return an error message and a 404 status'.\n\nThere's lots more you could do here to expand on it or handle different types of errors and that's probably quite a good idea to do in a larger app, or as your app begins to scale. For now, however, we can start simply and handle the most basic error where a request has tried to call a route that doesn't exist.\n\n### Starting the server\n\nFinally, we're ready to kick off the server and get things running. This last bit of code creates an instance of a http server, creates a port for the server to run on, and finally starts the server:\n\n```typescript\n// Start that server\nconst httpServer = http.createServer(router);\nconst PORT: string | number = process.env.PORT ?? 8080;\nhttpServer.listen(PORT, () =>\n  console.log(`API server alive and kicking on port ${PORT}`)\n);\n```\n\nWe try to use a PORT option that might be present in an environment variable, hence the process.env.PORT part, but if one isn't available, then the default port is simply '8080'.\n\n## 2a. Module aliases\n\nBefore we go ahead with the meat and potatoes of the API server, we need to quickly go over module path aliasing. By default, you'll always need to import a local module or package from another file using a relative path. This is fine when your files are close together.\n\nHowever, when they're separated by different levels or in a larger, more complex folder structure, then you can end up with ugly (and confusing) import statements like this:\n\n```javascript\nimport { SomeThing } from '../../../../path/to/file';\n```\n\nNot the worst thing in the world, but it gets messier the more of these you have and also creates a headache when you want to migrate or move files!\n\nIt's much nicer to be able to do something like this:\n\n```javascript\nimport { SomeThing } from 'module/file';\n```\n\nSome bundlers and code packagers will do this for you. If you've used Rollup, Vite or even Create React App, then you'll have lots of wonderful support from bundlers like Webpack that can offer some of this module path aliasing out of the box or with a simple config setting.\n\nTypeScript also has a nice idea of paths and in fact, we've already set this up earlier in our process. Check out the `./tsconfig.json` file towards the end of the file:\n\n```json\n\"paths\": {\n  \"@controllers/*\": [\"./server/controllers/*\"],\n  \"@routes/*\": [\"./server/routes/*\"],\n  \"@data/*\": [\"./data/*\"]\n}\n```\n\nHere, we've added a couple of helper routes so that wherever we have `@controllers/any_file_path_here` this will be replaced by TypeScript with `./server/controllers/any_file_path_here`. Neat!\n\n> I've used little '@' symbols here because it looks pretty cool and I like it, but it's not part of the syntax, you could use whatever you like or just leave it as 'controllers/'.\n\nUnfortunately, whilst we can configure this from a TypeScript point of view, Node doesn't know what to do with this. Your options are to implement some sort of middle man transpiler to handle these paths for us and then run the server, or we can use the handle module-aliases package, which handily we installed earlier!\n\nThe only downside (and it's a small downside) is that we have to duplicate our path aliases into our package.json file as outlined here:\n\n```json\n\"_moduleAliases\": {\n  \"@controllers\": \"./server/controllers\",\n  \"@routes\": \"./server/routes\",\n  \"@data\": \"./data\"\n},\n```\n\nWe add in the extra \"\\_moduleAliases\" property into the package.json file and then everything should work nicely and we can use our funky, shorter paths 👍.\n\n[![](/img/cta/cta-remote-dev-jobs_banner.png)](https://remotedevjobs.uk 'Find your next fully remote deb job in the UK')\n\n## 3. Mapping the routes\n\nWith our server prepped and ready to go, we need to feed it some routes to handle and serve. When someone requests an API endpoint such as https://api.domain.com/users/123 we need to have a matching route within our server that can listen for and accept the route, then provide some sort of meaningful response to the requestee.\n\nIn our case, we're going to be loading and saving JSON data about users, such as username, password, name, etc. For that, we need to define a series of user endpoint routes and we'll do that within the `./server/routes/users.ts` file:\n\n```typescript\nimport type { Router } from 'express';\nimport {\n  getUser,\n  getUsers,\n  addUser,\n  updateUser,\n  deleteUser,\n} from '@controllers/users';\n\nconst userRoutes = (router: Router) => {\n  router.get('/users', getUsers);\n  router.get('/user/:id', getUser);\n  router.post('/users', addUser);\n  router.put('/user/:id', updateUser);\n  router.delete('/user/:id', deleteUser);\n\n  return router;\n};\n\nexport default userRoutes;\n```\n\nFirst, we're bringing in the Router type from Express as we'll be passing in a router object to our user routes handling code in a moment. Next, we import some common CRUD-style handler functions from our controller, which we'll define in the next part.\n\nWe've got a getUser function which will fetch and return a single user, and then `getUsers` which will, in turn, fetch us multiple users. After that, we handle adding a new user, updating a user, and deleting a user from our files.\n\n> We haven't touched on the concept of a controller yet, but a controller's purpose is to deal with the data handling part of the request. The routes and router are designed to merely handle the incoming request and route it to the appropriate place. Once a route has been captured, the controller is called upon to do something meaningful whether that's fetching some data, or manipulating it in some way before saving it against a data store. In our case, this is a JSON file stored on disk.\n\nNext, we create a `userRoutes` function which accepts an instance of a Router object, which is an Express item that can be used to define routes. That's what we do next. We call `router.[method]` where 'method' is the request type (e.g. GET or POST), passing it a route we want to handle (e.g. '/users') and the function from our controller which will deal with the data business for that route.\n\nWhere we have something like `:id` this is a route parameter. It will be substituted with a real world value when the API route is called. We can use this within our controller to access this substituted value and use it to access specific data. For example, in the route `/user/:id` the real API would be called like `/user/AFC34OI` where the value `AFC340I` is the 'id' value of a user and we can use it to search a database or similar for said user.\n\nAfter we add a bunch of supporting CRUD-like routes and their controller handlers, we return the updated router object from the function.\n\n### Adding user routes to our main router\n\nDoing the above is not quite enough to have the API handle those routes for us. We need to connect the user route handlers to the main Express router.\n\nOpen up the `./server/routes/index.ts` and add in the following:\n\n```javascript\nimport express from 'express';\n\n// Import individual route profiles from controllers\nimport usersRoute from '@routes/users';\n\nconst router = express.Router();\n\n// Pass our router instance to controllers\nrouter.use('/users', usersRoute(router));\n\nexport default router;\n```\n\nWe pull in our usersRoute here and this is where you'd add in any other additional routes that you create later down the line.\n\nNext, we create an instance of the Express Router. In the next line down we fire off the `router.use()` function and supply it with our base users route, `/users` and pass it the handling function, usersRoute which itself is passed the express router.\n\nAny route that begins with `/users` will be handled by our `usersRoute` handler.\n\nFinally, we export the router that we consumed in our `server.ts` file earlier. All done, nice and simple.\n\n## 4. Creating our controller\n\nThe controller is where our data handling will occur. It doesn't know about what route it's serving, just that it has a specific job to fetch or update certain data and respond to the request with that data in a particular shape or format (e.g. JSON, text or XML).\n\nFor us, we'll start simply by showing how handle fetching all the users from the store. Open up the `./server/controllers/users.ts` file and add in the following:\n\n```typescript\nimport type { Request, Response } from 'express';\nimport type { UserList, User } from './types';\nimport fs from 'fs/promises';\n\nconst dataPath = 'data/users.json';\n\nexport const getUsers = async (req: Request, res: Response) => {\n  try {\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n\n    res.status(200).send(JSON.parse(data));\n  } catch (error) {\n    res.status(500).send('An error occurred when fetching the users');\n  }\n};\n\nexport default {\n  getUsers,\n};\n```\n\nWe import some types from Express and our locally defined ones (see the next section) and then the `fs` file handling package from Node. This will help us deal with reading from and writing to our local files.\n\nWith getUsers we use the `fs` package to asynchronously read from the `users.json` file and send it straight back to the request via the res or 'response' object. If we're successful, we set the status to 200 (i.e. a successful response), and parse the users data into JSON for the response.\n\nFinally, we can export the getUsers function as part of a default object.\n\n> Notice that the main body of code in getUsers is wrapped in a try catch block. If an error occurs, it's captured here and an appropriate status is returned (a 500 code) along with a simple string message. There's lot of different error handling and logging approaches, but this is fine for a simple app like ours.\n\n## User types for TypeScript\n\nIn the last section, you'll see we imported some local types, namely UserList and User. You can add these or change them to your needs, but open up `./server/controllers/types.ts` and add in the following:\n\n```typescript\nexport interface User {\n  name: string;\n  password: string;\n  profession: string;\n  id: number;\n}\n\nexport interface UserList {\n  users: User[];\n}\n```\n\nNothing too fancy or complex, but notice how the structure of the data here maps to that of our users JSON data from the beginning of the article.\n\n## 5. Testing the API server\n\nWith our server all put together, the only sensible thing to do is to fire up the server and test it! Save all your files and then open up your nearest and favourite console or terminal and enter the command `pnpm start` and you should see the following:\n\n```javascript\nAPI server alive and kicking on port 8080\n```\n\nNothing too exciting here. Instead, head into a simple browser and navigate to `http://localhost:8080/users/` and what you should see now is a list of our available users from our `./data/users.json` file. Alternatively you could use an app like Postman or Rapid API to check your own API too and they'll work just as well.\n\n## 6. Extending the API server with CRUD\n\nWe've missed a few parts out of the users.ts file for brevity, but here is the entire file for completeness. Whilst long, it should be fairly straightforward to scan and understand and a lot of the code is very similar, especially around updating and deleting users.\n\n```typescript\nimport type { Request, Response } from 'express';\nimport type { UserList, User } from './types';\nimport fs from 'fs/promises';\n\nconst dataPath = 'data/users.json';\n\nexport const getUsers = async (req: Request, res: Response) => {\n  try {\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n\n    res.status(200).send(JSON.parse(data));\n  } catch (error) {\n    res.status(500).send('An error occurred when fetching the users');\n  }\n};\n\nexport const getUser = async (req: Request, res: Response) => {\n  try {\n    let user = {};\n    const userId = req.params.id;\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n\n    if (data.length > 0) {\n      const allUsers: UserList = JSON.parse(data);\n      user = {\n        ...allUsers.users.find((user) => user.id === Number(userId)),\n      };\n    }\n\n    res.status(200).send(user);\n  } catch (error) {\n    res\n      .status(500)\n      .send(\n        'An error occurred when fetching the user with id ' + req.params.id\n      );\n  }\n};\n\nexport const addUser = async (req: Request, res: Response) => {\n  try {\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n    const allUsers: UserList = JSON.parse(data);\n    const newUser: User = req.body;\n\n    // Note: this isn't ideal for production use.\n    // ideally, use something like a UUID or other GUID for a unique ID value\n    const newUserId = Date.now();\n\n    newUser.id = newUserId;\n    allUsers.users.push(newUser);\n\n    await fs.writeFile(dataPath, JSON.stringify(allUsers, null, 2), {\n      encoding: 'utf8',\n    });\n\n    res.status(200).send(newUser);\n  } catch (error) {\n    res.status(500).send('An error occurred when adding the new user');\n  }\n};\n\nexport const updateUser = async (req: Request, res: Response) => {\n  try {\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n    const allUsers: UserList = JSON.parse(data);\n    const userId: number = Number(req.params.id);\n    const userToUpdate: User = req.body;\n\n    allUsers.users = allUsers.users.map((user) =>\n      user.id === userId ? { ...user, ...userToUpdate } : user\n    );\n\n    console.log(allUsers);\n\n    await fs.writeFile(dataPath, JSON.stringify(allUsers, null, 2), {\n      encoding: 'utf8',\n    });\n\n    res.status(200).send(allUsers);\n  } catch (error) {\n    res\n      .status(500)\n      .send('An error occurred when updating the user with id' + req.params.id);\n  }\n};\n\nexport const deleteUser = async (req: Request, res: Response) => {\n  try {\n    const data = await fs.readFile(dataPath, {\n      encoding: 'utf8',\n    });\n    const allUsers: UserList = JSON.parse(data);\n    const userId: number = Number(req.params.id);\n\n    allUsers.users = allUsers.users.filter((user) => user.id !== userId);\n\n    await fs.writeFile(dataPath, JSON.stringify(allUsers, null, 2), {\n      encoding: 'utf8',\n    });\n\n    res.status(200).send(allUsers);\n  } catch (error) {\n    res\n      .status(500)\n      .send('An error occurred when deleting the user with id' + req.params.id);\n  }\n};\n\nexport default {\n  getUsers,\n  getUser,\n  addUser,\n  updateUser,\n  deleteUser,\n};\n```\n\n> As a challenge you could look to extend this to handle some other user editing options, or refactor it to reduce some of the similar code across the different functions.\n\n## Enjoy your fully functional Node-based API server\n\nThere's lots more you could add to extend this, such as authentication handling, talking to a database, different routes, and so on. As it stands, we've got a fully functional API server base that will happily serve you some information from a JSON file store.\n\nYou can [visit the GitHub repository for the starter API server](https://github.com/bpk68/api-server-starter-ts) to download, checkout or fork to your heart's content.\n\nIf there's anything I've missed or that you'd like to know more about, let me know in the comments or shoot me an email to me\\[at]robkendal.co.uk.","src/content/blog/Build-a-restful-Node-API-server-using-JSON-and-TypeScript.mdoc","3f52912bc25920c2","Build-a-restful-Node-API-server-using-JSON-and-TypeScript.mdoc","are-tech-tests-still-relevant-in-todays-hiring-landscape",{"id":472,"data":474,"body":481,"filePath":482,"digest":483,"legacyId":484,"deferredRender":156},{"title":475,"description":476,"featured":145,"featuredimage":477,"date":478,"tags":479},"Are tech tests still relevant in today's hiring landscape?","After applying for development jobs, I've been thinking a lot about how relevant are tech tests? Are they still a useful tool to make a hiring decision?","/img/nathan-dumlao-572049-unsplash.jpg",["Date","2019-02-05T15:30:32.539Z"],[480,177],"Controversial","![Row of seats in a lecture hall](/img/nathan-dumlao-572049-unsplash.jpg)\n\nI recently wrote about [job hunting in today's tech landscape](/blog/job-hunting-in-the-tech-industry-tips-tricks-and-experiences 'Job hunting in the tech industry') (mainly development) and shared my experiences, tips and tricks. Following on from that article and several discussions with ex-colleagues and other friends who are now in a job hunting position, the topic always drifts back to one stage in the hiring process in particular: the dreaded technical tests..._queue the foreboding music_.\n\nThis got me to thinking: 'how relevant are tech tests in today's market, and are they still a useful tool to make a hiring decision?'\n\n![person](https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Helloquence](https://unsplash.com/@helloquence?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n## The problem with tech tests\n\nAt some point, someone decided that technical tests should be slid into the developer hiring process as a good measure of the candidate in question's ability to write some code in a relevant language - to gauge their technical knowledge.\n\nThe problem is, most tech tests don't seem quite thought through and can suffer from a number of problems:\n\n- They're used as a sole (or very large bias) measure in the hiring decision\n- They don't have good skills coverage or highlight language depth\n- They're cursory at best\n- They're too big of an ask\n- They don't recognise nor measure other vital skills, such as empathy, communication or (sometimes) even logic and problem solving.\n- They are unforgiving, strict and don't represent how it works in the real-world\n\n## When good tech tests go bad\n\nThere are other problems, of course, as with any process or its parts. But there are a couple of points in the previous list that I'd like to highlight as I believe they fundamentally undermine the very goal that tech tests seek to achieve.\n\n### Cursory technical tests\n\nI've seen tests that were used in a full-stack development role and the test was to add some properties to a C# class, hook them up to a couple of text boxes on the front-end and have them submit to a form of some nature.\n\nThis particular test was limited to about 40 mins. More than enough time. But, more than enough time for what? To shove buttons on a form in .Net, POST the value and stuff it into some class properties?!\n\nWith such a simple, lightweight test on offer, you could argue that there's no point in having it. It barely scrapes the surface of any level of skill beyond beginner C# tutorials and it takes up 40 minutes that you could have spent showing the candidate around, chatting about their approach to solving big problems or working in a team.\n\nIf you're going to have a test, make it relevant to the job's application and _substantial_ enough to provide data that you're looking for.\n\n### Large-scale, unpaid projects\n\nOn the flip side to being too superficial come those tests that are so monolithic that they're practically projects in their own right. But if a bigger, meatier project-style test can eliminate the problems of a superficial one, that's got to be better, right?\n\nWell, yes and no...\n\nYes, you should be able to see a lot more scope of what the candidate is capable of, but the problem with these test types isn't their size. The problem is that it is quite common to expect an applicant to spend many hours of their time **for free** to do them.\n\n![woman](https://images.unsplash.com/photo-1530858176730-cb20dac36fe1?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [rawpixel](https://unsplash.com/@rawpixel?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\nYes, they're applying _to you,_ for a job with _your_ company, but the process is still a two-way street. Plus, they might be applying to several different positions and multiples of five or six hours of tests soon add up - especially when you're asking them to basically write a mini app for you for _nothing._\n\nDesigners have often been placed in this position by prospective clients who are (however unwittingly) quick to undervalue their skills and time by demanding copious amounts of spec-work; work undertaken on a speculative basis that they might 'win the tender', 'get the job', 'nail the pitch'.\n\nThe design industry pushed back at this and the [No!Spec website](https://www.nospec.com/) encapsulates this movement perfectly.\n\nThere's nothing wrong in seeing how someone works, but don't ask them to provide too much of their time for naught, just for the prospect of a final interview.\n\n### Focus placed on raw technical skills alone\n\nAgain, whilst the literal goal of a technical test is to solve a given problem, the underlying objective should always be to see how someone approaches a challenge, how do they work when solving a problem.\n\nThis knowledge should be gained largely from discussions around those very topics: projects they've worked on, scenarios they've found themselves in, and so on. The technical test is then free to back up and reinforce those discoveries, in additional to showing off some level of competence at the thing in question.\n\nThe hiring decision, for me, has everything to do with the following two qualities:\n\n1. How well will this person fit within our company - can we all work together?\n2. Can this person learn, develop and grow?\n\nThis can't apply to all industries, obviously. I wouldn't expect someone to be hired as a heart surgeon based solely on a plucky attitude and can-do spirit. But a seasoned developer with an analytical mind shouldn't be passed over, just because she doesn't know ReactJS.\n\nThis great (paraphrased) quote I found on Twitter sums it up:\n\n> 'You can learn a new language/framework/whatever,  \n> but you can't un-dick a person'\n\n### Strict test conditions exclude real-world practices\n\nI've also seen (and experienced) tests with very strict rules to follow. These ranged from 'no internet access', to time limits not paired to the level of work required for the test, to crippling, prescriptive coding standards.\n\nYes, you need some sort of limits - time-boxing the test, for example - but by placing unrealistic restrictions on tests that otherwise wouldn't (or _shouldn't_) exist in the real-world, we narrow our view of that applicant in a real-world scenario.\n\nI mean, who hasn't looked for help on [Stack Overflow](https://www.stackoverflow.com) or referred back to a set of docs because they can't possibly keep the entire JestJS api in their head?\n\n## Where tech tests can help\n\nWhere they _can_ help immensely is giving an overview, an objective assessment of a candidate's approach to problem solving and task management _beyond_ literal attributes of their code skills - how they comment their code, or how efficient they are in writing functions, their coding style, etc.\n\nThey can highlight strengths and weaknesses in a language or a framework, or even an approach to a design pattern (SOLID, DRY), but the results of a technical test shouldn't determine the lone success of a candidate.\n\nGood tech tests should be:\n\n- Deep enough to gather the relevant data for which they exist\n- Reimbursing the candidate for their time and expenses (for larger tests)\n- Taken as a part-measure of a candidate's profile - not the final word\n- Given fair boundaries within which to work, not confined to unrealistic rules\n- Not viewed as the only indicator of a particular level of skill\n\n## Tech tests still have a place, _but..._\n\nTechnical tests have their place and can **work well to round out the overall picture of a person**, but they're a delicate balance to get right: big enough to be worth the effort; small enough to not consume the hiring process; designed to work well as part of the bigger picture.\n\nAnd don't forget there are a bevy of other means to assess technical skill these days, whether it's a GitHub portfolio, NPM contributions, or websites worked on that can be talked through to highlight the decision making and development process.","src/content/blog/are-tech-tests-still-relevant-in-todays-hiring-landscape.mdoc","b59d1511de5cfb03","are-tech-tests-still-relevant-in-todays-hiring-landscape.mdoc","configuring-wordpress-as-a-headless-cms-with-nextjs",{"id":485,"data":487,"body":493,"filePath":494,"digest":495,"legacyId":496,"deferredRender":156},{"title":488,"description":489,"featured":156,"featuredimage":490,"date":491,"tags":492},"Configuring WordPress as a headless CMS with Next.js","In part 1 of the Getting Started with Next.js, we're looking at how to use configure WordPress as a headless CMS to use with Next.js using WPGraphQL","/img/next-js-with-wordpress-part-1-blog-post.png",["Date","2020-09-06T09:33:25.000Z"],[441,440,150],"![Blog article on configuring WordPress as a headless CMS with Next.js](/img/next-js-with-wordpress-part-1-blog-post.png)\n\nWelcome to the first in a series of articles on getting started with Next.js. In this very first starting point, we'll be looking at creating a brand new Next.js project using the very helpful `create-next-app` tool.\n\nFrom there, we'll be setting up WordPress as a headless CMS to manage our blog posts' content for us.\n\nAs we move through future articles in the series, we'll be covering a lot of moving parts to round out the entire process, including:\n\n- Starting a blog using Next.js,\n- Using WordPress as a headless CMS with Next.js,\n- Creating an RSS feed for our static Next.js blog\n- Bundling, building and deploying our Next.js static blog with Netlify\n\nFor this very article, however, we're just going to start with the basics of getting Next.js and our headless WordPress instance setup and ready to go.\n\nSo let's get to it!\n\n## Why Next.js\n\n[Next.js](https://nextjs.org/ 'Next.js from Vercel') (made by a company called [Vercel](https://vercel.com/ 'Vercel static website hosting') — formally Zeit) is a React-based framework for producing static-generated websites. It fills in some of the blanks of using React in its vanilla form, such as dynamic page routing, and it also allows developers a bevvy of choices of where to get their data from to power their static websites.\n\n### Isn't it just like Gatsby\n\nIt's very comparable to [Gatsby](https://nextjs.org/ 'Next.js from Vercel') (which I also love) in many ways. Indeed Next.js and Gatsby share the same end goal: to connect data with a static-generator engine to produce a static website.\n\nPersonally, I prefer Next.js the more I use it. Whilst Gatsby offers a more mature eco-system with its plugins and community, Next.js offers a much less complex setup and often requires fewer plugins to achieve the same thing.\n\nI'd recommend trying both and seeing which you prefer.\n\n## Why use WordPress as a headless CMS\n\nWordPress is an often maligned platform, but it does power something close to 35% of the entire web. It's a hugely popular content management platform and most people have come across it, if not directly used it at some point during their time.\n\nHowever, it does have a reputation for being quite clunky at times and it takes some work to produce a performant website on the front end.\n\nOne of the best reasons to consider WordPress as a headless CMS is that it solves the largest problem facing static-generated websites: editing content!\n\nSure, for most developers (me included) this isn't so much of a burden. For example, I use [Forestry.io](https://forestry.io 'Forestry.io markdown CMS') as a markdown editor/CMS to edit the markdown files that power this very site directly in my GitHub repo.\n\nOther developers may choose to just edit HTML directly, and that's fine and dandy.\n\nBut what about 'normal' users, marketers, content editors, _non-developers_?! Editing markdown or HTML files is a bit beyond their needs or, perhaps, their skillsets.\n\nBy using WordPress as a headless CMS with Next.js, it's win win win. Website visitors get performant, accessible websites. Developers get a great developer experience and aren't hampered by the very opinionated and clunky PHP development required for WordPress. And content producers and site owners still get to use their favourite content management tool, WordPress, to handle the editing process!\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n## Step 1, getting WordPress ready for Next.js\n\nInstalling and getting a WordPress instance going is beyond the scope of this article and there are many places to help get you started with that.\n\nIf you're looking for a recommendation then check out [Amazon's Lightsail](https://aws.amazon.com/lightsail/ 'Amazon Lightsail hosting'), or the AWS platform in general as there are often free tiers available, especially whilst you're just getting started.\n\nWhat we're bothered about here is adding some necessary bits and pieces to a WordPress website to turn it into a headless CMS for Next.js to access.\n\nSo, assuming you already have a WordPress instance set up, let's move on.\n\n![Demo WordPress website from Rob Kendal](/img/nextjs-demo-robkendal.jpg)\n\n### Installing WPGraphQL (and plugins)\n\nOut of the box you can use the WordPress REST API to fetch data and so on, but we're going to be using GraphQL to do the heavy lifting.\n\nThis does mean we have to install a few plugins, however, before we can start accessing our data via Next.js.\n\nSo, we'll be heading over to [https://www.wpgraphql.com/](https://www.wpgraphql.com/ 'WPGraphQL plugin') and we'll want to install the following plugins:\n\n- [WPGraphQL main plugin](https://github.com/wp-graphql/wp-graphql/releases 'WPGraphQL plugin')\n- [WPGraphQL for ACF](https://github.com/wp-graphql/wp-graphql-acf 'WPGraphQL for ACF plugin') (advanced custom fields)\n- [WPGraphiQL](https://github.com/wp-graphql/wp-graphiql 'WPGraphiQL plugin') - a visual query builder/explorer for GraphQL\n\n**Note:** _with the WPGraphQL stuff, you'll have to visit those links, download the Source Code (zip) as zip files and upload them to WordPress manually via the Admin Menu > Plugins > Add New > Upload dialogue._\n\n![WPGraphQL releases plugin download page](/img/nextjs-article-wpgraphql.jpg)\n\nThe reason for favouring GraphQL is that it's faster than the REST API and GraphQL gives us the power and flexibility to return only the data we need. Using the WPGraphiQL plugins also allows us to both build our queries directly inside of our WordPress instance before moving them into Next.js\n\n> This is hugely important as we can see the output of the queries, testing and tweaking them as we go, _before_ we have to blindly add them to our local dev instance.\n\nWe'll also need one last plugin, [Advanced Custom Fields](https://www.advancedcustomfields.com/ 'WordPress Advanced Custom Fields (ACF) plugin') (ACF). This will allow us to add extra fields to our posts or pages to extend their content capabilities.\n\n### Adding custom fields to posts\n\nNext, and this part is optional if you don't want/need custom fields on your posts, we'll set up a few custom fields using ACF and make sure they're enabled for WPGraphQL, **otherwise they won't show up**.\n\nHead over to your WordPress admin console and then to Custom Fields > Field Groups and make a new one, calling it whatever you like.\n\nFor my site, I called the Field Group 'Extra Post Info'. Then, I added three fields:\n\n1. Author Excerpt - a text area field\n2. Preview Image - a simple image selection field\n3. Thumbnail Image - as above\n\n![WordPress ACF fields setup](/img/nextjs-article-acf-setup.jpg)\n\nYou can add whatever fields you wish and name them to suit your needs.\n\nFrom here, scroll all the way to the bottom of this page and enable the WPGraphQL settings as follows:\n\n1. Make sure `Show in GraphQL` is set to 'Yes'\n2. For `GraphQL Field Name` set this to a meaningful and descriptive name for your extra fields. This will be the name we use to reference the extra fields in GraphQL. Here, I named mine `extraPostInfo`\n\n![WPGraphQL settings to enable custom fields to show up](/img/nextja-article-ac-graphql-settins.jpg)\n\nAnd that's that. One final thing is to populate a few dummy posts in the Posts section of the admin menu. Just create a handful of new posts and add in whatever content you wish (I find Lorem Ipsum works just fine here).\n\n### Viewing our Posts in GraphQL\n\nHaving installed all the necessary WPGraphQL posts, added some extra fields, and made sure those were added to the GraphQL schema, with some dummy Post content in place, we can go check out the Posts data via the WPGraphiQL explorer.\n\nHead over to the GraphiQL menu item in your WordPress admin console.\n\nNow for the real magic! GraphiQL is a visual query builder that lets you simply expand and toggle data fields on the left hand side, build a query in the middle using those data fields, and execute that query to see what data is returned.\n\nVery powerful stuff, I'm sure you'll agree. Now, the in's and out's of GraphQL language and the GraphiQL tool are entire articles and courses in themselves, but you can find out more from the [official GraphQL website](https://graphql.org/ 'Official GraphQL website and documentation').\n\nFor our purposes, you can see below that I've expanded various paths on the tree menu, starting with `posts` and this has automatically built me a query in the centre editor panel. When I pressed the big play button, the query is executed and the results shown in the rightmost panel.\n\n![GraphiQL query data builder](/img/nextjs-article-graphiql-query.png)\n\nThe query built looks like this:\n\n```js\n    query MyQuery {\n      posts {\n        edges {\n          node {\n            id\n            date\n            title\n            slug\n            featuredImage {\n              node {\n                mediaItemUrl\n              }\n            }\n            extraPostInfo {\n              authorExcerpt\n            }\n          }\n        }\n      }\n    }\n```\n\nAnd this query returns something along the lines of this data:\n\n```json\n{\n  \"data\": {\n    \"posts\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"cG9zdDoyOA==\",\n            \"date\": \"2020-07-09T07:18:42\",\n            \"title\": \"A third post with an interesting name\",\n            \"slug\": \"a-third-post-with-an-interesting-name\",\n            \"featuredImage\": null,\n            \"extraPostInfo\": {\n              \"authorExcerpt\": \"I'm a thing. I usually try to keep my sadness pent up inside where it can fester quietly as a mental illness. Leela, are you alright? You got wanged on the head. Okay, I like a challenge. Robot 1-X, save my friends! And Zoidberg!\"\n            }\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"cG9zdDoyNQ==\",\n            \"date\": \"2020-07-09T07:17:19\",\n            \"title\": \"Another awesome post with a really long title\",\n            \"slug\": \"another-awesome-post-with-a-really-long-title\",\n            \"featuredImage\": null,\n            \"extraPostInfo\": {\n              \"authorExcerpt\": \"It's okay, Bender. I like cooking too. Why would I want to know that? Fry, we have a crate to deliver. You guys aren't Santa! You're not even robots. How dare you lie in front of Jesus? My fellow Earthicans, as I have explained in my book 'Earth in the Balance'', and the much more popular ''Harry Potter and the Balance of Earth', we need to defend our planet against pollution. Also dark wizards.\"\n            }\n          }\n        },\n        ...others\n      ]\n    }\n  }\n}\n```\n\nAnd with that, we have our WordPress instance set up as a headless CMS with the Posts data all ready to go in a nice, neat GraphQL query.\n\n## Step 2, creating a Next.js project\n\nThe final step in the project setup process to use WordPress as a headless CMS using Next.js is the most important part: Next.js!\n\nAs it happens, [Next.js has a project create tool](https://nextjs.org/learn/basics/create-nextjs-app/setup 'Next.js Create Next App tool documentation') called `create-next-app` which will create us a bootstrapped Next.js app with the bare bones of configuration ready to go.\n\nMuch like React's own `create-react-app` tool, the `create-next-app` tool is run from the command line and creates a directory with all the necessary project files in place.\n\nIt's a great starting place, so let's run it now in a directory of your choosing. Fire up your terminal and run the following command:\n\n    npx create-next-app headless-wp-demo\n\nOnce finished, you'll receive a message saying everything's been successful and then you will be given a few commands to build, run, and start our new app.\n\nLet's check everything's working first by typing the following commands in your terminal:\n\n    cd headless-wp-demo\n\nand finally:\n\n    yarn dev\n\nWhat you'll see is a blazing fast site build, followed by a message that your site has successfully been started at `http://localhost:3000`. Open that address in a browser of your choosing and you should see the following page.\n\n![Next.js local development site running on http://localhost:3000](/img/nextjs-article-nextjs-demo-site-start.png)\n\nAnd it really is as simple as that...for now.\n\nIn part two, we'll be looking at how to access our GraphQL data using Next.js and take a deeper dive into dynamic routing.\n\nYou can skip ahead to part two, [using WordPress as a headless CMS with Next.js](/blog/using-wordpress-as-a-headless-cms-with-nextjs) now.","src/content/blog/configuring-wordpress-as-a-headless-cms-with-next.js.mdoc","7b6cc162630ea165","configuring-wordpress-as-a-headless-cms-with-next.js.mdoc","create-a-static-website-rss-feed-with-nextjs",{"id":497,"data":499,"body":505,"filePath":506,"digest":507,"legacyId":508,"deferredRender":156},{"title":500,"description":501,"featured":156,"featuredimage":502,"date":503,"tags":504},"Create a Next.js RSS feed for your static website","Learn how to create an RSS feed for your Next.js website in  part three in the series of using WordPress as a headless CMS with Next.js","/img/nextjs-with-wordpress-part3-blog-post.png",["Date","2020-10-04T08:08:20.000Z"],[226,440,150],"![Blog header for creating an RSS feed with Next.js](/img/nextjs-with-wordpress-part3-blog-post.png 'Create RSS feed for Next.js site')\n\nIf you've been following along with the series, you'll have come across the previous posts:\n\n- [Configuring WordPress for use as a headless CMS and setting up a Next.js project](/blog/configuring-wordpress-as-a-headless-cms-with-nextjs 'Configuring WordPress as a headless CMS with Next.js')\n- [Using WordPress as a headless CMS with Next.js](/blog/using-wordpress-as-a-headless-cms-with-nextjs 'Using WordPress as a headless CMS with Next.js')\n\nIn part three, we're going to cover an important aspect of any good blogging site or marketing site that is frequently updated: an RSS feed.\n\n_If you like this article, you'll love the other helpful content I post on Mastodon._ [_Follow me on Mastodon @kendalmintcode@indieweb.social_](https://indieweb.social/@kendalmintcode 'Find me on Mastodon @kendalmintcode') _and say hi._\n\nWe have a little bit of helpful information on hosting a Next.js site which might dictate how you create the RSS feed, but you can [skip to the code if you'd prefer](#create-rss-feed 'Skip to the RSS feed code').\n\n## Your Next.js website needs an RSS feed\n\nRSS feeds are an important part of any website that has frequently updated content, such as a blog (we are using WordPress after all!) or marketing-led website.\n\nAn RSS feed is a specific page on a website (usually `/rss.xml`) which returns all, or part of a website's content as a list in structured XML format. This makes it very easy for content readers (such as Feedly) to pull in new and updated content on a regular basis.\n\nHowever, creating an RSS feed for a Next.js site is surprising not well documented, so I wanted to bring my solution to the web to hopefully solve an issue for someone else, that I had to solve for this very website you're reading right now.\n\n## RSS feed options when using Next.js\n\nRSS feeds are a little tricky with statically generated sites because they need to be generated as `.xml` files to be served to feed readers. If not served as `.xml` files that already exist on the server, then the server needs to otherwise generate some sort of XML data and push it to the response stream that is sent back to the browser.\n\n### Next.js sites hosted on Vercel\n\nBy default, Next.js generates a build output that includes a small Node server. It does this to handle server-side page generation, which is what you'll need to use for RSS feeds, because you can change the response's content type to XML and write the data dynamically.\n\nHosting your Next.js website [on Vercel's platform](https://vercel.com/ 'Next.js hosting on Vercel') (the creators of Next.js) means you won't have to worry about anything; it's perfectly geared up to handling the default Next build output as you might expect.\n\nIn this scenario, you'd use the `getServerSideProps` function as part of a `rss.js` page. Then, each time the page is requested, Next.js will fetch the data, build the XML feed and write the results to the response object as XML data.\n\nIt might look like this:\n\n```js\nexport async function getServerSideProps(context) {\n  const res = context.res;\n  if (!res) {\n    return;\n  }\n  // fetch your RSS data from somewhere here\n  const blogPosts = getRssXml(fetchMyPosts());\n  res.setHeader('Content-Type', 'text/xml');\n  res.write(blogPosts);\n  res.end();\n}\n```\n\nYou can read more about `getServerSideProps` [on the Next.js website](https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering 'Next.js documentation on the getServerSideProps').\n\n### Next.js sites hosted on Netlify (or non-Vercel hosts)\n\nIf you're looking to host your sites on a different provider, such as Netlify, then you'll need to employ a different strategy. A lot of hosts that support statically-generated sites don't offer an easy way to support the type of output that Next.js produces.\n\nTo get around this, Next.js does provide a handy solution, [the export command](https://nextjs.org/docs/advanced-features/static-html-export 'Next.js export command documentation').\n\nSo, instead of just running `yarn build`, you'll need to use `next export` instead. This will still run a build of the site, but it generates entirely static output, instead of the typical hybrid of static with dynamic Node server. **The `next export` command generates the site's files in a new folder called `/out` in the project root.**\n\nWhat it means is that you can't just have a page called `rss.js` and have it render an XML response in the browser on the fly. You'll need a different way to create an XML RSS feed for your site.\n\nFor me, this involved running an extra build command that uses Node to create an XML file and move it into the final `/out` folder as part of the build process.\n\n### Your RSS generation options\n\nWhatever your hosting choice and however you choose to go about gathering and generating your RSS feed data, you're going to need to ultimately render it as XML data into the browser.\n\nIn summary, you have a few ways to handle this:\n\n1. Use a third-party site-mapping tool or RSS feed generator  \n   These can be expensive and require additional faff to set up and maintain.\n2. Generate the XML RSS feed on each request using Next's `getServerSideProps()`\n\n   This won't work for sites that are generated using the `next export` command.\n\n3. Generate a static XML RSS feed at build time using a separate Node script as part of the build process  \n   This is what we'll be doing in this article!\n\n> The programmatic options above will work with the code we're going to outline in a moment. The main difference is that if you stick to using vanilla Next.js then you can run this as a separate page (e.g. `rss.js`) and use the `getServerSideProps()` function to push the feed as XML content to the response object. **We won't have that option, so we'll incorporate a separate Node command as part of our build process.**\n\nI based my final code on this [excellent article by Fredrik Bergqvist on Dev](https://dev.to/fredrikbergqvist/how-to-add-an-rss-feed-to-your-next-js-site-1h02 'How to add an rss feed to your Next.js site').\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png 'Follow me on Mastodon for even more front end content')](https://indieweb.social/@kendalmintcode 'Follow Rob Kendal on Mastodon')\n\n## Creating an Next.js RSS feed for a Next.js website (using WordPress)\n\nSince we've been making a series on using WordPress in headless CMS mode with Next.js, we'll be continuing on that theme and pulling our RSS XML data direct from WordPress.\n\nHowever, the main body of the code here will work whatever your situation, the big differences are going to be _where_ you get your data from (e.g. WordPress, `.md` files, other CMS, API endpoint, etc.), and _when_ you get your data — are you grabbing yours on the fly for each request using `getServerSideProps`, or generating it ahead of time when the site builds?\n\n### Project set up\n\nWe'll be carrying on with our existing site from the previous articles. You can find the [wordpress-next-starter project on GitHub](https://github.com/bpk68/wordpress-next-starter 'WordPress and Next.js Starter project on GitHub') if you'd like to take a look.\n\nThe first thing we need to do is install the [axios project](https://github.com/axios/axios 'Axios fetch library on GitHub') as it'll make handling fetches to our WordPress instance easier via Node.\n\nWe'll also add in [the Dotenv package](https://www.npmjs.com/package/dotenv 'Dotenv - a package for loading environment variable files'). This will enable us to load in our API URL information from the default `.env.local` file we added in the previous articles.\n\n```cmd\n    yarn add --dev axios dotenv\n```\n\nNow, we'll need to add a new Node script into the `package.json` file. Open up the `package.json` file and add in the following line to the `\"scripts\"` section:\n\n```cmd\n    \"deploy\": \"yarn build && next export && node rss-gen.js\"\n```\n\nWhat we're doing here is a combination Node command that does a few things to build us a finished build directory (located at `/out`) that we can deploy to wherever we wish.\n\nIt achieves three things:\n\n1. It gets Next.js to build the site.\n2. Then, it [triggers the Next.js export feature](https://nextjs.org/docs/advanced-features/static-html-export 'Next.js export feature documentation') to generate us a completely static build to a new directory, `/out`.\n3. Finally, it runs a Node command to execute the `rss-gen.js` file we'll be building in a moment. This file will gather up our posts information from WordPress, create an XML RSS feed and stash this new XML file inside of the `/out` directory.\n\nWith that line in place, your `scripts` section in the `package.json` file will look like this:\n\n```json\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"deploy\": \"yarn build && next export && node rss-gen.js\"\n},\n```\n\n\u003Ca id=\"create-rss-feed\">\u003C/a>\n\n### Creating the RSS generator file\n\nWith our new packages added and the `package.json` file updated, we need to create a new file to actually generate us some RSS XML. Let's do it!\n\nCreate a new file in the project root called `rss-gen.js` and add the following imports at the top:\n\n```js\nrequire('dotenv').config({ path: '.env.local' });\nconst fs = require('fs');\nconst path = require('path');\nconst axios = require('axios');\n```\n\nNothing flash so far. We're loading in the `dotenv` package as the **very first thing** so we can grab variables from our `.env.local` file to use later on. By default, Node won't recognise an environment variable file called `.env.local`, hence the need for the `dotenv` helper here.\n\nNext, we're importing the `fs` library to do file system things, `path` to deal with our working directory when we want to save our the RSS XML, and `axios` to handle the data fetching.\n\n### Fetching all the posts data\n\nNext up, let's add the following code that will physically go off to our WordPress instance and grab our post data:\n\n```js\nconst getAllPostsXmlData = async () => {\n  const query = `\n        query AllPosts {\n          posts(where: {orderby: {field: DATE, order: DESC}}) {\n            edges {\n              node {\n                id\n                date\n                title\n                slug\n                content\n                excerpt\n              }\n            }\n          }\n        }\n        `;\n  const headers = { 'Content-Type': 'application/json' };\n  const allPosts = await axios({\n    method: 'post',\n    url: process.env.WP_API_URL,\n    headers,\n    data: JSON.stringify({ query }),\n  });\n\n  return allPosts.data.data.posts.edges;\n};\n```\n\nWe've got a very stripped down GraphQL query here that just grabs an ID, date, title, slug, content, and excerpt.\n\nNext, we simply call axios' post request with the `WP_API_URL`. Once this returns, we pass back the array of posts data fresh from the WordPress kitchen.\n\n> **Note:** we're fetching posts from WordPress here because this is what the whole series is about. However, you could easily replace this section with any other content data you wish. This site, for example, uses Markdown files to generate a blog post RSS feed.\n\n### Processing posts data into XML feed items\n\nFor the next function, we want to create one that takes the fetched WordPress Post data and processes each individual Post's data into an XML feed item. Create a new function, `blogPostsRssXml` and add in the following:\n\n```js\nconst blogPostsRssXml = (blogPosts) => {\n  let latestPostDate = '';\n  let rssItemsXml = '';\n  blogPosts.forEach(({ node }) => {\n    const post = node;\n    const postDate = Date.parse(post.date);\n\n    // Remember to change this URL to your own!\n    const postHref = `https://myamazingwebsite.com/blog/${post.slug}`;\n\n    if (!latestPostDate || postDate > Date.parse(latestPostDate)) {\n      latestPostDate = post.date;\n    }\n\n    rssItemsXml += `\n          \u003Citem>\n            \u003Ctitle>\u003C![CDATA[ ${post.title} ]]>\u003C/title>\n            \u003Clink>${postHref}\u003C/link>\n            \u003CpubDate>${post.date}\u003C/pubDate>\n            \u003Cguid isPermaLink=\"false\">${postHref}\u003C/guid>\n            \u003Cdescription>\n            \u003C![CDATA[ ${post.excerpt} ]]>\n            \u003C/description>\n            \u003Ccontent:encoded>\n              \u003C![CDATA[ ${post.content} ]]>\n            \u003C/content:encoded>\n        \u003C/item>`;\n  });\n  return {\n    rssItemsXml,\n    latestPostDate,\n  };\n};\n```\n\nAnother function that looks long, but is fairly simple in its operation. We're looping through the available blog posts that WordPress gave us, generating a human readable date, then checking to see if the current post is the latest post and updating the latest post date if that's true.\n\nFinally, we build up and return a an individual XML item string which is added to the `rssItemsXml` string, which will eventually be returned as a large string, back to the calling function.\n\nIn case you're interested in the structure and markup for an XML RSS feed, the [W3 Schools website has a great introduction to the syntax on XML RSS feeds](https://www.w3schools.com/XML/xml_rss.asp 'W3 Schools RSS XML feed structure'). They'll outline which elements you can include, how it's all structured and more.\n\nOh, and **remember to change the line with `https://myamazingwebsite.com` to your own URL**!\n\n### Generating the file's XML feed\n\nThe penultimate step is to create a function that will outline the bare bones skeleton of the RSS document, before calling the `blogPostsRssXml` to fill in the main content of the file with our Posts data.\n\nAdd the following code to our `rss-gen.js` file.\n\n```js\nconst getRssXml = (blogPosts) => {\n  const { rssItemsXml, latestPostDate } = blogPostsRssXml(blogPosts);\n\n  // Edit the '\u003Clink>' and '\u003Cdescription>' data here to reflect your own website details!\n  return `\u003C?xml version=\"1.0\" ?>\n      \u003Crss\n        xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n        xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n        xmlns:atom=\"http://www.w3.org/2005/Atom\"\n        version=\"2.0\"\n      >\n        \u003Cchannel>\n            \u003Ctitle>\u003C![CDATA[ Frontend development articles by Rob Kendal ]]>\u003C/title>\n            \u003Clink>https://myamazingwebsite.com\u003C/link>\n            \u003Cdescription>\n              \u003C![CDATA[ A description about your own website that really shows off what it's all about ]]>\n            \u003C/description>\n            \u003Clanguage>en\u003C/language>\n            \u003ClastBuildDate>${latestPostDate}\u003C/lastBuildDate>\n            ${rssItemsXml}\n        \u003C/channel>\n      \u003C/rss>`;\n};\n```\n\nThis is standard RSS XML feed structure here. It describes the data and the content, gives the feed a title and a meaningful description, as well as identifying the feed's language.\n\nAgain, notice that you should **replace the link and description with your own information** before you set this feed live!\n\n### Putting it all together\n\nBy this point, if we just called the previous function, `getRssXml` on its own, we'd have a perfectly fine RSS feed for our Next.js site...in string format, **not** XML.\n\nEven though the previous functions together make up about 95% of the task, the missing final 5% is the crucial part; the part that physically writes the RSS feed to a file as XML.\n\nWe're going to finish off the file with a new function `generateRSS` that will gather our blog post data from WordPress, use it to generate all the feed data for us (in string format) and write it out to a file for us.\n\nHere's the last function to create and add at the end of our file:\n\n```js\nasync function generateRSS() {\n  const allBlogPostData = await getAllPostsXmlData();\n  const processedXml = getRssXml(allBlogPostData);\n\n  const staticOutputPath = path.join(process.cwd(), 'out');\n\n  fs.writeFile(`${staticOutputPath}/rss.xml`, processedXml, (err) => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log('File written successfully');\n    }\n  });\n}\n\n// kick it all off\ngenerateRSS();\n```\n\nYou can see we fetch the WordPress Post data and supply it to the `getRssXml()` function, which gets us our RSS feed as a string, `processedXml`.\n\nNext, we use the `path` import to work out the current working directory path so we can write a file to it.\n\nFinally, we use Node's `fs` function to write a new file, `rss.xml`, containing our RSS feed string. We're writing this file directly into the root of the `/out` folder, which you'll recall is the folder that Next.js creates for us when we use the special `yarn export` command — it contains all the statically generated files for our site.\n\n### The finished `rss-gen.js` file\n\nWith all of the above done, the finished `rss-gen.js` file should look like this:\n\n```js\nrequire('dotenv').config({ path: '.env.local' });\nconst fs = require('fs');\nconst path = require('path');\nconst axios = require('axios');\n\nconst getAllPostsXmlData = async () => {\n  const query = `\n        query AllPosts {\n          posts(where: {orderby: {field: DATE, order: DESC}}) {\n            edges {\n              node {\n                id\n                date\n                title\n                slug\n                content\n                excerpt\n              }\n            }\n          }\n        }\n        `;\n  const headers = { 'Content-Type': 'application/json' };\n  const allPosts = await axios({\n    method: 'post',\n    url: process.env.WP_API_URL,\n    headers,\n    data: JSON.stringify({ query }),\n  });\n\n  return allPosts.data.data.posts.edges;\n};\n\nconst blogPostsRssXml = (blogPosts) => {\n  let latestPostDate = '';\n  let rssItemsXml = '';\n  blogPosts.forEach(({ node }) => {\n    const post = node;\n    const postDate = Date.parse(post.date);\n\n    // Remember to change this URL to your own!\n    const postHref = `https://myamazingwebsite.com/blog/${post.slug}`;\n\n    if (!latestPostDate || postDate > Date.parse(latestPostDate)) {\n      latestPostDate = post.date;\n    }\n\n    rssItemsXml += `\n          \u003Citem>\n            \u003Ctitle>\u003C![CDATA[ ${post.title} ]]>\u003C/title>\n            \u003Clink>${postHref}\u003C/link>\n            \u003CpubDate>${post.date}\u003C/pubDate>\n            \u003Cguid isPermaLink=\"false\">${postHref}\u003C/guid>\n            \u003Cdescription>\n            \u003C![CDATA[ ${post.excerpt} ]]>\n            \u003C/description>\n            \u003Ccontent:encoded>\n              \u003C![CDATA[ ${post.content} ]]>\n            \u003C/content:encoded>\n        \u003C/item>`;\n  });\n  return {\n    rssItemsXml,\n    latestPostDate,\n  };\n};\n\nconst getRssXml = (blogPosts) => {\n  const { rssItemsXml, latestPostDate } = blogPostsRssXml(blogPosts);\n\n  // Edit the '\u003Clink>' and '\u003Cdescription>' data here to reflect your own website details!\n  return `\u003C?xml version=\"1.0\" ?>\n      \u003Crss\n        xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n        xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n        xmlns:atom=\"http://www.w3.org/2005/Atom\"\n        version=\"2.0\"\n      >\n        \u003Cchannel>\n            \u003Ctitle>\u003C![CDATA[ Frontend development articles by Rob Kendal ]]>\u003C/title>\n            \u003Clink>https://myamazingwebsite.com\u003C/link>\n            \u003Cdescription>\n              \u003C![CDATA[ A description about your own website that really shows off what it's all about ]]>\n            \u003C/description>\n            \u003Clanguage>en\u003C/language>\n            \u003ClastBuildDate>${latestPostDate}\u003C/lastBuildDate>\n            ${rssItemsXml}\n        \u003C/channel>\n      \u003C/rss>`;\n};\n\nasync function generateRSS() {\n  const allBlogPostData = await getAllPostsXmlData();\n  const processedXml = getRssXml(allBlogPostData);\n\n  const staticOutputPath = path.join(process.cwd(), 'out');\n\n  fs.writeFile(`${staticOutputPath}/rss.xml`, processedXml, (err) => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log('File written successfully');\n    }\n  });\n}\n\n// kick it all off\ngenerateRSS();\n```\n\nAnd that's about it. Not a tiny file, but not a behemoth either. In just over 100 lines of code, we've managed to create a reusable RSS feed generator for Next.js that collects data from WordPress and creates an XML file for our blog posts.\n\nYou can easily swap out the data feed portion of this file if you need to get your RSS feed's data from somewhere else, or even pull it in from multiple sources.\n\n## What's coming up next?\n\nNext in the Next.js and WordPress series is going to be an in-depth look at a familiar situation: sending emails from contact forms within a static website.\n\n_If you like this article, you'll love the other helpful content I post on Mastodon._ [_Follow me on Mastodon @kendalmintcode@indieweb.social_](https://indieweb.social/@kendalmintcode 'Follow me on Mastodon @kendalmintcode@indieweb.social') _and say hi._","src/content/blog/create-a-static-website-rss-feed-with-next.js.mdoc","d282eef78cc75bd5","create-a-static-website-rss-feed-with-next.js.mdoc","continuous-refactoring-avoiding-technical-debt-in-the-here-and-now",{"id":509,"data":511,"body":517,"filePath":518,"digest":519,"legacyId":520,"deferredRender":156},{"title":512,"description":513,"featured":145,"featuredimage":514,"date":515,"tags":516},"Continuous refactoring: avoiding technical debt in the here and now","How do you find time to refactor your code? The answer is simple: continuous refactoring. Learn how to reduce your future development technical debt","/img/rawpixel-783429-unsplash_o-1.jpg",["Date","2019-02-01T13:26:22.510Z"],[177,149],"![Rubber gloved hands scrubbing a toilet](/img/rawpixel-783429-unsplash_o-1.jpg)\n\nHaving just read a fascinating article on [CSS Tricks](https://css-tricks.com/the-slow-and-steady-refactor/) by Robin Rendle, called '[The Slow and Steady Refactor](https://css-tricks.com/the-slow-and-steady-refactor/)', I was compelled to share my own experiences with improving code on the go.\n\nLarge, lumbering technical debt and bloated, sluggish, poor-performant code has always been a problem in any development industry. Whether it's code that never quite got tidied up, new stuff that's piled on top of old, or even misunderstood dark arts style code left behind by a past developer, legacy technical debt can cause all sorts of problems.\n\nI'm going to share my recent approach to tackling this monster in the coding cupboard with a concept I dub _continuous refactoring_.\n\nFirst, however, let's take a look at how we end up with refactoring nightmares...\n\n_(Pssst...you can skip to the [continuous refactoring part](#enter-continuous-refactoring) if you like)_\n\n## How did we get like this?\n\nIn some ways, the feature image of this post (the fetching toilet being scrubbed) does a good job of representing the tangled mess of wires that large scale development projects often become: they're messy, hard to clean and generally a thankless task that no one wants to take on (well, maybe some of the more sadistic coders out there).\n\nThe larger the code base, the more problems you can encounter:\n\n- They become harder to maintain\n- Optimising and improving is a challenge due to spaghetti code or unknown dependencies\n- It can be difficult to change feature 'x' without impacting widget 'y'\n- Code bases have their own set of bugs without the fear of introducing more by refactoring large parts of the code\n\nIt's no one's fault, specifically, how projects end up in this state, yet we all share some of the blame in fostering a culture of 'getting stuff done _quickly,_ now' at the sacrifice of 'how to get stuff done _easily_ and _smoothly_, in the future'.\n\n### Productivity trumps maintainability\n\nOne of the reasons is that we're increasingly focussed on building bigger, better things in shorter amounts of time. Over my career, I've seen increasing emphasis and pressure placed on dev teams to 'get product x released', to 'beat the competition to it' and practices like Agile feed into this mindset, enabling the mentality of 'always be shipping/releasing'.\n\nI'm not suggesting that there is anything inherently _bad_ with this, of course, and approaches like Agile, continuous build and deployment, and so on have enabled us to build better things in a shorter timeframe, which can **only be a great thing**!\n\nBut (there's always a but...) in an effort to get things deployed more quickly, it is all too easy to not find the time to refactor our work, to revisit and improve, to smooth out the rough - all to easy to otherwise put it off until some mythical time in the future, and so it becomes a towering beast in the background.\n\n### Shiny and new trumps well-planned and robust\n\nSure, technology pulls at the edges at a frightening pace, but we shouldn't allow ourselves to be so obsessed with 'using the latest thing' or 'building the new Facebook' that we sacrifice well-maintained and easy-to-scale software.\n\nMany a time, it's all to easy to be lured into what everyone else is using, without really understanding the _why,_ hacking things together whilst still learning about the tools or libraries we're using to do the hacking.\n\nAgain, there's nothing wrong with keeping up-to-date, but diving in head-first without thinking it out results in the newer stuff - hopefully full of best practices and learned knowledge as we master what we're using - being dumped onto old, leading to a code swamp that will (likely) never be addressed.\n\n### Bickering about what the other guys are doing\n\nThere are a lot of arguments on Twitter at the moment in the development world around topics such as [CSS-in-JS](/blog/why-is-css-in-js-a-bad-or-good-idea) or how we're all doing HTML wrong. The irony is that rarely is any one side right or wrong, they just prefer a different approach.\n\nThere's nothing horrendously bad about [CSS-in-JS](/blog/why-is-css-in-js-a-bad-or-good-idea), for example (even though I hate the idea...\\*shudders\\*), but these debates tend to create a divide in how people tackle a common goal (in this case, including CSS into their final output).\n\nThe upshot this can be a team mixing-and-matching coding conventions which makes refactoring difficult. It can also slow down on-boarding of new team members as they struggle to get to grips with different areas of the same app, developed in a different way.\n\nBesides, getting caught up in arguments about CSS-in-JS, or why framework 'ThingyJS' is better than library 'McGuffin.io' rather than '**which will work best for us to produce, robust, well-structured, maintainable, code that we can improve, scale and release quickly**', means you're asking the wrong questions.\n\n## \u003Ca name=\"enter-continuous-refactoring\">\u003C/a>Enter continuous refactoring\n\nSo how can we tackle and reduce the burden of bloat and technical debt and make time to refactor? Simple, _continuous refactoring_.\n\nIt really can be as simple as it sounds:\n\n> by slowing our pace a little and weaving in time to refactor our code _as we code it_, we help our future selves (and future team) benefit from a more streamlined code base.\n\nThere's a little more to it if you want to dig deeper of course. Here are some of the best approaches I've experienced over the years and the habits I try to foster now to ensure that code is as tip top as it can be:\n\n- Reduce the need for massive refactors with planning\n- Commit small, commit often\n- Refactor as you go\n- Ask your team for help\n- Get refactoring conventions in place\n- Don't use third parties because 'it's easy'\n- Document document document\n\n### Reduce the need for massive refactors with planning\n\nIt starts _before_ you touch an IDE...\n\nAs [Robin alludes to in his article](https://css-tricks.com/the-slow-and-steady-refactor/), by slowing down and planning out _how_ we approach creating a code base before we dive in, setting standards, conventions and guidelines on how to address and reduce code clutter, and streamline things _now,_ we can side-step some headaches later on.\n\nOK, it's not really refactoring, but by having a plan (a pre-emptive refactor, if you will) in place _before_ you start, the need to refactor at all can be reduced.\n\n### Commit small, commit often\n\nAgain, with a big nod to Robin's article, his use of Git versioning involves making more frequent, yet smaller commits to repositories. This is a great approach for several reasons including:\n\n- Documenting decision making as you go\n- Making it easy to roll back smaller changes, rather than having a huge commit with many files\n\n### Refactor as you go\n\nThere is usually a way, however small, to improve what you've written. It might be that you can reduce a function from 15 lines to 10 (whilst maintaining readability) or break a long function into a handful of smaller ones.\n\nHowever you choose to refactor, rework or improve your code, you should aim to do it _as you're writing it_, or, at the very least, before you commit it. Often, development teams put off refactoring altogether in the hopes that they'll get some down time to work through that list of todo's or thin out that pesky account controller they've been meaning to work on for ages.\n\nIn reality, this time never comes. Refactoring doesn't often add value to a product so it's usually pushed to the bottom of the priority list. Therefore it's up to you as a diligent developer to make improvements and cut the cruft now, in the moment, before it's a problem down the line.\n\n> Refactoring rarely helps a product's value in the short-term, but it always helps a team's productivity (and sanity) in the long-term\n\n**Don't be tempted to put off refactoring work unless you absolutely have to!**\n\n### Ask your team for help, make everyone accountable\n\nCode reviews should be a vital part of the development lifecycle. They don't have to be a big formal thing either. For instance, at Bytemark, we use merge requests as an opportunity to review each other's work and get another perspective on things.\n\nThey're a great way to make improvements before committing to the code base because they're an easy way to get feedback and hold everyone accountable (in an objective way) to high standards.\n\nThey can highlight:\n\n- Ways to improve what you're written\n- Issues you may have overlooked\n- Others' experience to help rework something\n- Where you can trim duplicate work (e.g. something like that already exists to solve 'xyz').\n\n### Get refactoring conventions in place\n\nThis might be more of a planning thing, but there's never a bad time to step back, analyse what you're doing and get some agreements on how the whole team should be tackling things.\n\nWhen it comes to refactoring, having some documented, agreed-upon habits and conventions will help everyone in the team to recognise where, when and how they can be refactoring for the better.\n\nSome of those conventions might include:\n\n- How large files should be (e.g. 300 line JS files are too long)\n- When should a class be broken down into separate modules?\n- At what point do we use a functional, stateless component over a regular React component class?\n- Striving to use [arrow functions](/blog/how-to-use-arrow-functions-in-javascript-es6) over regular 'function()' declarations\n- How to nest BEM classes in SASS\n\nTools like linters for CSS and JS can help enforce some of these agreed conventions to a degree.\n\n### Don't use third parties because 'it's easy'\n\nWe've all seen the comics and memes about npm packages, right? That one where you load a 20kb app with 2gb of npm dependencies? Well, the exaggeration is not entirely misplaced, npm packages can quickly bloat an otherwise simple project.\n\nBut it's not a problem inherent to the npm machine, you see this sort of thing all over the place: WordPress developers are quick to grab at the plugin store for something that might be quick and easy to do themselves (we've all been there!); jQuery projects can find more and more plugins, which can be replaced by newer browser capabilities.\n\nI get it; sometimes, you don't have time. You're not alone in wanting to get something done quickly with as little friction as possible and there are many great reasons to use external plugins, packages and libraries - a robust, tested suite, for example, that does what you need it to.\n\nBut we have to **think carefully before chucking another dependency on what is ultimately _our own heaps!_**\n\nWhen considering adding a third party dependency into the mix, ask yourself a few questions:\n\n- How much extra time will this save above creating it the same feature in-house?\n- What additional weight will it add to the project? Is that worth the trade-off?\n- Is the third-party package generally well-maintained and regular improved/added to?\n- Will it introduce any errors or problems in any other areas of the site/app/etc. - e.g. conflicts?\n\n### Document document document\n\nA fairly obvious addition to the list, but document all the things! It's never not useful to have a lovely explanation of an otherwise mysterious or complex section of an app, find out what it does, why and how.\n\nWhilst not strictly a refactoring measure, the aim of refactoring is to make our development lives easier down the line and to aid in creating new and maintaining old. With that in mind, good documentation can only help us.\n\n## How do you keep things neat, tidy and smooth as butter?\n\nSo that's _continuous refactoring_. What are your thoughts? Do you have any ideas, practices you've seen work well? Share them in the comments. Let's all try to be better developers by slaying the beast of technical debt.","src/content/blog/continuous-refactoring-avoiding-technical-debt-in-the-here-and-now.mdoc","693dba5b9bce6f38","continuous-refactoring-avoiding-technical-debt-in-the-here-and-now.mdoc","design-systems-are-important",{"id":521,"data":523,"body":530,"filePath":531,"digest":532,"legacyId":533,"deferredRender":156},{"title":524,"description":525,"featured":145,"featuredimage":526,"date":527,"tags":528},"Building a design system using Bulma for rapid development that scales","Rapid front-end development that scales well depends on solid design systems. We'll explore why design systems are important, how they help and one I've love to use: Bulma CSS framework.","/img/design-systems.jpg",["Date","2019-04-17T17:04:00.000Z"],[529,177],"Design","## Successful platforms have user-friendly interfaces\n\n![Laptop, notepad and some UX wireframes](/img/design-systems.jpg 'Starting the wireframing process with sketches')\n\nUser interfaces are vital to the success of any website, app or platform; functionality is important too, but the interface is how you trigger that functionality, how you interact with the end product - inputting data and getting a response. Some interfaces, such as this very website, are quite straightforward: they present some static information and offer a way to navigate through that information via a menu or series of links.\n\nOther interfaces, such as the Facebook app or [IAM Cloud](https://www.iamcloud.com/) Portal are much more complex with lots of moving parts, buttons to trigger different functionality, and entirely separate sections to handle different features (e.g. in the IAM Cloud Portal, we have security, user authentication, and multi-factor settings in separate areas to cater for each service's very different needs).\n\n## Good interfaces rely on consistent design systems\n\nThe key to managing complex interfaces is to have a solid design system in place. A design system is a defined set of standard components or elements that can be combined to build an interface in a number of ways. It covers other areas too, such as the way it looks, spacing, animations, interactions, and colours to name a few.\n\nA unified design system is important from an internal point of view as it helps speed up development of apps and platforms: development teams are re-using tried and tested components that interact in a consistent, _predictable_ manner.\n\nFrom an end-user's perspective, having a complex UI to navigate through is made less challenging (and more intuitive) by a design-system's consistency and familiarity. This trait also reduces UI surprises because users come to expect particular things to work in a particular way.\n\nA design system can be relatively simple, such as a set of brand guidelines coupled with a UI component library. However, it can be a complex beast in its own right -take [Google's own Material Design system](https://material.io/design/) as an example.\n\n## Building interfaces in-house\n\nThe big question, of course is whether you should (or could) build a bells-and-whistles design system in-house.\n\nIn smaller teams, like our close-knit, agile development team at IAM Cloud, we spend almost all of our development time building products and services that our customers can start to use sooner rather than later.\n\nUnfortunately, this doesn't leave a lot of wiggle room to spend creating our own design systems in-house, from scratch. However, there are a lot of existing design systems out there that development teams have been using for years - frameworks such as [Twitter Bootstrap](https://getbootstrap.com/) or [Foundation by Zurb](https://foundation.zurb.com/).\n\nIn IAM Cloud (and just about anywhere else I can use it) we use Bulma.\n\n## What is Bulma?\n\n![Bulma official logo](https://bulma.io/images/made-with-bulma--semiblack.png 'Official logo of Bulma CSS Framework')\n\n[Bulma is a CSS framework](https://bulma.io/) based around modern CSS approaches, such as Flexbox. It's a competitor/alternative to the popular Bootstrap from Twitter.\n\nFrom their own website:\n\n> Bulma is a free, open source CSS framework based on Flexbox and used by more than 150,000 developers.\n\n### Why I use Bulma to build user interfaces\n\nSince joining IAM Cloud, I've been responsible for bringing the new UI of our revamped products to life. Ultimately, Bulma offers a way for us to build-out our own, IAM Cloud-branded design system and UI component library, without the addition of too much code weight or opinionated JavaScript (JS) bundled in.\n\nAmong other features, I especially like:\n\n- Bulma's simple, lightweight code base.\n- The lack of JS bundled in with the framework - this enables us to include our own JS support and functionality where needed, however we choose.\n- That it takes a very modern approach to CSS, using Flexbox to achieve a simpler grid system (or hit the holy grail of vertical centring!).\n- The customisation opportunities Bulma offers, as well as the ease of adding new components.\n- The leaning towards a more Functional CSSstyle with modifier classes to adapt components.\n- That it offers a React JS-friendly version, provided via the NPM repository.\n\nBulma is also well supported by a growing community of developers and an impressive approximate 400K downloads per month.\n\n![User interface sketches](/img/jose-alejandro-cuffia-799485-unsplash.jpg 'Photo by José Alejandro Cuffia on Unsplash')\n\nFrom a development angle, using such a consistent UI framework, with a predefined component library, allows us to manage UI changes across different apps much faster and implement new features more quickly.\n\nThe UX/UI design and deliberation time is reduced, because we don't have to focus as heavily on how things will ultimately look - we're already working within a branded component framework! We just have to decide how to put the pieces together to form a new section or feature (like our [in-progress SSO/AUTH product revamp](https://blog.iamcloud.com/what-were-developing-at-iam-cloud)).\n\n## How I use Bulma in user interfaces\n\nCurrently, I work within a mix of front-end technologies to develop applications, but mainly React. I'm transitioning over to React for new projects and slowly migrating any legacy code bases over.\n\nBefore diving into any new projects with IAM Cloud, however, I was able to build a lightweight UI component library to demonstrate how our styled and branded components should look, including their various options. It involves deployable assets (including CSS and JS files) but a 'live' demo site to showcase the components.\n\nWith that in place, our new projects can begin with our branded Bulma base. This means that any new interfaces we produce can quickly have that familiar, IAM Cloud-y look and feel that our customers have come to know.\n\nAs an example, let's take a brief look at how we're building our new SSO/Auth product interface.\n\n#### Step one - we begin with wireframes\n\n[IAM Cloud's Simple Single Sign On](https://www.iamcloud.com/sso/) is an authentication and single sign on system managing any organisation's sign on and multi-factor authentication needs. However, as I wrote about in my [recent article on developments at IAM Cloud](https://blog.iamcloud.com/what-were-developing-at-iam-cloud), we're revamping and redesigning our product lines, starting with SSO. Before we turn to our Bulma library, we started things off with a set of sketch wireframes like these:\n\n![IAM Cloud Simple Sign On wireframes](/img/iamc-sso-wireframe.jpg 'IAM Cloud Simple Sign On wireframes')\n\nWhilst a little rough and ready, this basic visual layout provides a guide to how a feature might look and function before we spend a lot of costly development time heading down the wrong path. Already, as you'll see in the next screen shot, we can start to break up the whole interface into smaller, isolated parts that translate into components within our Bulma-based library.\n\n#### Step two - translate wireframes into living interfaces\n\nNow that we have a general direction to work from, I can start to build up the real interface using the Bulma UI component library. Here's a sneak peak of our the new redesign:\n\n![IAM Cloud SSO redesign mock up](/img/iamc-sso-ui.jpg 'IAM Cloud SSO redesign mock up')\n\nAlthough still very much a work in progress, you can see how we are able to take a sketched idea and quickly turn it into a working model.\n\n## What are your experiences with design systems\n\nDo you have any? What do you build applications or sites with in your team? Home-grown, off the shelf, hybrid-style? Bosh some details in the comments and let's have a discussion!","src/content/blog/design-systems-are-important.mdoc","6b15d2d6ea31ee72","design-systems-are-important.mdoc","how-to-build-a-multi-image-carousel-in-react-and-tailwind",{"id":534,"data":536,"body":543,"filePath":544,"digest":545,"legacyId":546,"deferredRender":156},{"title":537,"description":538,"featured":156,"featuredimage":539,"date":540,"tags":541},"How to build a multi-image carousel in React and Tailwind","Ever wanted to learn how to build a multi-item carousel in React? Well, in this article we'll do just that by building a multi-item or multi-image carousel in vanilla React using Vite.js and some Tailwind CSS","/img/react-multi-item-carousel-blog-header.png",["Date","2022-03-10T09:13:41.000Z"],[542,149,151],"Tutorial","![Blog header image for React multi-image carousel](/img/react-multi-item-carousel-blog-header.png 'Blog header image for React multi-image carousel')\n\nI had a client project recently that required some nifty coding to produce **a multi-item carousel in React**. Really, it was a **multi-image carousel** with a few extra bits, but as we'll soon see, what we'll build in this article can be easily modified to suit whatever multi-items you'd like to stuff into your carousel.\n\nLet's get building.\n\n## What we'll be building\n\nTo be honest, it's difficult to find a solid definition of what exactly a 'multi-item carousel' or 'multi-image carousel' is, let alone finding a good example of one built in React. Sometimes it seems the terms 'carousel', 'slider', and others get all interchanged and mingled around to the point where it can be confusing...\n\nMy definition or requirements looked like this:\n\n> I wanted to create a fixed-width container that housed several child items (mainly images with overlays for my purposes) arranged horizontally with an equal gap between them. Any child items that overflowed the container's bounds would be hidden off-screen, yet scrollable to bring them into view along the horizontal axis.\n\nSee the following image to illustrate what I mean:\n\n![Example of how a multi-item carousel can work](/img/muti-item-carousel-example.png 'Example of how a multi-item carousel can work')\n\nThere are some existing packages in the wild, such as this one [react multi carousel](https://www.npmjs.com/package/react-multi-carousel), which is worth a look, but often they're too complex, or just not what we need.\n\nWhat we're building here is a simple, minimal (as possible), example that fits the definition above, and to my mind embodies the wider definition of a multi-item carousel built in React.\n\nYou can view the finished multi-item carousel here [https://codesandbox.io/s/react-multi-item-carousel-uvmchp](https://codesandbox.io/s/react-multi-item-carousel-uvmchp 'Codesandbox link to React multi-item carousel demo').\n\nAlso, there's a repo with the code in here, [react-carousel on GitHub](https://github.com/bpk68/react-carousel).\n\n### Tools used\n\nFor this React multi-item carousel, I've chosen to build it using the [really popular Vite.js](https://vitejs.dev/ 'Vite JavaScript bundler') and [Tailwind CSS](https://tailwindcss.com/ 'Utility-first CSS framework Tailwind CSS'). Tailwind just allows for rapid building of websites and apps by removing all the fluff of starting with a blank CSS slate and gives us the utility-based CSS building blocks to quickly put things like this together.\n\nVite is just used to bundle and build our JavaScript so React works, but you can use whatever you like. Same with Tailwind -- use any CSS you like, but obviously you'll have to code the matching styles that Tailwind gives us into your version.\n\nThe key point in the demo is the `carousel.jsx` component that we'll see in a minute.\n\n## Building the multi-image carousel in React\n\nEnough preamble; let's build our multi-image carousel in React and Tailwind, starting with the scaffolding parts.\n\nThe exact set-up with Vite and Tailwind is outside the scope of this article, so I'm assuming you have some sort of React project set up and ready to go that also has Tailwind installed and configured.\n\n### Carousel data\n\nIn the finished demo you'll see that each carousel item looks like this:\n\n```jsx\n\u003Cdiv key={index} className=\"...\">\n  \u003Ca\n    href={resource.link}\n    className=\"...\"\n    style={{ backgroundImage: `url(${resource.imageUrl || ''})` }}\n  >\n    \u003Cimg src={resource.imageUrl || ''} alt={resource.title} className=\"...\" />\n  \u003C/a>\n  \u003Ca href={resource.link} className=\"...\">\n    \u003Ch3 className=\"...\">{resource.title}\u003C/h3>\n  \u003C/a>\n\u003C/div>\n```\n\nAnd that's it. That's a single carousel item. I've omitted the Tailwind classes from this to keep it a little cleaner, but you can see that this could be whatever you like to show in the carousel, I've just gone with images inside a clickable link, then a heading level 3 that will be displayed on hover.\n\nThe main point here is that we're pulling data in to use where we have things like `href={resource.link}` from a file `data.json`, which looks like this:\n\n```json\n{\n  \"resources\": [\n    {\n      \"title\": \"Find me on Mastodon\",\n      \"link\": \"https://indieweb.social/@kendalmintcode\",\n      \"imageUrl\": \"https://placeimg.com/300/300/any\"\n    },\n    {\n      \"title\": \"Welcome to K-Tech\",\n      \"link\": \"https://k-tech.systems\",\n      \"imageUrl\": \"https://placeimg.com/300/300/animals\"\n    },\n    {\n      \"title\": \"Some sort of third title\",\n      \"link\": \"https://indieweb.social/@kendalmintcode\",\n      \"imageUrl\": \"https://placeimg.com/300/300/architecture\"\n    },\n\n    ...other entries\n\n    {\n      \"title\": \"Super item number the last\",\n      \"link\": \"https://indieweb.social/@kendalmintcode\",\n      \"imageUrl\": \"https://placeimg.com/300/300/tech\"\n    }\n  ]\n}\n```\n\nYou can see we have a title, link URL and image source URL in an array of objects called resources. When this `data.json` file is imported into the carousel component we can loop through each resource item, which will become a single carousel item.\n\nAgain, you could bend this to your needs and this data might even come from an API (the real project I use this in does just that), but it'll keep things cleaner inside our carousel component for now.\n\n[![](/img/cta/cta-remote-dev-jobs_banner.png)](https://remotedevjobs.uk 'Find your next fully remote deb job in the UK')\n\n### Basic styles\n\nThe only other thing to highlight from the demo point of view is the starting styles. In the main App component, `app.jsx` we have this:\n\n```jsx\nfunction App() {\n  return (\n    \u003Cdiv className=\"2xl:container 2xl:mx-auto 2xl:px-0 py-3 px-10\">\n      \u003CCarousel />\n    \u003C/div>\n  );\n}\n```\n\nReally simple and all it's doing is pulling in the carousel component and wrapping it in a div with some basic tailwind classes on it, to fix the width on very large screens and add some nice padding around the carousel for nicer display purposes.\n\nNext, in the `styles.css` file, some basic CSS:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n```\n\nUp top we have the necessary Tailwind imports, then we just strip off the padding and margin from body and HTML, and set all box-sizing to `border-box`.\n\nAgain, these styles aren't super important for your purposes, but I want to be clear up-front about where some minor little display styles are and what they're doing.\n\n## The multi-item carousel component\n\nAnd now, the part you've been waiting for, the main carousel component itself. In the `carousel.jsx` component you'll see the following imports:\n\n```jsx\nimport { useState, useRef, useEffect } from 'react';\n\n// Data\nimport data from './data.json';\n```\n\nWe've already mentioned the data that we're pulling in from our JSON file, but yours might be coming from your own JSON data, an API, a database, wherever. The key point here is that we're going to be using three hooks from React, `useState`, `useRef` and `useEffect`.\n\n### The carousel JSX\n\nPerhaps counter-intuitively we'll start with the output JSX from the component. It looks like this:\n\n```jsx\nreturn (\n  \u003Cdiv className=\"carousel my-12 mx-auto\">\n    \u003Ch2 className=\"text-4xl leading-8 font-semibold mb-12 text-slate-700\">\n      Our epic carousel\n    \u003C/h2>\n    \u003Cdiv className=\"relative overflow-hidden\">\n      \u003Cdiv className=\"flex justify-between absolute top left w-full h-full\">\n        \u003Cbutton\n          onClick={movePrev}\n          className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n          disabled={isDisabled('prev')}\n        >\n          \u003Csvg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-12 w-20 -ml-5\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            strokeWidth={2}\n          >\n            \u003Cpath\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M15 19l-7-7 7-7\"\n            />\n          \u003C/svg>\n          \u003Cspan className=\"sr-only\">Prev\u003C/span>\n        \u003C/button>\n        \u003Cbutton\n          onClick={moveNext}\n          className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n          disabled={isDisabled('next')}\n        >\n          \u003Csvg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-12 w-20 -ml-5\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            strokeWidth={2}\n          >\n            \u003Cpath\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M9 5l7 7-7 7\"\n            />\n          \u003C/svg>\n          \u003Cspan className=\"sr-only\">Next\u003C/span>\n        \u003C/button>\n      \u003C/div>\n      \u003Cdiv\n        ref={carousel}\n        className=\"carousel-container relative flex gap-1 overflow-hidden scroll-smooth snap-x snap-mandatory touch-pan-x z-0\"\n      >\n        {data.resources.map((resource, index) => {\n          return (\n            \u003Cdiv\n              key={index}\n              className=\"carousel-item text-center relative w-64 h-64 snap-start\"\n            >\n              \u003Ca\n                href={resource.link}\n                className=\"h-full w-full aspect-square block bg-origin-padding bg-left-top bg-cover bg-no-repeat z-0\"\n                style={{ backgroundImage: `url(${resource.imageUrl || ''})` }}\n              >\n                \u003Cimg\n                  src={resource.imageUrl || ''}\n                  alt={resource.title}\n                  className=\"w-full aspect-square hidden\"\n                />\n              \u003C/a>\n              \u003Ca\n                href={resource.link}\n                className=\"h-full w-full aspect-square block absolute top-0 left-0 transition-opacity duration-300 opacity-0 hover:opacity-100 bg-blue-800/75 z-10\"\n              >\n                \u003Ch3 className=\"text-white py-6 px-3 mx-auto text-xl\">\n                  {resource.title}\n                \u003C/h3>\n              \u003C/a>\n            \u003C/div>\n          );\n        })}\n      \u003C/div>\n    \u003C/div>\n  \u003C/div>\n);\n```\n\nBreaking that down a little, we start with a simple container and heading level 2:\n\n```jsx\n\u003Cdiv className=\"my-12 mx-auto\">\n  \u003Ch2 className=\"text-4xl leading-8 font-semibold mb-12 text-slate-700\">\n    Our epic carousel\n  \u003C/h2>\n  \u003Cdiv className=\"relative overflow-hidden\">... rest of carousel jsx\u003C/div>\n\u003C/div>\n```\n\nNothing too fancy thus far, we're just adding some vertical margins and displaying it centrally on the screen. With the heading, we're adjusting the size to suit our needs.\n\nThe `div` that features the `relative overflow-hidden` classes will house our images or items and the left and right controls. We hide the overflow so we can scroll it into view later, and the `relative` class allows us to absolutely position the scroll buttons.\n\nNext up, we have a block that houses our left and right scroll buttons:\n\n```jsx\n\u003Cdiv className=\"flex justify-between absolute top left w-full h-full\">\n  \u003Cbutton\n    onClick={movePrev}\n    className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n    disabled={isDisabled('prev')}\n  >\n    \u003Csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"h-12 w-20 -ml-5\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n    >\n      \u003Cpath strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\n    \u003C/svg>\n    \u003Cspan className=\"sr-only\">Prev\u003C/span>\n  \u003C/button>\n  \u003Cbutton\n    onClick={moveNext}\n    className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n    disabled={isDisabled('next')}\n  >\n    \u003Csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"h-12 w-20 -ml-5\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n    >\n      \u003Cpath strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\n    \u003C/svg>\n    \u003Cspan className=\"sr-only\">Next\u003C/span>\n  \u003C/button>\n\u003C/div>\n```\n\nOne of the downsides to Tailwind is that the class lists get quite verbose and subsequent JSX gets a little longer, but we'll break each part down here.\n\nStarting with the scroll left/right button container:\n\n```jsx\n\u003Cdiv className=\"flex justify-between absolute top left w-full h-full\">\n  ...buttons\n\u003C/div>\n```\n\nWe position the block absolutely, add flexbox to the display type, then push the child items (i.e. left/right buttons) to the far left and right edges using `justify-between`. Finally, we force the container to have full width and height.\n\nNext up, the buttons:\n\n```jsx\n\u003Cbutton\n  onClick={movePrev}\n  className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n  disabled={isDisabled('prev')}\n>\n  \u003Csvg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-12 w-20 -ml-5\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    strokeWidth={2}\n  >\n    \u003Cpath strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\n  \u003C/svg>\n  \u003Cspan className=\"sr-only\">Prev\u003C/span>\n\u003C/button>\n```\n\nI'm just showing the 'prev' button for now as both buttons are the same, just the SVG icon differs between left and right chevron. We're assigning the function `movePrev` to the button's click handler. The other button has a matching `moveNext` click handler and we'll define these click handlers in the logic section coming up.\n\nBoth buttons have a `disabled` property that's calculated using the `isDisabled()` function that we'll also cover next in the logic section of the article.\n\nAnd each button has a butt load of Tailwind classes on it, but they essentially do the following:\n\n- Add base background colours and opacity\n- Add hover colors with less opacity\n- Add disabled styles (i.e. when you can't move left or right any further)\n- Set the height and width\n- Set some base transitions just for nice look and feel when you hover over them\n\nThe other thing of note here is that we've included a simple span element with the `sr-only` class so that screen readers can still understand what they're dealing with. If we just have images or SVGs on there it'll be harder for less abled or visually impaired users to understand what the button is and does.\n\nWe're using SVG icons from the excellent (and free!) [heroicons](), which is another Tailwind CSS product, but you could use your own icons, no icons, whatever you like here.\n\nAnd finally, we'll look at the main carousel item loop:\n\n```jsx\n\u003Cdiv\n  ref={carousel}\n  className=\"carousel-container relative flex gap-1 overflow-hidden scroll-smooth snap-x snap-mandatory touch-pan-x z-0\"\n>\n  {data.resources.map((resource, index) => {\n    return (\n      \u003Cdiv\n        key={index}\n        className=\"carousel-item text-center relative w-64 h-64 snap-start\"\n      >\n        \u003Ca\n          href={resource.link}\n          className=\"h-full w-full aspect-square block bg-origin-padding bg-left-top bg-cover bg-no-repeat z-0\"\n          style={{ backgroundImage: `url(${resource.imageUrl || ''})` }}\n        >\n          \u003Cimg\n            src={resource.imageUrl || ''}\n            alt={resource.title}\n            className=\"w-full aspect-square hidden\"\n          />\n        \u003C/a>\n        \u003Ca\n          href={resource.link}\n          className=\"h-full w-full aspect-square block absolute top-0 left-0 transition-opacity duration-300 opacity-0 hover:opacity-100 bg-blue-800/75 z-10\"\n        >\n          \u003Ch3 className=\"text-white py-6 px-3 mx-auto text-xl\">\n            {resource.title}\n          \u003C/h3>\n        \u003C/a>\n      \u003C/div>\n    );\n  })}\n\u003C/div>\n```\n\nWith our final JSX, we start with some classes that hide the overflow of any child items, display child items using flexbox, provide a basic gap between carousel items, and then add a bunch of scroll snap styles using [Tailwind's handy scroll-snap](https://tailwindcss.com/docs/scroll-snap-type) facilities.\n\nThe scroll snap stuff isn't 100% necessary but it's recommended as it adds a nice little feel to how each item _snaps_ into place when scrolled left to right, and helps prevent the scroll ending up weird half-way place between image items.\n\nNext up we have a classic React pattern of looping through some sort of array with the `.map()` function and spitting out some repeated JSX for each iteration.\n\nFor each resource item we produce the following JSX:\n\n```jsx\n\u003Cdiv\n  key={index}\n  className=\"carousel-item text-center relative w-64 h-64 snap-start\"\n>\n  \u003Ca\n    href={resource.link}\n    className=\"h-full w-full aspect-square block bg-origin-padding bg-left-top bg-cover bg-no-repeat z-0\"\n    style={{ backgroundImage: `url(${resource.imageUrl || ''})` }}\n  >\n    \u003Cimg\n      src={resource.imageUrl || ''}\n      alt={resource.title}\n      className=\"w-full aspect-square hidden\"\n    />\n  \u003C/a>\n  \u003Ca\n    href={resource.link}\n    className=\"h-full w-full aspect-square block absolute top-0 left-0 transition-opacity duration-300 opacity-0 hover:opacity-100 bg-blue-800/75 z-10\"\n  >\n    \u003Ch3 className=\"text-white py-6 px-3 mx-auto text-xl\">{resource.title}\u003C/h3>\n  \u003C/a>\n\u003C/div>\n```\n\nThis is what we saw in the early part of the article but with the Tailwind classes back in. What's happening here is that we have two blocks for each resource item.\n\nThe first block has a forced square width and height as well as centring any text. Inside of this, we have a link and an image. We're using an image-hiding pattern here that aids accessibility whilst giving us a tip-top UI. The image is given a `src` property and an alt tag, but is visually hidden from display. This allows screen readers to _see_ the image but handles situations where the image is a wonky or irregular shape.\n\nWe attach the same image URL to the background property of the item and then set background styles via Tailwind to centralise and cover the full height and width of the item with the image.\n\nThe second block is another link that contains a heading level 3 element with the resource's title. Like its image block friend, it's given a full height and width, but 0% opacity so it's effectively 'hidden' from view (hiding in plain sight 😆).\n\nWhen hovered on it's given a full opacity with a translucent background colour and contrasting white text. It's also positioned absolutely so we can display it on top of the image; the z-index value of 10 really helps here too.\n\nThis combination pattern of having some sort of image with some sort of hovered content appearing is very common. Although it's worth bearing in mind that **for mobile purposes you'd likely want an alternative approach** as the hover stuff won't work.\n\n### The carousel logic\n\nNow for the fun part: making the carousel be more, well, carouselly...\n\nLet's start with the component definition and initial variables:\n\n```jsx\nconst Carousel = () => {\n  const maxScrollWidth = useRef(0);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carousel = useRef(null);\n```\n\nWe define the component and then set up some variables:\n\n- `maxScrollWidth` - we're going to store the carousel's total scrollable width in this variable once we finish rendering the component. We're using the `useRef` Hook from React here because it allows us to create a fixed or static value that won't change between renders. Important because the component is likely to rerender by clicking the prev/next buttons.\n- `currentIndex` - this is a simple state value that will keep track of what 'page' we're on. It'll help us later on to determine if we can move forward or backwards.\n- `carousel` - we're using the `useRef` Hook again, but this time to create a static reference to the underlying DOM element that is a `div` which houses the carousel contents. We'll need this to help work out when and how to scroll and get values relating to the carousel's width.\n\nWith the variables in place, let's look at the scrolling handlers...\n\n```jsx\nconst movePrev = () => {\n  if (currentIndex > 0) {\n    setCurrentIndex((prevState) => prevState - 1);\n  }\n};\n```\n\nFor moving backwards, the `movePrev` function handles button clicks on the 'prev' button. We check to see if the `currentIndex` value is greater than zero and if it _is_, then we simply update the value in state to one _less_ than the current value.\n\nIf we're already at zero then it doesn't make sense to go back any more so the function short circuits out and doesn't do anything.\n\n```jsx\nconst moveNext = () => {\n  if (\n    carousel.current !== null &&\n    carousel.current.offsetWidth * currentIndex \u003C= maxScrollWidth.current\n  ) {\n    setCurrentIndex((prevState) => prevState + 1);\n  }\n};\n```\n\nWhen the 'next' button is clicked it's `moveNext`'s time to shine. We're essentially doing the exact opposite of the `movePrev` function but things are a bit trickier. When moving backwards we just need to know when we hit zero. But when scrolling _forwards_ we don't know how many times we can do that, it's not a hard limit defined by a single number.\n\nInstead, we need to work out if the currently visible slice (i.e. width) of the carousel, times the current _page_, is going to be _less than_ the maximum scrollable width of the carousel's content -- i.e. the carousel's total width, even that which isn't visible.\n\nIf it's going to be _more_ than the max-width, it doesn't make sense to allow users to scroll any more, so we don't do anything.\n\nHowever, if our conditional statement passes, we do the opposite of `movePrev` and update the `currentIndex` value in state to one higher than its current value.\n\n> On their own, these button click handlers don't physically scroll the carousel contents, but we'll see in a moment how we can watch the value of `currentIndex` using the `useEffect` Hook to make that happen.\n\nNext up, our `isDisabled` helper function:\n\n```jsx\nconst isDisabled = (direction) => {\n  if (direction === 'prev') {\n    return currentIndex \u003C= 0;\n  }\n\n  if (direction === 'next' && carousel.current !== null) {\n    return (\n      carousel.current.offsetWidth * currentIndex >= maxScrollWidth.current\n    );\n  }\n\n  return false;\n};\n```\n\nWhilst the `movePrev` and `moveNext` click handlers will take care of actually triggering a scroll (or not), our users won't get any visual cues that they can or can't actually scroll. That's where our `isDisabled` function comes in.\n\nOn each render and rerender of the component, the buttons call out to the `isDisabled` function to see if their `disabled` attribute should be true, or false.\n\nIt accepts a `direction` argument and checks that first. You'll see that the conditional statements are very similar to the `movePrev` and `moveNext` ones. If we can't scroll left (previous) any more, then it'll return _true_ so that the button is disabled. Likewise, if we can't scroll right (next) any more we'll also return _true_ so the next button is disabled.\n\nFailing all else, we'll just return _false_ so that the buttons aren't disabled should the execution fall past our 'if' statements.\n\nIf a button is disabled, then Tailwind's `disabled:` styles will kick in and the user will find it much more obvious as to what they can and can't do.\n\nOnto the part that makes the magic happen, the first `useEffect` Hook:\n\n```jsx\nuseEffect(() => {\n  if (carousel !== null && carousel.current !== null) {\n    carousel.current.scrollLeft = carousel.current.offsetWidth * currentIndex;\n  }\n}, [currentIndex]);\n```\n\nIt's a deceptively simple little function that powers the scrolling of the carousel. The Hook accepts an array of dependencies that cause the code inside the Hook to fire when any of their values change.\n\nIn our case, we've added the `currentIndex` value as a dependency. So, when this value changes, say when we press the next or prev buttons, the code inside will run.\n\n[![](/img/react-course-cta.png)](https://www.newline.co/courses/beginners-guide-to-real-world-react \"Learn React with The Beginner's Guide to Real World React\")\n\nThe first thing that happens is a null check to make sure that we've actually got a reference to the underlying carousel `div` element from our `useRef` Hook.\n\nIf we do, then we simply update the carousel's `scrollLeft` value to the carousel's currently visible width multiplied by the current index or page or _slice_ of the content that we want to see.\n\n> As a simplified example of the maths involved here think of it like this...\n>\n> If we have 10 items in our carousel each being 100 pixels wide, then we have a total scrollable width of 1000 pixels (10 items x 100 px).\n>\n> However, because of the size of screen, the _visible_ width of the carousel is only 250 pixels (remember, all the overflow is hidden by the CSS). This means we'll only be able to see two and a half items at any one time.\n>\n> If we start from the initial view, 0 scroll left position, when we click 'next', the current index will be bumped up to '1'.\n>\n> Now, we need to scroll the visible content `currentIndex` times the currently visible content width (1 x 250 px). Our carousel's new `scrollLeft` value will become 250 px and the carousel's contents will scroll over.\n\nThis will cause the contents of the carousel to scroll to the left and because of the smooth scroll and snap classes provided us by Tailwind, this happens nice and smoothly with a satisfying little 'snap' animation. Pretty neat!\n\nThere's just one last thing to take care of and that's a `useEffect` that fires on component render:\n\n```jsx\nuseEffect(() => {\n  maxScrollWidth.current = carousel.current\n    ? carousel.current.scrollWidth - carousel.current.offsetWidth\n    : 0;\n}, []);\n```\n\nWe're passing in an empty array here, so this Hook only fires once, on the first component render. Its sole purpose is to get the carousel element's total scrollable content width _minus_ the currently visible offset width value, and store this value in the `maxScrollWidth` ref value.\n\nThis will give us the bounding boxes that allow us to work out how much to scroll, how many times we can scroll before we run out of road, and help make the magic happen.\n\n## The final multi-item carousel component\n\nThe full `carousel.jsx` component looks like this:\n\n```jsx\nimport { useState, useRef, useEffect } from 'react';\n\n// Data\nimport data from './data.json';\n\nconst Carousel = () => {\n  const maxScrollWidth = useRef(0);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carousel = useRef(null);\n\n  const movePrev = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex((prevState) => prevState - 1);\n    }\n  };\n\n  const moveNext = () => {\n    if (\n      carousel.current !== null &&\n      carousel.current.offsetWidth * currentIndex \u003C= maxScrollWidth.current\n    ) {\n      setCurrentIndex((prevState) => prevState + 1);\n    }\n  };\n\n  const isDisabled = (direction) => {\n    if (direction === 'prev') {\n      return currentIndex \u003C= 0;\n    }\n\n    if (direction === 'next' && carousel.current !== null) {\n      return (\n        carousel.current.offsetWidth * currentIndex >= maxScrollWidth.current\n      );\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    if (carousel !== null && carousel.current !== null) {\n      carousel.current.scrollLeft = carousel.current.offsetWidth * currentIndex;\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    maxScrollWidth.current = carousel.current\n      ? carousel.current.scrollWidth - carousel.current.offsetWidth\n      : 0;\n  }, []);\n\n  return (\n    \u003Cdiv className=\"carousel my-12 mx-auto\">\n      \u003Ch2 className=\"text-4xl leading-8 font-semibold mb-12 text-slate-700\">\n        Our epic carousel\n      \u003C/h2>\n      \u003Cdiv className=\"relative overflow-hidden\">\n        \u003Cdiv className=\"flex justify-between absolute top left w-full h-full\">\n          \u003Cbutton\n            onClick={movePrev}\n            className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n            disabled={isDisabled('prev')}\n          >\n            \u003Csvg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-12 w-20 -ml-5\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              strokeWidth={2}\n            >\n              \u003Cpath\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M15 19l-7-7 7-7\"\n              />\n            \u003C/svg>\n            \u003Cspan className=\"sr-only\">Prev\u003C/span>\n          \u003C/button>\n          \u003Cbutton\n            onClick={moveNext}\n            className=\"hover:bg-blue-900/75 text-white w-10 h-full text-center opacity-75 hover:opacity-100 disabled:opacity-25 disabled:cursor-not-allowed z-10 p-0 m-0 transition-all ease-in-out duration-300\"\n            disabled={isDisabled('next')}\n          >\n            \u003Csvg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-12 w-20 -ml-5\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              strokeWidth={2}\n            >\n              \u003Cpath\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M9 5l7 7-7 7\"\n              />\n            \u003C/svg>\n            \u003Cspan className=\"sr-only\">Next\u003C/span>\n          \u003C/button>\n        \u003C/div>\n        \u003Cdiv\n          ref={carousel}\n          className=\"carousel-container relative flex gap-1 overflow-hidden scroll-smooth snap-x snap-mandatory touch-pan-x z-0\"\n        >\n          {data.resources.map((resource, index) => {\n            return (\n              \u003Cdiv\n                key={index}\n                className=\"carousel-item text-center relative w-64 h-64 snap-start\"\n              >\n                \u003Ca\n                  href={resource.link}\n                  className=\"h-full w-full aspect-square block bg-origin-padding bg-left-top bg-cover bg-no-repeat z-0\"\n                  style={{ backgroundImage: `url(${resource.imageUrl || ''})` }}\n                >\n                  \u003Cimg\n                    src={resource.imageUrl || ''}\n                    alt={resource.title}\n                    className=\"w-full aspect-square hidden\"\n                  />\n                \u003C/a>\n                \u003Ca\n                  href={resource.link}\n                  className=\"h-full w-full aspect-square block absolute top-0 left-0 transition-opacity duration-300 opacity-0 hover:opacity-100 bg-blue-800/75 z-10\"\n                >\n                  \u003Ch3 className=\"text-white py-6 px-3 mx-auto text-xl\">\n                    {resource.title}\n                  \u003C/h3>\n                \u003C/a>\n              \u003C/div>\n            );\n          })}\n        \u003C/div>\n      \u003C/div>\n    \u003C/div>\n  );\n};\n\nexport default Carousel;\n```\n\n## Viewing the final demo\n\nHere's the finished carousel code embedded via CodeSandbox and you can [find a link to the sandbox here too](https://codesandbox.io/s/react-multi-item-carousel-uvmchp 'Codesandbox link to React multi-item carousel demo'):\n\n{% iframe\n  url=\"https://codesandbox.io/embed/fragrant-feather-uvmchp?fontsize=14&hidenavigation=1&theme=dark\"\n  label=\"react-multi-item-carousel\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}","src/content/blog/how-to-build-a-multi-image-carousel-in-react-and-tailwind.mdoc","9f17ef3c9143f633","how-to-build-a-multi-image-carousel-in-react-and-tailwind.mdoc","how-becoming-a-parent-made-me-a-better-coder",{"id":547,"data":549,"body":555,"filePath":556,"digest":557,"legacyId":558,"deferredRender":156},{"title":550,"description":551,"featured":145,"featuredimage":552,"date":553,"tags":554},"How becoming a parent made me a better coder","Having a child has made me think about how I could use some of my new found parenting skills to improve my web development and working life","/img/girl-1641215_1920.jpg",["Date","2018-11-09T09:27:00.000Z"],[177],"![Father and daughter drawing together](/img/girl-1641215_1920.jpg)\n\nYes, yes I know, it's common to see people you know have a kid and then become one of those insufferable types who thinks they've unlocked some secret achievement that 'you wouldn't understand until you have a child yourself'. They start lecturing people and giving advice as if it's been passed on to them via a sage, mystical power.\n\nI'm not one of those. This isn't one of those lectures.\n\nNevertheless, having a child has made me a much better husband, person, colleague, coder, you name it! Mainly because there are a few areas where you have to up your game if you're going to survive the gauntlet of raising a successful, helpful human.\n\n### Having a growth mindset\n\nI came across this term on a poster in a school visit. It was a comparative list with a very negative set of outlooks on one side and a more 'growth-minded' set on the other. Obviously aimed more at the primary school's level, examples included:\n\n- I can't do this (_negative_) | what else can I try? (_growth_)\n- I've tried everything (_negative_) | what am I missing? (_growth_)\n- My friend's always doing well (_negative_) | what can I learn from them? (_growth_)\n\nIt's inevitable as a developer that you will hit some kind of wall; whether it's something new that you don't fully grasp yet (_cough_ [Redux](https://redux.js.org/)) or a difficult challenge to solve using JavaScript. And, when you hit these walls, it's easy to feel overwhelmed, or not good enough, or just stuck.\n\n![Fixed mindset vs. growth mindset](/img/growth-mindset-examples.png 'Fixed mindset vs. growth mindset. (credit: https://www.big-change.org/)')\n\nBy shifting my thinking, by applying these sorts of [positive repurposing of dead-end mental pathways](https://www.mindsetworks.com/science/) has helped me rebound and hit my goals, especially when it comes to overcoming challenges at work.\n\nAs a bonus, because of the repetitive and objective nature of training this mindset into your little one (i.e. another human), it becomes easier to help motivate your colleagues into action - **Pro tip**: baby voices work less on your colleagues!\n\n### Compromise is key\n\nHave you ever tried to enter an argument with a small child? No? Well, it's a bit like that scene in Interstellar where they go onto the planet on the black hole's event horizon and one hour there equals seven years everywhere else. Except the argument is the black hole, you age seven years regardless of where you are and end up losing whichever way you spin it...\n\nSeriously though, you want to raise a decent, reasonable human being, so it's natural to want to object when they lie on the floor screaming like you've stabbed them because you brought the blue cup instead of the red (spoiler alert: they asked for the red cup to begin with).\n\nWhilst you want to get your way (having them act less possessed), they want _their_ way (however unreasonable that is) too and it's important to allow them to have their needs acknowledged and met to a degree, without caving and teaching them that screaming equals results.\n\nWhen it comes to developing, this is just as true. I've never been a 'I want it all my way' type and I think of myself as a team player, but I will admit that I've had my nose put out of joint a few times because I've felt that a particular choice wasn't the right one for a particular project.\n\nBeing objective and reasonable takes practice and thought. In the end, sometimes it is better to reach an accord and move on for the greater good than to dig in and cause momentum-killing friction within a project, only because you didn't get your way.\n\n### Good enough > perfect\n\nDealing with a small person who has their own ideas, wants and time-schedule means that you have to make decisions that sometimes result in getting out the door a little underdressed, or with random socks (to be fair, I do this on purpose) or without brushing your hair quite the way you'd like to.\n\nChasing perfection is a fools errand. Occasionally, you just have to do a _good_ job and improve it as you go.\n\nMVP, ship now, fail fast, nightly releases. There are lots of terms that we use in our coding world that align to the idea of doing something well and working on it, above getting something perfect that never sees the light of day.\n\nIt's helped me to really see the value in building things efficiently that can be worked on and moulded as we go, rather than developing a fully-featured masterpiece that will probably never exist.\n\n### Action > planning (usually)\n\nSimilar to the last section, how many times have you sat in meetings about meetings about planning, only to have walked away with less time on this earth than you started with and no clear plan of action?\n\nIt's all too easy to get caught up in the fine details and the need to have everything nailed down, ironed out and planned within an inch of its life, rather than making something happen and shaping it as it grows.\n\nWith the child, last minute curve balls are always coming up and you have to deal with them; planning - certainly with any degree of magnitude - doesn't happen or go as planned.\n\nRelating to developing the webs, over the course of my career I've discovered that this approach of deciding on a direction and setting sail, adjusting course as you go is far more rewarding than drowning in plans.\n\n![The Agile development process. (credit: https://www.axian.com)](/img/agile-graphic.jpg 'The Agile development process. (credit: https://www.axian.com)')\n\nThis is one of the overall themes of using Agile. Yes, I know, it's not as simple as that and there are definitely planning stages involved, but the general approach is to define a set of actions and work on them to deliver a feature or function in short, iterative timeframes.\n\nFocusing on action over (too much) planing helps in a number of ways:\n\n- you can ship features and deliverables sooner\n- shipping early(ier) means you can get feedback and real-world metrics sooner to inform direction and improvements\n- changes in scope or direction are less jarring and cause fewer problems\n\nOf course, there are situations where people's lives depend on getting it right first time so this isn't great advice for everything. However, when it comes to most situations, especially software development, I firmly believe in action above the quagmire of over planning.\n\n### Rediscover by reimagining\n\nKids have a great ability to take something ordinary, say a wooden spoon, and transform it into a work of magical imagination, becoming a sword or a magic wand. When you join in, seeing through their eyes, you start to engage and unlock some of that imagination that's all too often lost or buried by the routine of adulthood.\n\nBringing it back to coding the code, how often have you left a new framework or library to gather dust because it became a chore, or too mundane, losing some of its appeal or spark?\n\nNow, you're unlikely to take a CSS framework or technique and turn it into a rampaging dinosaur or sword of ages, but by talking with advocates on Twitter, in the workplace or discussing possible ideas and use cases with colleagues, you might just rekindle some lost imagination or purpose for an aspect of your tools that you had lost or forgotten.\n\n### Everyone should have a voice\n\nThis is the important one. If you ignore everything else here, this is the one to take away. One of the biggest mistakes with kids is to treat them like kids, give them very little credit and to deny them a voice, a say so in their own life.\n\nYes, we're not talking about giving a three year old a nail gun and telling them 'it's time you learned how to put up a fence'. Instead, we're talking about letting them share their thoughts and opinions on things that they're involved in, matters that affect them.\n\nSame with development teams (or any teams for that matter). I've seen it before in some of the more toxic places I've encountered where junior or less experienced devs have their ideas steamrollered, voices drowned out by the old guard, stalwart gatekeepers or even well-meaning types who just forget that inexperience does not mean not insightful.\n\nSo take the time to listen to all members of the team (even some outside of the team), gather and hear their suggestions because you never know what you might uncover when you do.\n\nWhat have you learned from your experiences (with or without a child)? How have they made you better at your job? Share your tips in the comments.","src/content/blog/how-becoming-a-parent-made-me-a-better-coder.mdoc","86f5053d68050e7c","how-becoming-a-parent-made-me-a-better-coder.mdoc","how-to-build-astro-site-with-graphql",{"id":559,"data":561,"body":569,"filePath":570,"digest":571,"legacyId":572,"deferredRender":156},{"title":562,"description":563,"featured":156,"featuredimage":564,"date":565,"tags":566,"imgtitle":568},"How to build a fullstack Astro website with GraphQL","Building an Astro site with GraphQL is easier than you think! Learn how to build an Astro website in SSR mode, that runs a serverless GraphQL API to serve data from anywhere you like.","/img/blog-headers/astro-and-graphql-blog-header.png",["Date","2023-10-03T09:25:41.000Z"],[542,149,567],"Astro","FULLSTACK ASTRO + GRAPHQL","![Blog header image for building a fullstack Astro site and GraphQL](/img/blog-headers/astro-and-graphql-blog-header.png 'Blog header image for fullstack Astro and GraphQL')\n\n[Astro](https://astro.build/) is a brilliant front-end framework for content-driven sites. Hooking it up to an API is easy, but using it in a fullstack approach like you would with Next JS is less obvious.\n\nIf, like me, you've been looking for a way to **build a fullstack web app using Astro and GraphQL**, but struggled to find much information online, then keep reading as we're doing just that!\n\nThere's a little intro next, but you can [skip to the building](#building-out-the-fullstack-app-with-astro-and-graphql) if you're keen to start building your very own fullstack app with Astro and GraphQL.\n\n## Getting help along the way\n\nI have a handy [Astro starter repository](https://github.com/bpk68/astro-examples) with a growing list of examples that you might find useful. The first folder in the repo (`astro-graphql`) is the one we'll be working through here.\n\n## Why Astro and not XYZ?\n\nIf you're familiar with something like Next, it has a great routing paradigm where you can implement custom routes and route handlers. This particular set of skills allows you to essentially build a fullstack app where the UI is a React app, whilst the backend API and data fetching becomes a set of serverless functions that handle them. However, this is _all_ within the same application. It's really neat.\n\nHowever, Next can be complicated and get out of hand if you're not a seasoned Next developer. It's also locked into React, which might not be your bag. And then there are comparable meta-frameworks for other libraries, such as Nuxt for Vue and SvelteKit for Svelte. We're not here to debate what's best (spoiler alert: whichever you choose will be the best for you!), but Astro offers something _different_.\n\n[Astro](https://astro.build/) is my favourite development tool at the moment, my favourite framework. In fact, this very website is built using Astro.\n\nIts focus is on helping you create lightning fast front-end applications built as static sites at build time, with an emphasis on developing very close to the HTML output.\n\nAt some point, though, you're going to want to start connecting the front to some data (as with Next above). If you're lucky enough to have a separate backend API kicking around, then getting data from it is stupid easy. Astro has access to the global `fetch()` function for [easy data fetching](https://docs.astro.build/en/guides/data-fetching/).\n\nHowever...\n\nSometimes you don't have an existing, separate API. Sometimes it's not worth the complexities of _building_ and _hosting_ a separate API or data service. Especially for smaller web applications or MVPs.\n\nThankfully, Astro has us covered and offers both [Server-side Rendering](https://docs.astro.build/en/guides/server-side-rendering/) options and a special [API endpoint system](https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes) in its route handling.\n\nThis makes Astro a really powerful new kid on the block. It empowers us developers to create fully featured fullstack applications, without having the overhead or complexities of React + (insert all your extra dependencies here).\n\n### What about GraphQL?\n\nAstro's supports SSR via a special endpoints mechanism. They have a special syntax that exports one or more functions named after the HTTP verbs they handle. It might look like this:\n\n```typescript\nimport { getArticles } from '../lib/db';\n\nexport async function GET({ params }) {\n  const id = params.id;\n  const articles = await getArticles();\n\n  if (!articles || articles.length \u003C 1) {\n    return new Response(null, {\n      status: 404,\n      statusText: 'Not found',\n    });\n  }\n\n  return new Response(JSON.stringify(articles), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n```\n\nUsing this approach we can build out any number of REST-like endpoints to handle data in's and out's. But what if we want to leverage the powerful features of GraphQL? This is where things get tricky and there is surprisingly little documentation out there on how to build a fullstack application using Astro and GraphQL.\n\nCalling an endpoint from the UI in Astro using GraphQL is easy, it's just a `fetch` call with a GraphQL query. Building a backend route that _handles_ GraphQL requests? It's not as obvious as you'd think.\n\n## What we're building\n\nIn this tutorial, we'll be replicating Next 13's routing pattern to enable us to handle GraphQL requests in Astro's SSR mode. We'll build out a really simple Astro site that provides a straightforward GraphQL server (running as a serverless function) that will return us some mocked product data from an imaginary shopping cart.\n\nLet's dig in!\n\n## Building out the fullstack app with Astro and GraphQL\n\nFirst things first, we'll be using a few different packages to make this work. They're listed below with a little explanation of what they do:\n\n- `astro` - The star of the show, [Astro](https://astro.build) is the main framework package that makes the magic happen.\n- `@astrojs/node` - This is an [Astro adapter](https://docs.astro.build/en/guides/integrations-guide/node) which helps to run our backend parts as SSR endpoints in a node environment.\n- `@apollo/client` - This is optional (we'll discuss that later), but makes writing GraphQL requests in your UI much nicer and easier. Plus it comes with a bunch of other benefits such as memory caching.\n- `graphql` - Without the `graphql` package, we won't get very far in doing GraphQL things. Other packages, such as `graphql-yoga` depend on this to work.\n- `graphql-yoga` - [GraphQL Yoga](https://the-guild.dev/graphql/yoga-server) is mainly used as a a GraphQL server. However, it makes creating schemas and defining queries much easier, even without the server parts.\n- `graphql-tag` - This is a tiny helper utility that, among other things, provides the `gql` template literal tag to parse our GraphQL strings.\n\n> Some of the packages above are optional and I'm just using them here for the nicer developer experience they offer. For example, you could swap out GraphQL Yoga with a number of similar packages and you don't need Apollo at all. Instead, you can simply use the built-in `fetch` and define a GraphQL query that way.\n> Bringing in extra packages is always a trade off between performance, added maintenance and management, and developer productivity!\n\n### Creating an Astro project\n\nThe very first thing to do is create a new Astro project. You can do this with the `create` command like so (we're using `pnpm` but whatever your package manager of choice is, the command is very similar):\n\n```node\npnpm create astro@latest\n```\n\nAnd you'll get a really nice terminal walkthrough with some options that looks like this:\n\n![Installing Astro and creating a new project](/img/astro-install.png 'Astro project installation guide')\n\nYou can choose whatever options you wish during the guided installation, but we'll be using TypeScript for this article so it'll help to do the same. Also, when you come to choosing a starter template, just choose 'blank' as it'll be easier to walk through our files when we create them, rather than having to empty out some existing starter stuff.\n\nWith the installation done, `cd ..` into your new Astro project and open up your favourite code editor.\n\n### Adding the dependencies\n\nNext up, we'll add in some dependencies as outlined previously. Fire up your terminal and add them in:\n\n```node\npnpm add @astrojs/node @apollo/client graphql graphql-yoga graphql-tag\n```\n\n### Configuring Astro\n\nWith the dependencies in place, we need to make a couple of changes in the `astro.config.mjs` file, located in the root of your project:\n\n```js\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\n// https://astro.build/config\nexport default defineConfig({\n  output: 'server',\n  adapter: node({\n    mode: 'standalone',\n  }),\n});\n```\n\nWe're not doing too much in here, but what we _do_ do will unlock the power! We bring in the Node adapter, `node` from the `@astrojs/node` module and then add it under the `adapter` options in the Astro config. The `standalone` setting tells the adapter to work on its own. You would set this to `middleware` if you were using something like Express to host an API server.\n\n> There's a good chance you may need some sort of deployment adapter if you're planning on deploying things with a service like Netlify. That's outside the scope of this article, but the Astro docs have some [superb help on this matter here](https://docs.astro.build/en/guides/integrations-guide/netlify/).\n\nThe other main change here is to turn on SSR mode (Server-side Rendering). The `output` option can be set to `server` or `hybrid`. For `server` as we have here, we're turning on full SSR mode where every request is sent to the server to be processed and some sort of HTML returned. For `hybrid`, static mode is the default, but you can opt _in_ to SSR on a page-by-page basis.\n\n### Creating the files and folders we'll need\n\nFor smaller tutorials like this we can create all the files and folders in one go and fill them out once we're done. With that in mind, create the following folder structure -- bear in mind that all of the files and folders you'll create should live in the `./src` directory:\n\n```node\n./src\n  -| /components\n    - CartRow.astro\n  -| /data\n    - cart.ts\n    - types.ts\n  -| /lib\n    - apollo-client.ts\n  -| /styles\n    - main.css\n  -| /pages\n    -| /api\n      -graphql.ts\n```\n\n### Adding some styles\n\nThis is the easiest file to add and update. Really it's just some simple styles to make our cart table look pretty. You can skip this if you want, but the styles are short, simple and I'm sure you'll get the gist of what's going on here:\n\n```css\nhtml,\nbody {\n  box-sizing: border-box;\n  font-family: Tahoma, Geneva, sans-serif;\n  color: #54585d;\n  padding: 1rem 2rem;\n}\n\ntable {\n  border-collapse: collapse;\n  margin-block-start: 2rem;\n}\ntable td {\n  padding: 0.75rem;\n}\ntable thead th {\n  background-color: #54585d;\n  color: #ffffff;\n  font-weight: bold;\n  font-size: 0.85rem;\n  border: 1px solid #54585d;\n  text-align: center;\n  padding: 0.75rem;\n}\ntable thead th:first-child {\n  text-align: left;\n}\ntable tbody td {\n  color: #636363;\n  border: 1px solid #dddfe1;\n  text-align: center;\n}\ntable tbody td:first-child {\n  text-align: left;\n}\ntable tbody tr {\n  background-color: #f9fafb;\n}\ntable tbody tr:nth-child(odd) {\n  background-color: #ffffff;\n}\n```\n\n### Defining types and some dummy data\n\nSince we're using TypeScript, we may as well define some types for our dummy data and then the data itself. Remember, this is going to be a sample shopping cart, so open up the `./src/data/types.ts` file and pop in a `CartItem` type:\n\n```typescript\nexport type CartItem = {\n  id: number;\n  name: string;\n  price: number;\n  qty: number;\n};\n```\n\nNice. Nice and simple. Next, open up the `./src/data/cart.ts` file and we'll create a sample array of `CartItem` items that represent our shopping cart:\n\n```typescript\nimport type { CartItem } from './types';\n\nconst ShoppingCart: Array\u003CCartItem> = [\n  {\n    id: 1,\n    name: 'Apple',\n    price: 0.59,\n    qty: 4,\n  },\n  {\n    id: 2,\n    name: 'Shampoo',\n    price: 1.2,\n    qty: 3,\n  },\n  {\n    id: 3,\n    name: 'Wholemeal bread',\n    price: 0.75,\n    qty: 1,\n  },\n  {\n    id: 4,\n    name: 'Dozen eggs - large',\n    price: 2.95,\n    qty: 2,\n  },\n  {\n    id: 5,\n    name: 'Large mayonnaise',\n    price: 1.43,\n    qty: 1,\n  },\n];\n\nexport default ShoppingCart;\n```\n\nNothing super fancy here, but this is the data that will be returned from our GraphQL query once it fires up.\n\n### Getting Apollo Client involved\n\nThe full in's and out's of Apollo are beyond the scope of this article. Suffice to say it's one of the leading platforms for API development based on GraphQL. You can read all about the excellent features the Apollo Client offers in [Apollo's GraphQL documentation](https://www.apollographql.com/docs/react/).\n\nWe're using it here to simplify our GraphQL calls and eventually to make some use of its features, such as in-memory caching (although we're not going to explore this right now. That's for another day.).\n\nOpen up the `./src/lib/apollo-client.ts` file and enter the following code:\n\n```typescript\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4321/api/graphql',\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n```\n\nThis is a very tiny file, but it unlocks a lot of power from Apollo. We've brought in the `ApolloClient` function and the `InMemoryCache` helper and then created an instance of `ApolloClient`, passing in the API route that Astro will provide us. After that, we can simply export the client, ready to be used in one of our components or pages.\n\n> **Note**: you'll notice that we're hard-coding the URL here with the default Astro localhost address it typically uses. If your local development URL is different, update it here to match. You could also move that `uri` value to an environment variable instead and then you've only got to update it in one place.\n\n### Defining the GraphQL schema and creating the GraphQL endpoint\n\nNow it's time for the biggest bit of coding in the entire project (and even then it's not that big). Open up the `./src/pages/api/graphql.ts` file and enter the following code, then we'll step through it:\n\n```typescript\nimport type { APIRoute } from 'astro';\nimport { createYoga, createSchema } from 'graphql-yoga';\n\nimport ShoppingCart from '../../data/cart';\n\nconst schema = createSchema({\n  typeDefs: `\n    type CartItem {\n      id: Int!\n      name: String!\n      price: Float!\n      qty: Int!\n    }\n    type Query {\n      cart: [CartItem!]\n    }    \n  `,\n  resolvers: {\n    Query: {\n      cart: () => ShoppingCart,\n    },\n  },\n});\n\nconst { handleRequest } = createYoga({\n  schema,\n  graphqlEndpoint: '/api/graphql',\n  fetchAPI: {\n    Request: Request,\n    Response: Response,\n  },\n});\n\nexport const POST: APIRoute = async (context) => {\n  const { request } = context;\n  return handleRequest(request, context);\n};\n```\n\nThe first few lines bring in the `createYoga` and `createSchema` functions. These allow us to define a GraphQL schema and then create a GraphQL Yoga object, one which will usually then be passed to a GraphQL Yoga _server_. We also pull in our dummy data, `ShoppingCart` and a special Astro type `APIRoute`.\n\n> Astro is fairly unopinionated when it comes to how you build your websites and apps. The main thing it prefers you do is create your pages under the `/pages` folder so it knows how to route them. For example, a page under `/pages/about-us.astro` would be displayed on the route `mysite.com/about-us`. However, when it comes to using endpoints as API routes, Astro is quite insistent that you export some sort of APIRoute function that is named as the HTTP verb it handles. That's why we have our 'POST' function here to handle 'POST' requests.\n\nThen we define our schema. We have a CartItem type with properties that match our TypeScript type of the same name. And then we have a query, `cart` that returns an array of CartItem objects. This isn't a mind-blowingly complex schema with lots of relationships, but it wouldn't be any different if it were. The execution is the same and the API route we're making would work just as well.\n\nOf course, queries or mutations are no good without a GraphQL resolver to _resolve_ them and, ultimately, give us some data back. The `cart` resolver here just simply returns our `ShoppingCart` dummy data array.\n\nThe final part of the puzzle handles how our end point will cope with GraphQL requests _without_ running a dedicated server, which is usually what something like GraphQL Yoga would offer us. We create a new Yoga instance using the `createYoga` function, passing in our schema and defining an endpoint.\n\nThis endpoint matches our current route, `/api/graphql`. If we'd named it something mad like `./src/pages/batman/likes/black.ts` then the `graphqlEndpoint` value would be `/batman/likes/black`.\n\n> One other thing to highlight is that you don't have to put all your endpoint handling routes in an `/api` folder. We've done that here because contextually it makes sense: we're using the endpoint as an API for our UI.\n\nFinally, we need to add the incoming global Request and Response objects to the `fetchAPI` property, otherwise the entire thing falls apart and won't know how to handle the incoming request and response business.\n\nThe only thing left to do to wire it together is to export a 'POST' function. This function invokes the `handleRequest` method provided by GraphQL Yoga. We pass it our incoming request and the request context from Astro.\n\nBosh, all done! And that's really how simple it is to implement a GraphQL server in an Astro project. You can read more about [Astro's endpoint system](https://docs.astro.build/en/core-concepts/endpoints/) in their docs.\n\nNow onto the UI part to actually do something with our shopping cart data.\n\n### Building a table row\n\nThe penultimate task is for us to create a small Astro component that will represent a HTML table row. Open up the `./src/components/CartRow.astro` file and add in this code:\n\n```jsx\n---\nimport type { CartItem } from '../data/types';\n\ninterface Props {\n  item: CartItem;\n}\n\nconst { item } = Astro.props;\n---\n\n\u003Ctr>\n  \u003Ctd>{item.name}\u003C/td>\n  \u003Ctd>{item.qty}\u003C/td>\n  \u003Ctd>£{item.price}\u003C/td>\n  \u003Ctd>\u003Cstrong>£{(item.price * item.qty).toFixed(2)}\u003C/strong>\u003C/td>\n\u003C/tr>\n```\n\nNothing too complex here. We're bringing in our CartItem type and creating a 'Props' interface so our component knows what to expect to be passed by a parent component.\n\nAstro has a handy (and magical) mechanism for dealing with props. All you have to do is create a 'Props' interface, outlining the sorts of data your component will receive, and then destructure this from the `Astro.props` object. The `props` object is automatically provided to you by Astro at runtime and build time.\n\nFrom here, we just create a standard HTML table row with some cells in, pulling out the various properties from our CartItem type.\n\n### Bringing it all together in the home page\n\nThe very last thing we need to do (apart from running the project) is to pull everything together in our home page so we can gaze upon the fruits of our labour.\n\nFind the `./src/pages/index.astro` file that is included with the empty project you created right at the beginning. Open it up and replace the entire basic contents with the following:\n\n```jsx\n---\nimport client from '../lib/apollo-client';\nimport gql from 'graphql-tag';\n\n// Styles\nimport '../styles/main.css';\n\n// Components\nimport CartRow from '../components/CartRow.astro';\n\nimport type { CartItem } from '../data/types';\n\nconst { data, loading } = await client.query({\n  query: gql`\n    query ShoppingCart {\n      cart {\n        name\n        price\n        qty\n      }\n    }\n  `,\n});\n\nconst cartItems: Array\u003CCartItem> = data.cart;\n---\n\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Clink rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    \u003Cmeta name=\"viewport\" content=\"width=device-width\" />\n    \u003Cmeta name=\"generator\" content={Astro.generator} />\n    \u003Ctitle>Astro and Graphql\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Ch1>Welcome to the shopping cart\u003C/h1>\n    \u003Cp>Here's what's in your shopping cart today:\u003C/p>\n\n    {loading && \u003Cp>Loading your cart...\u003C/p>}\n\n    {\n      !loading && (\n        \u003Ctable>\n\t\t\t\t\t\u003Cthead>\n\t\t\t\t\t\t\u003Ctr>\n\t\t\t\t\t\t\t\u003Cth>Product name\u003C/th>\n\t\t\t\t\t\t\t\u003Cth>Quantity\u003C/th>\n\t\t\t\t\t\t\t\u003Cth>Item price\u003C/th>\n\t\t\t\t\t\t\t\u003Cth>Row total\u003C/th>\n\t\t\t\t\t\t\u003C/tr>\n\t\t\t\t\t\u003C/thead>\n\t\t\t\t\t\u003Ctbody>\n          \t{cartItems.map((item) => \u003CCartRow item={item} />)}\n\t\t\t\t\t\u003C/tbody>\n        \u003C/table>\n      )\n    }\n  \u003C/body>\n\u003C/html>\n```\n\nSince we don't have any parent layout components, we're just defining a standard HTML page. Up in the top front-matter where we do Astro coding things; we're bringing in our Apollo Client instance and the `gql` template literal helper. Then we bring in our styles and the `CartRow` component.\n\nNext, we can use the Apollo Client's `client.query` function to create our GraphQL query. If you're familiar with this from other React projects then you'll be at home with the usage here.\n\nWe can extract `data` and `loading` variables from the query before creating a `cartItems` variable from the data that's returned from the API.\n\nAfter that, the main logic is really simple. We can use the `loading` value from Apollo to switch on some loading UI:\n\n```jsx\n{\n  loading && \u003Cp>Loading your cart...\u003C/p>;\n}\n```\n\nConversely, when `data` has something for us, we'll show our table:\n\n```jsx\n{\n  !loading && (\n    \u003Ctable>\n      \u003Cthead>\n        \u003Ctr>\n          \u003Cth>Product name\u003C/th>\n          \u003Cth>Quantity\u003C/th>\n          \u003Cth>Item price\u003C/th>\n          \u003Cth>Row total\u003C/th>\n        \u003C/tr>\n      \u003C/thead>\n      \u003Ctbody>\n        {cartItems.map((item) => (\n          \u003CCartRow item={item} />\n        ))}\n      \u003C/tbody>\n    \u003C/table>\n  );\n}\n```\n\nMuch like React, we can iterate over our `cartItems` array and spit out any sort of UI that we like. Notice how much cleaner it is to return a `\u003CCartItem />` component here rather than defining a new table row and cells each time!\n\n## Running the Astro site with GraphQL\n\nAnd that, believe it or not, is all there is to it!\n\nLet's run the project to make sure it's working as expected. Fire up your terminal and enter the run command:\n\n```node\npnpm dev\n```\n\nYou should get a browser window opened at something like `https://localhost:4321` and our glorious UI come to life.\n\nYou probably won't see the loading part at all because we're not physically going anywhere off-site to fetch data, such as a database. That said, the result is quite nice:\n\n![Screenshot of the graphql table with the shopping cart items listed](/img/astro-graphql-results-table.png 'Screenshot of the graphql table with the shopping cart items listed')\n\n## Further reading and resources\n\n- Check out my [Astro starter repository](https://github.com/bpk68/astro-examples) for more examples like this one.\n- I hugely recommend reading through the [Astro docs](https://docs.astro.build/en/) as they are some of the best in the business.","src/content/blog/how-to-build-astro-site-with-graphql.mdoc","d69275bc4bdfcab5","how-to-build-astro-site-with-graphql.mdoc","how-to-build-a-restful-node-js-api-server-using-json-files",{"id":573,"data":575,"body":581,"filePath":582,"digest":583,"legacyId":584,"deferredRender":156},{"title":576,"description":577,"featured":145,"featuredimage":578,"date":579,"tags":580},"How to build a RESTful Node.js API server using JSON files","There are lots of articles on how to build a Node API server but they're either quite duff or very complex. None of them seem to deal with reading and writing to JSON files. Well let's change that by building our own Node API server using JSON data storage!","/img/nodejs-new-pantone-black_o-1.png",["Date","2019-03-22T09:38:49.729Z"],[149,150,226],"![Node JS logo](/img/nodejs-new-pantone-black_o-1.png)\n\nDriven by a recent need to create a local API server to provide me some data-serving end points to a React app, I ran into a few huge walls.\n\nAlthough there are a lot of articles out there detailing how to **create a Node API server** locally, some don't cover enough ground (especially from examples of how to use) or are overly complex. What's more, I wanted to serve and edit _real_ data from physical JSON files as a simple filestore database – this would save a lot of faff involving MongoDB or SQL Lite; both great, but overkill for this job.\n\nFor crying out loud, shouldn't it be easy to just make a Node API server that saves data to JSON files?!\n\nAfter what felt like a decade of rummaging through complex documentation and hundreds of StackOverflow answers, I found a brilliant [article by Nic Raboy](https://www.thepolyglotdeveloper.com/2015/10/create-a-simple-restful-api-with-node-js/) from as long ago as 2015! I think the article misses out a few of the necessary 'real world' end points such as POST that actually interact with a real datastore - in this case, JSON files.\n\nBut enough preamble, let's do this thing! Strap in, it's gonna be a long one!!\n\n> **Note**, there is [an updated article on how to build a Node API server](/blog/build-a-restful-node-api-server-using-json-and-typescript) which uses more up to date techniques and languages including TypeScript, and an updated version of Express.\n\n## 1\\. Node API server setup\n\nFirst things first, you'll need to make sure you have Node.js installed on your machine and preferably an up to date version of NPM.\n\nOK? Good. So, let's create a new folder and navigate into it:\n\n`mkdir ~/some/file/path/api-server\\n`\n\nDrop into the folder and run NPM's `init` script to set up the project with some default files, such as `package.json`.\n\n```js\ncd ~/some/file/path/api-server\nnpm init\n```\n\nNow, we need to install a few things to get going, namely:\n\n- **Express** \\> `npm install express`  \n  _[Express](https://expressjs.com/) is a web application framework that provides lots of awesome features and HTTP utility methods_\n- **Body Parser** > `npm install body-parser`  \n  _[body-parser](https://www.npmjs.com/package/body-parser) is a body parsing middleware that helps to process the body of requests sent to the express server_\n- **Nodemon** (optional) > `npm install nodemon --save-dev`  \n  completely optional, but [Nodemon](https://nodemon.io/) is super helpful because it acts as a file-watcher, reloading our server when we make changes to our files – handy!\n\nAdd a couple of folders and files so that your project structure looks something like this:\n\n```json\n/projectfolder\n--/data\n--/routes\n  --routes.js\nserver.js\npackage.json\n```\n\nOpen up your `package.json` file and check that the `main` entry is set to our `server.js` file (our main entry point) as well as adding a 'start' script that will launch our Nodemon reloading magic.\n\n```json\n\"main\": \"server.js\",\n\"scripts\": {\n  \"start\": \"nodemon server.js\",\n}\n```\n\n### Install our packages\n\nSetup's almost done, the last thing is to make sure that we've installed the packages and their dependencies so they're ready to rock. Run the following command:\n\n`npm install`\n\nBosh - setup's all done and we're ready to start building the server.\n\n![blue](https://images.unsplash.com/photo-1543076563-8a29893e162d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Nicole Baster](https://unsplash.com/@nicolebaster?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n## 2\\. Building the server.js file\n\nOur first file, an entry point of sorts, will be `server.js`. We'll build up the main body of the API-serving logic here. We'll deal with our routes and route handling later on.\n\nOpen up `server.js` and add in the following code:\n\n```javascript\n// load up the express framework and body-parser helper\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// create an instance of express to serve our end points\nconst app = express();\n\n// we'll load up node's built in file system helper library here\n// (we'll be using this later to serve our JSON files\nconst fs = require('fs');\n\n// configure our express instance with some body-parser settings\n// including handling JSON data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// this is where we'll handle our various routes from\nconst routes = require('./routes/routes.js')(app, fs);\n\n// finally, launch our server on port 3001.\nconst server = app.listen(3001, () => {\n  console.log('listening on port %s...', server.address().port);\n});\n```\n\nThere's a lot going on in there for a relatively small file. To unpack it a little, the top portion of the file essentially loads in our express and body-parser modules before creating instances of them and configuring some settings.\n\nThe next part is loading our routing file:\n\n```javascript\nconst routes = require('./routes/routes.js')(app, fs);\n```\n\nThis achieves a couple of things:\n\n- Loads in our main route-handling starter point `routes.js`\n- Passes our instance of express, `app` and the Node file system library, `fs` into the routes. We'll need both of these to a) attach our route-handling to our running server instance, and b) access our JSON files using Node's file system helpers\n\nNow, we can't quite run our server. Since there's nothing defined in our routing file, it's very likely you'll get a `TypeError: require(...) is not a function` error. Not very helpful, but all will be resolved once we add some routes.\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://www.threads.net/@kendalmintcode)\n\n## 3\\. Building the route handling system\n\nSo far, so good, but what good is an API server with no routes?! None, that's what. Let's remedy that and build out some route handling!\n\nOpen up `/routes/routes.js` and enter the empty module code as follows:\n\n```javascript\nconst appRouter = (app, fs) => {};\n\nmodule.exports = appRouter;\n```\n\nSave the file and let's give this puppy a whirl. Enter this command in your terminal:\n\n`npm start`\n\nYou should see a glorious 'listening on port 3001' message. Splendid :)\n\n![Node API server starting up](/img/api-started.png)\n\nOur beautiful API server start message\n\nNow, let's get some more meaningful API-age going by adding our first route.\n\n### Adding our first route\n\nI should point out that at this stage we're going to be adding complete dummy (if not real-world-ish) data and example routes. Feel free to add anything you like as we go along or make the data and routes more relevant to you and your needs.\n\nFirst, we need to add in some JSON data. Navigate to the `/data` folder and create a new `users.json` file. Fill it with something along these lines:\n\n```json\n{\n  \"1\": {\n    \"name\": \"king arthur\",\n    \"password\": \"password1\",\n    \"profession\": \"king\",\n    \"id\": 1\n  },\n  \"2\": {\n    \"name\": \"rob kendal\",\n    \"password\": \"password3\",\n    \"profession\": \"code fiddler\",\n    \"id\": 2\n  },\n  \"3\": {\n    \"name\": \"teresa may\",\n    \"password\": \"password2\",\n    \"profession\": \"brexit destroyer\",\n    \"id\": 6\n  }\n}\n```\n\nNext, create a new file under `/routes` called `users.js` and fill it with the following:\n\n```javascript\nconst userRoutes = (app, fs) => {\n  // variables\n  const dataPath = './data/users.json';\n\n  // READ\n  app.get('/users', (req, res) => {\n    fs.readFile(dataPath, 'utf8', (err, data) => {\n      if (err) {\n        throw err;\n      }\n\n      res.send(JSON.parse(data));\n    });\n  });\n};\n\nmodule.exports = userRoutes;\n```\n\nHurrah, our very first route is almost ready. Whilst not much to look at, notice that we're including our `users.json` data file path and then defining our first route `/users` which uses the GET request type. Now, when we run our server and run a GET request against the users path, we'll be served a list of our users in JSON format.\n\nA couple of other points to mention here:\n\n1. We're using the ES6 formatting within our JavaScript files, including arrow function ([I have another article about arrow functions](/blog/how-to-use-arrow-functions-in-javascript-es6/) right here).\n2. Within the body of the GET handler, we're calling the Node `fs` library we passed in to call the `readFile()` method. This helps us to access the underlying file system and load up a file\n\n### Hook up our first route to the main route handler\n\nAlthough complete, our first route won't do anything unless the main routing file, `routes.js` knows about it. So, open up the file and add the following to complete the wiring up:\n\n```javascript\n// load up our shiny new route for users\nconst userRoutes = require('./users');\n\nconst appRouter = (app, fs) => {\n  // we've added in a default route here that handles empty routes\n  // at the base API url\n  app.get('/', (req, res) => {\n    res.send('welcome to the development api-server');\n  });\n\n  // run our user route module here to complete the wire up\n  userRoutes(app, fs);\n};\n\n// this line is unchanged\nmodule.exports = appRouter;\n```\n\n## 4\\. Testing our server\n\nSo, we've setup our project, created a simple Node API server, added some data in JSON files to be served by the API, and created a route handler to serve API requests.\n\nLet's test our hard work out. Run the same command as before to start the server:\n\n`npm start`\n\nOnce it's loading, you can visit `http://localhost:3001/users` in a browser, where you should be greeted by a list of users as defined in the JSON file.\n\n![results of the user list query](/img/api-server-userlist-resultes.png)\n\nJSON results from our GET request at /users\n\nI checked this in FireFox, but it's worth downloading a dedicated API testing app for jobs like this. I'd recommend Postman (I use it myself locally and in development), but there are loads out there. It'll become more important later down the line when we need to pass data through with the request for POST or PUT requests.\n\nYou can [download Postman from their website](https://www.getpostman.com/downloads/) for just about any environment and it's **free** for individual use.\n\nHere's what our GET request looks like using Postman:\n\n![results of user list using Postman app](/img/postman-get-users.png)\n\n/users GET request when using Postman desktop app\n\n## 4a. Skip to the complete example\n\nGET-ting results and listing them is fine, but in the real-world we usually need to complete the rest of the RESTful CRUD cycle, namely creating (POST), updating (PUT), and deleting (DELETE).\n\nBefore we get to the more complex examples, you can skip ahead and [download the complete Node API server from the GitHub](https://github.com/bpk68/api-server-starter) repository if you'd prefer.\n\n[Checkout the complete Node API server with JSON file data on GitHub here](https://github.com/bpk68/api-server-starter).\n\n## 5\\. Taking it further, completing the CRUD\n\nLet's keep going while we're on a roll. In this section, we'll pad out our limited API server with some creating, updating and deleting methods to alter the JSON files stored on disk.\n\n### Refactoring what we've got\n\nAs a huge fan of the [continuous refactoring technique](/blog/continuous-refactoring-avoiding-technical-debt-in-the-here-and-now/), I'm always looking to improve code as I go. Looking at the file `users.js` now, we're going to start repeating a lot of code with the `fs.readFile()` and `fs.writeFile()` methods. Let's refactor them up to the top of the `users.js` file now:\n\n```javascript\nconst userRoutes = (app, fs) => {\n  //...unchanged ^^^\n\n  // refactored helper methods\n  const readFile = (\n    callback,\n    returnJson = false,\n    filePath = dataPath,\n    encoding = 'utf8'\n  ) => {\n    fs.readFile(filePath, encoding, (err, data) => {\n      if (err) {\n        throw err;\n      }\n\n      callback(returnJson ? JSON.parse(data) : data);\n    });\n  };\n\n  const writeFile = (\n    fileData,\n    callback,\n    filePath = dataPath,\n    encoding = 'utf8'\n  ) => {\n    fs.writeFile(filePath, fileData, encoding, (err) => {\n      if (err) {\n        throw err;\n      }\n\n      callback();\n    });\n  };\n\n  // READ\n  // Notice how we can make this 'read' operation much more simple now.\n  app.get('/users', (req, res) => {\n    readFile((data) => {\n      res.send(data);\n    }, true);\n  });\n};\n\nmodule.exports = userRoutes;\n```\n\nWith the exception of the Read part of CRUD, all the other operations are going to involve reading data from a JSON file, altering it (adding, editing, removing) and then writing it back to the file.\n\nThis is going to involve virtually the same process for the reading and the writing parts, only the alteration part (the bit in the middle) is going to differ between requests.\n\nSo it makes sense to pull out the future redundant reading and writing to file operations and put them into separate abstract helper methods. That's what we've done.\n\nOur new, refactored read/write methods look very similar. Here's what they do:\n\n- Both accept a callback argument that fires once the read/write operation is complete\n- They set some default, common variables (such as setting the path of the file to the default data file – in this case, `users.json`)\n- Internally, they catch and throw an error, or call the callback function once complete\n\nYou can [read more about the various file system methods on the Node website](https://nodejs.org/api/fs.html).\n\n### Creating a new user\n\nWe'll start with the create part of the CRUD, creating a new user. Add in the following code, just below our read method:\n\n```javascript\n// ...\n\n// CREATE\napp.post('/users', (req, res) => {\n  readFile((data) => {\n    // Note: this needs to be more robust for production use.\n    // e.g. use a UUID or some kind of GUID for a unique ID value.\n    const newUserId = Date.now().toString();\n\n    // add the new user\n    data[newUserId] = req.body;\n\n    writeFile(JSON.stringify(data, null, 2), () => {\n      res.status(200).send('new user added');\n    });\n  }, true);\n});\n\n// ...rest of file\n```\n\nIt's quite a simple operation here. Note that we've changed the `app` function call to `app.post()` as this is a POST request to the API server. The route remains as `/users` but will hit this method when the request type is a POST.\n\nFirst, we call our new read method and pass a callback function in. When the file is read and we get a JSON object, `data` back, we need to create a new `user` object. For this, we're using the `Date.now().toString()` command to get the timestamp value for 'now', which will be unique enough, but for production purposes, you'll want something a little more robust or guaranteed to be unique.\n\nNext, we add the new user, `req.body` to the users object using the new user ID we created – note that you may need to wrap this in `JSON.parse` to coerce the incoming request body into a format we can read and add to our current data. This will depend on how you're calling the API and supplying data to it.\n\nFinally, we call our refactored `writeFile()` method, stringifying our new user data and passing it in. Once the file has been sucessfully written, we tell the response object to go back to the API caller with this line, `res.status(200).send('new user added')` – we also add a nice message to the caller to let them know it succeeded.\n\n**Note,** in a more realistic setting, it's likely that you would return the updated user list, but for now, keeping things simple is easier so a little 'new user added' message is preferable.\n\n### Updating and deleting users\n\nThe update and delete methods should look very familiar, as they are resemble the create method.\n\nHere's our update function:\n\n```javascript\n// UPDATE\napp.put('/users/:id', (req, res) => {\n  readFile((data) => {\n    // add the new user\n    const userId = req.params['id'];\n    data[userId] = req.body;\n\n    writeFile(JSON.stringify(data, null, 2), () => {\n      res.status(200).send(`users id:${userId} updated`);\n    });\n  }, true);\n});\n```\n\nThe main differences here are the route we call and grabbing the parameters out of the request.\n\n- The route has changed from `/users` to `/users/:id`. The `:id` portion is a variable parameter that we can append to our API URL. So, you could call `/users/4` which would match against this route if you used a PUT request – the accepted RESTful way of handling updates\n- We grab this `:id` value to help us find the correct user to edit using `req.params[id]`\n- Then we update the matching user from our users list by grabbing a the `req.body` contents (again, you may need to get a JSON version of the request body in which case can you do this `JSON.parse(req.body.data)`)\n\n**Note,** we're not adding the extra complexity of validating the incoming data here. This is a **necessary part of production API development**, but for simplicities sake, we're trusting you to send the right data into the API request!\n\nTo round things off, here is our delete function:\n\n```javascript\n// DELETE\napp.delete('/users/:id', (req, res) => {\n  readFile((data) => {\n    // add the new user\n    const userId = req.params['id'];\n    delete data[userId];\n\n    writeFile(JSON.stringify(data, null, 2), () => {\n      res.status(200).send(`users id:${userId} removed`);\n    });\n  }, true);\n});\n```\n\nAlmost identical the the update route, the main difference here is that we use the JavaScript `delete` keyword to remove the matching user from the users list before saving back to the file.\n\n### A fully functional Node API server using JSON files for data storage\n\nSo there you go. A fully functional API server for whatever you'd like to use it for. You can [visit the GitHub repository for the starter API server](https://github.com/bpk68/api-server-starter) and download, checkout or fork to your heart's content.\n\nIf there's anything I've missed or that you'd like to know more about, let me know in the comments or shoot me an email to me\\[at\\]robkendal.co.uk.","src/content/blog/how-to-build-a-restful-node-js-api-server-using-json-files.mdoc","95a2f35ebbaf8114","how-to-build-a-restful-node-js-api-server-using-json-files.mdoc","how-to-fix-property-does-not-exist-on-window-type-in-typescript",{"id":585,"data":587,"body":593,"filePath":594,"digest":595,"legacyId":596,"deferredRender":156},{"title":588,"description":589,"featured":156,"featuredimage":590,"date":591,"tags":592},"How to fix 'Property does not exist on type Window in TypeScript' error","If you've been asking 'How do I fix the \"Property does not exist on type Window in TypeScript\" error?' then this is the article for you. We'll fix the property does not exist on type Window error once and for all.","/img/property-does-not-exist-on-window-blog-header.png",["Date","2022-03-23T09:08:41.000Z"],[542,149,467],"![Blog header image for how to fix property does not exist on Window article](/img/property-does-not-exist-on-window-blog-header.png 'Blog header image for how to fix property does not exist on Window article')\n\nIf you've been doing something with an external library, global variable or anything that involved the native `Window` object in TypeScript, you may have come across this error:\n\n> Property does not exist on type 'Window & typeof globalThis'.ts (123)\n\nIt's a pain, but really simple to fix, so let's get to it!\n\n## Discovering the 'Property does not exist on type Window in TypeScript' error\n\nI was recently working on a client site and it involved using the excellent [Cloudinary](https://cloudinary.com) service. They have some equally excellent [embeddable widgets](https://cloudinary.com/documentation/upload_widget) which only require a bit of simple JS to drop in. Here's a snippet of the code:\n\n```javascript\nconst myWidget = window.cloudinary.createUploadWidget(options, processResults);\n// ...rest of the file\n```\n\nThe problem is, this was a React app in Next.js and a TypeScript codebase at that! The code worked fine, but the classic 'Property does not exist on type Window in TypeScript' error flagged up on the build command and TypeScript complained about it endlessly.\n\n## Identifying the problem\n\nThe `Window` type is defined in the `lib.dom` TypeScript module (as per the [following documentation on TSDoc](https://microsoft.github.io/PowerBI-JavaScript/interfaces/_node_modules_typedoc_node_modules_typescript_lib_lib_dom_d_.window.html). You can see we have the global `Window` object definition here with a ton of properties.\n\nIf you need anything not defined in this list, however, then that's when you'll hit the `Property does not exist on type 'window & typeof globalthis'.ts` style error. Common examples of this are when you add external libraries from Google for their analytics or Tag Manager, or, in my case, Cloudinary.\n\nCloudinary added it's own `cloudinary` object to the global `window` object provided by the browser, but TypeScript has no idea what it is or what _types_ it has because they're not defined.\n\nThis is one of those cases where the error is actually pointing us in the right direction.\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n## Fixing the 'Property does not exist on type Window in TypeScript' error\n\nFortunately for us, the fix is quite simple and involves three steps:\n\n1. Creating an `index.d.ts` file somewhere in our project.\n2. Editing the file to define the types on the `Window` object.\n3. (optional) adding a reference to the file in the `tsconfig.json` file.\n\nStarting with number 1, you'll need to add the following into your `index.d.ts` file:\n\n```ts\nexport {};\n\ndeclare global {\n  interface Window {\n    somePropertyHere: any;\n  }\n}\n```\n\n> If you don't have such a file, then create a folder in your project root or `src` folder called `types`. In here, add a new file called `index.d.ts` and then add the previous code snippet in there.\n\nIf you already have an `index.d.ts` file or a `global.d.ts` (or any other declared project types file) in your project with other type definitions in it, then you may not need the `export {}` line. You can omit that part and add the rest.\n\nYou can define whatever other properties you'd like in here as per your project needs, e.g.\n\n```ts\nexport {};\n\ndeclare global {\n  interface Window {\n    cloudinary: any;\n    gtag: (...args: any[]) => void;\n  }\n}\n```\n\nIn the above snippet, you'll see I added the `cloudinary` global object with a type of `any` as, unfortunately Cloudinary don't seem to offer a TypeScript option for their widgets so we're unsure what the `cloudinary` object will contain. However, with the `gtag` one, we know that it is a function that has a `void` return type.\n\n**Where possible, always try to strongly type your properties if you can, rather than opting for `any`**.\n\nFinally, if you're still experiencing issues, you might need to do one last step to wire things up. Take a note of your `index.d.ts` file's location and head into your `tsconfig.json` file, which should be in the root of your project:\n\n```json\n{\n  \"compilerOptions\": {\n    // ... other settings\n    \"typeRoots\": [\"./src/types\", \"./types\"]\n  }\n}\n```\n\nUnder the `typeRoots` property (an array), make sure you have a path to the containing folder for your `index.d.ts` file. In my case it was in `./src/types` so I added that in my `tsconfig.json` file.\n\n## Wrapping up\n\nAnd it's a simple as that. If you've been plagued by TypeScript's complaints about a 'Property does not exist on type Window in TypeScript' error, you should have the knowledge and really simple steps to fix that once and for all.","src/content/blog/how-to-fix-property-does-not-exist-on-window-type-in-typescript.mdoc","3859adfc700ce053","how-to-fix-property-does-not-exist-on-window-type-in-typescript.mdoc","how-to-get-intro-the-web-development-industry",{"id":597,"data":599,"body":604,"filePath":605,"digest":606,"legacyId":607,"deferredRender":156},{"title":600,"description":601,"featured":145,"date":602,"tags":603,"draft":156},"How to get into the web development industry [DRAFT]","Looking for your first development job or want to get into the industry? Here's some advice from a long-serving advocate.",["Date","2017-01-04T15:04:10.000Z"],[149,177],"FYI THIS NEEDS TO BE REMOVED FROM THE REDIRECTS IN THE ASTRO CONFIG FILE!!!\n\nmention the great article by Rachel Andrew (\u003Chttps://rachelandrew.co.uk/archives/2019/01/30/html-css-and-our-vanishing-industry-entry-points/>)\nshe mentions MySpace (where I met the wife and got my first taste of CSS!)\nshe also mentions vanishing end points, but I would argue that it's never been better or easier to get into the industry with lots of free content from\nfreecodecamp, treehouse, codeacademy, wesbos, etc.\n\nalso, some career advice sent to Katelin\nAhh well, that's all about sales really and how to sell yourself.So, you're definitely going to be at a slight disadvantage with some companies as, you're right, they will be looking for experience (even for entry-level stuff) in the form of other jobs. You have to accept that some places will just rule you out because of this and there's not much you can do about it - but on the positive side, this just means they're not the right fit for you and don't deserve you!When I started out, it was in general IT and infrastructure, not development -- I learned that as I went along. But I was in a similar position to you in that I was very good with computers and tech, but had no experience. I volunteered for a couple of months at a local school helping with IT support and this gave me both experience I could talk about and a recommendation from the person I reported to during the volunteering.If I was in your position now, I'd do something along these lines:\nLook for some sort of volunteer work or freelancing. Small, local businesses are always looking for help with their websites or small projects and don't forget about charities -- they have very little cash but offer great reward (for you personally and in the eyes of potential employers) in terms of doing good for good causes. Either of these options will give you some valuable experience that you can talk about on a CV\nAlternatively, look at an internship. I'd maybe look for a short term one or one with genuine prospects of a paying job at the end of it. I know they're not really very fair in the US (from what I've seen, and they seem to be largely unpaid?). We don't really have them here in the UK and the ones we do are always paid minimum wage by law.\nGet a clean, clear but polished CV and talk yourself up. I use visual cv for mine (\u003Chttps://www.visualcv.com/>). It's free and you can build a great-looking CV online using one of their awesome templates. This is mine (\u003Chttps://www.visualcv.com/rob-kendal-dev/>) and I know it works really well given the enquiries I had recent when I was laid-off! It's taken me a while to get there with a lot of trial and error.\nGet a good LinkedIn profile. Again, here's mine (\u003Chttps://www.linkedin.com/in/robkendal/>). It kind of mirrors my CV to be honest, but I keep it as a living document of what I'm up to at the moment and I share articles on there, get involved with discussions and connect with both recruiters and fellow developer professionals.\nStart talking to recruiters. This one's probably key for you. With having little commercial experience, you're going to have a smaller CV to be able to show off during applications. Some companies will overlook you, which is a real shame. If you can get in touch with some recruiters, however, they will act as a sort of middle-man sales person between you and the company they're hiring for. It's their job to big you up and really sell you to the company they represent. This could be a great way for you to leverage the recruiter's relationship with their client and get across your dedication and portfolio which showcases your abilities. If you're not dealt with many before then you need to watch out for some of them because some are like used car salesmen, they just want to bang you through the process and don't really care about you and your needs. Others have no idea what they're talking about. I had one recently that start arguing with me about a 'frontend' role that was entirely PHP-based...The best ones want to understand you and are genuinely interested in getting the best fit for you and the role.I think those sorts of steps will help you out. Beyond that it's a case of applying for role after role and seeing what sticks. Even at my career stage it's no easier so please don't get discouraged. I use Trello to track my applications and what stage I'm at with them. It can be tiring and demoralizing -- especially when you've had the same conversation with 10 different recruiters or hiring managers. And it sucks when you either don't hear back about an application or you get turned down.But, if you think of it like a sales process and whether something is a good fit or not, that helps. It's all to easy to take too much personally and think you're not good enough but it's not that you're not good enough, it's just you're not the right fit -- and that's fine! Hope that helps, but let me know what you think and if you need help with any of those steps, I'm all ears :D","src/content/blog/how-to-get-intro-the-web-development-industry.mdoc","8e16974555603b14","how-to-get-intro-the-web-development-industry.mdoc","how-to-use-arrow-functions-in-javascript-es6",{"id":608,"data":610,"body":616,"filePath":617,"digest":618,"legacyId":619,"deferredRender":156},{"title":611,"description":612,"featured":145,"featuredimage":613,"date":614,"tags":615},"How to use arrow functions in JavaScript ES6","Let's look at arrow functions in the ES6 version of JavaScript. Learn what arrow functions are, how to use arrow functions and how they help with this.","/img/dlanor-s-703975-unsplash.jpg",["Date","2019-01-02T10:10:30.008Z"],[149,150,226],"![JavaScript on a computer screen](/img/dlanor-s-703975-unsplash.jpg)\n\nI've been learning a lot about [React](https://reactjs.org/) lately, largely from the wonderful [Fullstack React book](https://www.fullstackreact.com/). (Which I'd highly recommend, as well as following the team on their Twitter account, [@fullstackreact](https://twitter.com/fullstackreact)).\n\nOne of the exciting parts of this journey is the liberal use of ES6 throughout the book. ES6 language features are a delight to use over and above the standard JavaScript language flavour and add some sound new tools and techniques to the language. However, one of the features I found particularly interesting was _arrow functions._\n\nI realise that I'm a little late to the party on this one as they're hardly a new and unknown feature, but I certainly found them intriguing and was a little confused at the different syntax required to use them. Hopefully, this guide will help me cement my own understanding, as well as help anyone who's looking to get to grips with arrow functions and their uses.\n\n### What are arrow functions?\n\nArrow functions (as per the [MDN reference guide on arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)) are simply function statements with shorter syntaxes; they offer an alternative to the standard function construct, `function (args) { // code stuff here; }` and their primary advantage is in creating code clarity.\n\nThey do offer some more control over `this`, but for now, let's look at their shorter syntax and how they play a part in generating terse, more readable code.\n\n### How do we use them?\n\nGlad you asked! There are three main ways you're likely to construct and use arrow functions so let's get going with some examples.\n\n**NB -** in these examples, we'll imagine we're using an array of ice cream flavours like this:\n\n`const flavours = [chocolate, strawberry, vanilla, cherry, toffee];`\n\n**Multiple-line body with _explicit_ `return`**\n\nIf your function spans multiple lines with several statements, you can write an arrow function like this:\n\n```javascript\nconst flavourLengths = flavors.map((flavour) => {\n  const flavourLength = flavour.length;\n  const flavourCapitalised = flavour.charAt(0).toUpperCase() + flavour.slice(1);\n  return `${flavourCapitalised} is ${flavourLength} letters`;\n});\nconsole.log(flavourLengths);\n// prints -> [\"Chocolate is 9 letters\", \"Strawberry is 10 letters\", ...etc]\n```\n\nNote that here we must include an explicit `return` statement. What's more, if you only have a single parameter, you can also omit the initial brackets like this:\n\n```javascript\nconst flavourLengths = flavours.map(flavour => {\\\n  // ...\n);\n```\n\n**Single-line/-expression body with _implicit_ `return`**\n\nIf your function body only contains a single line, you can wrap it in brackets and ignore the `return` statement as it is implied.\n\n```javascript\nconst flavourLove = flavours.map(\n  (flavour) => 'I love ' + flavour.toUpperCase() + ' ice cream!'\n);\nconsole.log(flavourLengths);\n// prints -> [\"I love CHOCOLATE ice cream\", \"I love STRAWBERRY ice cream\", ...etc]\n```\n\n**Single statement which includes `return` (e.g. the super-terse way)**\n\nEven better, if your statement is very short or the only statement is a return, then you can reduce your arrow function into the following:\n\n```javascript\nconsole.log(flavours.map((flavour) => flavour.length));\n// prints -> [9, 10, 7, 6, 6]\n```\n\n### What about _this_?\n\n`this` is a complex and often confusing topic in the land of JavaScript. From the [MDN documentation on arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions):\n\n> Until arrow functions, every new function defined its own `[this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)` value (based on how function was called, a new object in the case of a constructor, undefined in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) function calls, the base object if the function is called as an \\object method\\, etc.).\n\nTraditionally declared anonymous functions like to bind `this` to the global object, which can cause problems, both in execution and development.\n\nArrow functions help by providing a `this` that is taken from the local context. For example, if `this` isn't found in the current scope, it will be taken from the enclosing scope.\n\nTo illustrate just how this works, let's look at two examples:\n\n**A traditional function with global `this` scoping**\n\n```javascript\nfunction printLemurName() {\n  console.log('nothing here but us globals');\n}\n\nconst lemurLand = {\n  lemurs: ['Dave', 'John', 'Alice', 'Tanya', 'Lemur No. 5'],\n  printLemurName: function (lemur) {\n    console.log('This lemur is called ' + lemur);\n  },\n  printAllLemurNames: function () {\n    // Right now, `this` is bound to the lemurLand object, great!\n    this.lemurs.forEach(function (lemur) {\n      // but here, `this` is bound to the global object...oh dear\n      this.printLemurName(lemur);\n    });\n  },\n};\n\nlemurLand.printAllLemurNames();\n// 'nothing here but us globals'\n// 'nothing here but us globals'\n// 'nothing here but us globals'\n// 'nothing here but us globals'\n// 'nothing here but us globals'\n```\n\n**The same example, replaced with an arrow function**\n\n```javascript\n//...same preceding code\n\n\tprintAllLemurNames: function() {\n\t\tthis.lemurs.forEach(lemur => {\n\t\t\t// ahh that's better, `this` is correctly set to the lemurLand object\n\t\t\tthis.printLemurName(lemur);\n\t\t});\n\t},\n};\n\nlemurLand.printAllLemurNames();\n// 'This lemur is called Dave'\n// ...etc.\n// 'This lemur is called Lemur No. 5'\n```\n\n### There's more to arrow functions\n\nThis is a quick intro guide into what arrow functions are, what role they play in clean, readable code writing and what problems they can solve with their helpful application of `this`.\n\nHowever, they do have some other, advanced uses and I would highly recommend reading the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for more examples, use cases and a more indepth technical overview of arrow functions.","src/content/blog/how-to-use-arrow-functions-in-javascript-es6.mdoc","290cc474945b0012","how-to-use-arrow-functions-in-javascript-es6.mdoc","nest-cam-nest-protect-and-nest-thermostat-review-1-year-in",{"id":620,"data":622,"body":629,"filePath":630,"digest":631,"legacyId":632,"deferredRender":156},{"title":623,"description":624,"featured":145,"featuredimage":625,"date":626,"tags":627},"Nest cam, nest protect and nest thermostat review - 1 year in","After living with the nest ecosystem for over a year, I review the nest outdoor cam, nest protect and nest thermostat to see how good their smart home is","/img/dan-lefebvre-1237717-unsplash.jpg",["Date","2019-01-29T14:21:20.984Z"],[177,628],"Reviews","![Nest thermostat on a wall](/img/dan-lefebvre-1237717-unsplash.jpg)\n\nI would class myself as somewhat of a gadget person; not quite bleeding edge, super-early adopter, but certainly keen to try out new tech once it's bedded in a smidge.\n\nSo it is that we came to smart-en up our home with a combo of [Nest products](https://nest.com/uk/): namely the nest thermostat, outdoor cam and nest protect (x2). (We do also have a bevy of Google Home do-dads that link in with the nest stuff, but more on that in a bit).\n\nIt's been close to 18 month's since we installed the trio of smart home accessories and so I thought it would be helpful for anyone wondering how well they work, how they integrate with each other and your existing stuff and really, are they worth it?\n\nStrap in for this mammoth article and let's find out. Pssst, here's a table of contents just in case you want to skip around!\n\n- [Nest protect](#nest-protect-gen-2)\n- [Nest outdoor cam](#nest-outdoor-cam)\n- [Nest thermostat](#nest-thermostat-gen-3)\n- [Smart home app](#one-app-to-rule-them-all)\n- [The good parts](#overall-the-good-parts)\n- [The bad parts](#overall-the-bad-bits)\n- [Verdict - should you buy?](#the-verdict-down-to-brass-tacks)\n\n![Nest Thermostat on a wall](https://images.unsplash.com/photo-1545259742-b4fd8fea67e4?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Dan LeFebvre](https://unsplash.com/@danlefeb?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n## \u003Ca name=\"nest-protect-gen-2\">\u003C/a>Nest protect (gen 2)\n\nWe live in a very tall house. With three floors to cover, I opted for two [protects](https://nest.com/uk/smoke-co-alarm/overview/) initially to cover floors one and two where we do most of our living and leave the ground floor to the built-in, tried and tested, shouty beep alarm (hey, these things are expensive you know!).\n\nManaged to get a deal on [Shpock for two brand new ones](https://www.shpock.com/en-gb/search?q=nest%20thermostat), which saved us quite a lot of money. I'd recommend anyone having a look on similar sites for a bargain because:\n\n- nest stuff is generally awesome (spoiler alert) but pricey\n- nest themselves rarely have offers\n- when they do, it's for a weird amount of things that normal folk probably wouldn't need - i.e. their current offer on protects of saving money when you buy six...six!! Maybe their target audience in the US is different, but here in the UK, who needs six (!!) smoke alarms???\n\nSo down to the nitty gritty...\n\n### Installation\n\nWhat can you say really, it's dead easy! Perhaps unsurprisingly for products produced by a company founded by ex-Apple designers, the packaging is millimetre perfect, excellent quality and gives a brilliant first impression - you can tell you've just got your mitts on something special.\n\n![Fire alarm switch](https://images.unsplash.com/photo-1547938094-b000547cbeb9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Dave Phillips](https://unsplash.com/@teracomp?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\nThe units themselves are quite simple from an operation point of view. Everything's included in the box: shove the batteries in, screw the base plate to the wall, the product to the base plate and pair with the ubiquitous nest app - job done.\n\nIt runs a few tests, checks everything's fine and gives you the green light (literally). It was especially nice to have almost zero installation fuss because I had two to do...\n\n### Nest protect(s) in action - day to day usage\n\nMuch like us developers, the nest protects guard you and your home from the quiet shadows, never becoming obtrusive or seeking attention (unless, of course you have a fire and then yes, they do kick off something fierce).\n\nThey run a few checks on themselves daily to make sure everything's covered: batteries, functionality, any minor detections of note, etc. All this is reported via the app and it's nice to know that your smart smoke detectors are being, well, _smart_.\n\nThe best couple of features for me, however, have to be the nightlight and the spoken warnings. The nightlight is small touch that makes a big difference when you venture out in the dark of night for the toilet and your way is lit by soft mood lighting from the device, rather than the harsh, retina destroying luminance of household lights - very nice!\n\nThe spoken warnings are brilliant. Now, when you slightly burn the toast or overcook the bacon, instead of the old-school shouty alarms firing up and screaming incessantly until you frantically waft them with a tea towel as if your life depended upon it, the nest just gracefully warns you, quite calmly (and in a human voice) that you might have something going on as it's detected a mere wisp of smoke.\n\n## \u003Ca name=\"nest-outdoor-cam\">\u003C/a>Nest outdoor cam\n\nThe cost and installation faff has always put me off owning a full-blown CCTV system. However, with the advent of smart-cams becoming more mainstream and somewhat more affordable, we decided to opt for the [nest outdoor cam](https://nest.com/uk/cameras/) - partly because it is well tested, reviewed, reliable and would fit with our other nest products.\n\n![selective](https://images.unsplash.com/photo-1520697830682-bbb6e85e2b0b?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Bernard Hermant](https://unsplash.com/@bernardhermant?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n### Installation\n\nWhen it comes to installing, the land lays somewhere in-between _alright_ and _fiddly_ (a more intermediate challenge I'd say). It comes in three parts: the camera unit, the magnetic holder, and the very looooooong power cable.\n\nPersonally, this wasn't too onerous of a task, but it wasn't ideal either because of where our power sources sit compared to where I wanted the camera to live. I ended up having to run the power cable through the garage and it only just reached with an inch or two of slack.\n\nUltimately, the installation ease will depend on your specific situation and level of competence with power tools and manual labour (mine is not brilliant...).\n\nFortunately, once plugged in, setup is familiarly fuss free and quite quick. Power up the cam, connect it to wi-fi and adjust its direction/aim so you get the best view (this is done via the app).\n\n### Nest outdoor cam in action - day to day usage\n\nBrilliant. We get alerts throughout the day when the camera has spotted someone in a zone (set up via nest aware) or if it's offline. If a notification catches your fancy, a quick tap takes you to the camera section of the app where you can investigate the video more closely.\n\nThe picture quality is superb, very high resolution and the ability to both move the camera around and _talk_ via the app is very handy to say the least. Fortunately, I've not had to test the 'please don't burgle my house' speech to a would-be criminal, but for using it to scare my other half, it works a treat!\n\n#### Nest aware - the hidden subscription\n\nOne really big drawback of the [outdoor cam](https://nest.com/uk/cameras/) is the need to wed it to nest monthly subscription service, [nest aware](https://nest.com/uk/cameras/nest-aware/).\n\nI should point out that you **absolutely do not have to take out a subscription**, in the same way that you _technically_ don't have to take out home insurance, but you really should. Similarly, to really get the most of your camera, you need [nest aware](https://nest.com/uk/cameras/nest-aware/).\n\nThere is nothing wrong with nest aware. As a service, it's great: it enables a bunch of extra features on your camera, such as zones (the ability to classify multiple areas of the camera's view to control detections) and continuous cloud-based video storage.\n\nThe problem for me is that, having just paid several hundred pounds for the camera, you then find that something quite basic, such as recording of the video feed, has to be paid for as an _extra._ A fact that could be made more explicit during purchase.\n\nI know, I know, it's business, it's how the world works - subscriptions. But there isn't even an alternative way to record video yourself, via a home server linkage or api - even basic home CCTV systems offer some sort of recording mechanism. Without this, unless you're crafty enough to catch someone in the act, one of the biggest draws of having a CCTV-style system on your property (post-crime conviction evidence) is rendered moot.\n\nAgain, **nest aware works like a charm** and their new **basic plan is only £40** ish per year - it just stings a little (in mind and wallet) to have to pay _more_ on top of an already expensive product.\n\n## \u003Ca name=\"nest-thermostat-gen-3\">\u003C/a>Nest thermostat (gen 3)\n\nHaving suffered at the hands of many, many a bad thermostat experience (it's an entire post in itself), the [nest thermostat](https://nest.com/uk/thermostats/) is a breath of fresh air. This was our first purchase in the line of nest products and easily remains the best.\n\nWe've gone from a complicated mess of buttons, levers, pulleys and masters degree in thermostat settings, to a simple push and a dial. Aces.\n\n### Installation\n\nBasically, if you're not a qualified electrician, don't bother. Aside from it being frowned upon legally to do anything more electrical then changing a plug in the UK, it's a complicated set up and you're best off having a pro do it for you.\n\nNest themselves recommend a list of approved nest installers, but we used a local, reliable firm and they did a great job. It was all done and dusted in under an hour!\n\n### Nest thermostat in action - day to day usage\n\nA dream really. I was sceptical in the first few days when it's in 'learning' mode as I was worried I'd be without heating as I had to manually go to the thermostat and turn it on here and there. However, it comes loaded with a basic schedule and then _learns_ as you tweak it, turning on and off as you wish.\n\nAfter a week, we had a pretty good schedule going that warmed up the house for when we wanted it to be warm, not just turning the heating on at the time. You're encouraged to save energy via the green leaf system whereby you're rewarded with a little leaf icon whenever you set your thermostat to an energy-efficient setting - which is a nice touch and genuinely helpful.\n\nObviously the thermostat looks great and operates in a much more slick fashion than a normal unit, but if all it did was turn heating on and off, you'd be one sad puppy. It's very exciting, therefore, that one of the best aspects is the continual learning and adjusting that the [nest thermostat](https://nest.com/uk/thermostats/) makes on your behalf. Your daily schedule adjusts and shifts to suit things such as weather, day/night schedules or direct sunlight shining on the thermostat, which would usually skew the temperature readings.\n\nThe net results of this ongoing monitoring and tweaking means that we've rarely had a cold house or felt the need to fiddle with the heating at all, if ever. The heat's on when we need it to be and we're always comfortable.\n\nFinally, a relatively new feature - nearly two years on - is that in summer and winter, we're greeted with a clever, seasonal schedule that aims to help reduce energy usage (i.e. save you money) by altering your schedule to a more lean (in summer) affair. We've definitely noticed a reduction in monthly fuel costs by at least £10-£20.\n\n## \u003Ca name=\"one-app-to-rule-them-all\">\u003C/a>One app to rule them all\n\nWhichever combination of nest products you opt for, it's nice to have a single source of truth in the nest app.\n\nFrom their single app, you can check the status of the smoke alarms (worryingly, see if anything's on fire from a remote location), check the camera feed in real time or investigate one of the events that happened over the course of the day. You can also adjust the thermostat which is very useful if you realise you need more hot water for a bath, say, and you can simply fire up the boiler from your phone.\n\nIt's a simple, slick app that lets you do just about everything you'd be able to via your nest account in a browser, changing whatever settings you wish. Everything talks to each other and you do get a general feel that you're adding to a united system for your home, all the connected parts interoperating and working in your home's best interest.\n\n## \u003Ca name=\"overall-the-good-parts\">\u003C/a>Overall, the good parts\n\n![person](https://images.unsplash.com/photo-1518335935020-cfd6580c1ab4?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Katya Austin](https://unsplash.com/@katya?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\nWe've not encountered much in the way of negatives thus far. The nest support system is a little lacking (which we'll get to in a minute), but each of the products works superbly, is a pleasure to set up with no fuss no muss and is presented excellently and to a high standard - something you'd expect for the price range of the various products nest offers.\n\nThe way each product snaps into its own place within this smart home ecosystem, whilst integrating seamlessly, makes adding more nest products a rewarding and obvious choice.\n\n## \u003Ca name=\"overall-the-bad-bits\">\u003C/a>Overall, the bad bits\n\nAs with just about anything in life, there will be a few grumbles here and there, but I genuinely don't have any that are even worth mentioning here. In terms of the products, the build quality is superb and installation and use is friction-free.\n\nI did encounter more hassle when installing the outdoor cam, but this is a complaint more levelled at my personal circumstances and level of handy skills, rather than anything to be pointed in the direction of nest.\n\nThe pricing model for the outdoor cam is also a pain point, not so much because of the price, but more because of the inherent necessity of the nest aware service that is not highlighted as best it could be; without it, your cameras' lack a fundamental feature of being able to record video.\n\nAs generally tip top as things are, unfortunately, things do go wrong. When they do, it's often how the issue is handled that makes the difference between a good experience overall and one that will make you think twice about whom you choose when selecting your next product, service, etc.\n\nSo it is with nest support.\n\n### Support, a lack of...\n\nAfter about nine months, the outdoor cam just died. No warning, no obvious errors or problems, it just turned into a brick. Not great, but things happen. I dutifully called support and eventually got through to the American end of things, got well into the issue and was then told I had to use the UK support - another thing that is neither obvious, nor handled for you.\n\nAfter starting again with the UK support, I was surprised to have to work so hard and jump through so many hoops to simply get a replacement unit for a product that was well within its warranty. Initially (perhaps from the support team member's lack of experience) I was offered a replacement straight away. Later on, this was taken off the table as I hadn't gone through the steps of disconnecting the camera, plugging it in _inside_ the house, and running through the testing script.\n\nAll of these things were practically impossible because of the nature of how the camera was installed, let alone because of the fact that it was obviously dead.\n\nEventually, after several more support requests, reaching out on Twitter and generally pleading with them, we were issued a replacement unit and a box to send the defunct one back. This part was smooth and hassle-free, so it's a shame it had to be such a headache in the first place.\n\n## \u003Ca name=\"the-verdict-down-to-brass-tacks\">\u003C/a>The verdict: down to brass tacks\n\nThe experience with nest support notwithstanding, overall the whole family love our nest smart home. It's made life a little easier, more convenient, saved us some money and is a pleasure to use.\n\nAs someone who prefers to reduce the number of different systems from different providers, the ability to add different products within the same nest ecosystem is great: everything talks to one another, the integrations feel real and substantial rather than forced or an afterthought; and the different products do their respective jobs well, never feeling like you've compromised just for the sake of keeping to a single supplier.\n\nIf you're venturing into the smart home life then give nest a go, you won't be disappointed!","src/content/blog/nest-cam-nest-protect-and-nest-thermostat-review-1-year-in.mdoc","1b421dec154d038d","nest-cam-nest-protect-and-nest-thermostat-review-1-year-in.mdoc","job-hunting-in-the-tech-industry-tips-tricks-and-experiences",{"id":633,"data":635,"body":641,"filePath":642,"digest":643,"legacyId":644,"deferredRender":156},{"title":636,"description":637,"featured":145,"featuredimage":638,"date":639,"tags":640},"Job hunting in the tech industry: tips, tricks and experiences","Fighting imposter syndome and other tips and tricks from a job hunting journey in the tech industry","/img/rawpixel-604746-unsplash.jpg",["Date","2018-12-18T09:01:15.566Z"],[177],"![Typewriter and stationery](/img/rawpixel-604746-unsplash.jpg)\n\nHaving recently been through the job hunting mill, I find that familiar lines of conversation crop up time and again between colleagues, friends and fellow tech people on [Twitter](\"https://indieweb.social/@kendalmintcode\") about how to find a job, how you deal with issue 'xyz' and fight the dreaded imposter syndrome and inferiority complexes.\n\nSo here is my experience of what worked for _me_ distilled into some top tips...\n\n### Have a system\n\nI'm in [ISTJ personality type](https://en.wikipedia.org/wiki/ISTJ) so I like lists and charts and data. You might not, but it helped me immensely to have a system, even one of my own invention, in place to keep track of what I'd applied for, what stage I was in, where I'd had feedback or things had gone a little quiet.\n\nI found [Trello](https://trello.com/) a great fit for this as it let me sort of kanban the process, right from initial application through to first or second stage interview, tech-test timings and overall progress. I could also track those pesky applications where you hear nothing for a few weeks (are they still ongoing, have you exited without being told, what's going on...?).\n\nYou might have something completely different that works for you, but without something, _anything_ in place to navigate the endless emails, phone calls, people involved (recruiters, hiring teams, key team members, and the rest), you can easily lose track of your place in the process.\n\n### Learn to process the process differently\n\nYou're applying for a new role, perhaps your dream role, either way you're going to face some uphill struggles along the way. There's rejection, whether that's not getting a foot in the door or not being good enough when it comes to an interview. There's writing a killer appliction, having your CV in order, nailing a technical test, worrying about not having the skills you need for the role, the list goes on.\n\nThere are a lot of ways to feel like you're just not good enough. But I'm here to tell you that you are!\n\nIt's all about mindset. Yours needs to be set to 'growth'!\n\n![Fixed vs. growth mindset diagram](/img/mindset-table.png 'Credit: image from Train Ugly (https://trainugly.com/mindset-makers-breakers-pt1/)')\n\nHaving a [growth mindset](https://www.mindsetworks.com/science/) is becoming more and more popular. Essentially it's about flipping your thought patterns and approach in order to learn, improve, and grow; **looking to fill the gaps rather than dwelling on the fact that the gaps exist** - as Homer Simpson would say, 'Crisitunity!'.\n\nWhen it comes to job hunting, a few helpful mindset shifts might look like this:\n\n- I'm not qualified for the job > _I'll be honest about my experience and let them decide!_\n- I didn't even get an interview > _what can I do differently next time?_\n- I don't know half of those technologies > _I'd love the chance to learn new skills!_\n- They turned me down for the role > _I wasn't the right fit this time._\n\n### Rejection != failure\n\nSpeaking of a growth mindset, you're gonna need it to process one of the unavoidable parts of looking for jobs: rejection!\n\nNo one likes rejection in any form, it's a big negative and all to easy to take internally, personally and - depending on your personality - spiral downwards, especially once you've had a couple of knock backs in a row.\n\nBut, similar to the last point, you've got to stay strong and spin your thinking: it's not about rejection, it's about _fit_!\n\nInterviews are a two way conversation and **it's as much about you discovering if there is a fit with the role and company _for you,_ as it is the company probing your skills and culture fit.**\n\nSure, sometimes, you might not have the skills to suit the role, but that doesn't invalidate your existing experience or skillset, it just _doesn't fit right now_. Not being skilled at something or suitable for a role because of current experience **does not mean you're not good enough!**\n\n[![](/img/cta/cta-remote-dev-jobs_banner.png)](https://remotedevjobs.uk 'Find your next fully remote deb job in the UK')\n\n### Trust your instincts; red flags are red flags for a reason\n\nI've been working on this a lot recently; trying to listen to my instincts and pay attention to the little warning flags that mean this might not be right for me.\n\nCase in point, I recently went for a role where as soon as I got into the car park, something was off. I don't know if it was the building, or the people milling about outside (my potential future colleagues), but I got the vibe - not the good kind...\n\nSure enough, after 10 minutes of waiting in the foyer for anyone to even acknowledge I had arrived for an interview, I was getting the Spidey Sense that this might not be the role for me. Further damning evidence arose when we met a few people and they seemed miserable and really unhappy. Sure, they could have been having an off day (we all have them), but when you add this into the other bits and pieces, the whole becomes a bit more off-putting.\n\nRemember, you're testing each other for a fit, if something's off, it probably is and you should keep looking!\n\n### Go for what you want, not just what's available\n\nOK, this is a somewhat idealistic way of looking at things; you might not be in a position to pick and choose your next role or have the experience to quite get there yet.\n\nHowever, if you can afford to be a bit choosy then you absolutely should. Follow your passion and your nose and find the thing that will work for you.\n\nIt also helps with the next point about fatigue too. By being a little selective in your applications (rather than a blunderbuss approach) you'll be more focussed on what you're applying for, improving both your initial application _and_ your interviews, etc.\n\n### Recognise job-hunting fatigue\n\nWhilst people differ on whether or not burn-out is a real thing, I definitely experienced application fatigue very early on in the process and knew that I needed to take a break from things and let them be.\n\nWhen you've had virtually the same conversation with an increasing number of hiring managers or recruiters, tweaked your CV a million different ways to suit the particular job you're going for, had a couple of stress-inducing interviews, all in the space of 2-3 of weeks, it takes its toll. I got really tired, stressed, worn out and this fatigue started seeping into other parts of my life.\n\nFortunately, the remedy was easy enough, I just stopped adding to the pile, stopped hunting for a week or so and just stepped back from anything that didn't need my immediate attention - e.g. an in-progress application.\n\n### Out the other side\n\nStay honest, genuine and don't downplay your experiences and you'll come out the other side of the process with a shiny new role that fits you perfectly.\n\nWhat experiences have you had looking for a tech role and what advice can you share?","src/content/blog/job-hunting-in-the-tech-industry-tips-tricks-and-experiences.mdoc","1d927ec2da9427a5","job-hunting-in-the-tech-industry-tips-tricks-and-experiences.mdoc","reading-google-sheets-data-using-javascript-with-google-sheets-reader",{"id":645,"data":647,"body":653,"filePath":654,"digest":655,"legacyId":656,"deferredRender":156},{"title":648,"description":649,"featured":145,"featuredimage":650,"date":651,"tags":652},"Reading Google Sheets data using JavaScript with Google Sheets Reader","How can I access Google Sheet spreadsheets with JavaScript? I'll walk you through the handy Google Sheets Reader so you can fetch data with ease.","/img/mika-baumeister-703680-unsplash.jpg",["Date","2019-01-10T14:17:09.678Z"],[149,150,226],"![Floating point numbers on a computer screen](/img/mika-baumeister-703680-unsplash.jpg)\n\nIf you've ever found yourself asking 'how can I access Google Sheet spreadsheets with JavaScript?', then you're probably not alone. You only have to type something like 'reading google sheets data using javascript' into Google (or Duck Duck Go as I'm currently using :D ) and you'll be inundated with a bevvy of solutions to this conundrum.\n\nThe problem is, in my experience they're either very complex and overblown, or quite difficult to get up and running with (e.g. poor documentation), or they're just a bit too prescriptive with how they serve you those precious results.\n\nSo, I built my own...\n\n![Yeah!! On colourful background](https://images.unsplash.com/photo-1519635694260-6af6fc200c89?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [rawpixel](https://unsplash.com/@rawpixel?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n## Enter the Google Sheets Reader\n\nBecause I couldn't find something that worked well for my needs (and I didn't want to wrestle with the full-blown [Google Sheets API](https://developers.google.com/sheets/api/)), I decided to build a [quick, lightweight utility](https://github.com/bpk68/g-sheets-api.git#readme) to get hold of some simple data from within a Google Sheet and return it to me in a suitable fashion for me to deal with as I please.\n\nThe **Google Sheets Reader** is available on GitHub and the NPM package repository here:\n\n- [GitHub project](https://github.com/bpk68/g-sheets-api.git#readme)\n- [NPM package](https://www.npmjs.com/package/g-sheets-api)\n\nWe'll go into the why's and wherefore's in a moment, but let's cut to the chase and explain how to use it first.\n\n## How do I use it?\n\nGlad you asked. Head on over to the [GitHub repo and take a look for yourself](https://github.com/bpk68/g-sheets-api.git#readme). I've put together a decent readme file detailing exactly how to consume and use the Google Sheets Reader for yourself in your own projects.\n\n### Firstly, is this right for my needs?\n\nThe Google Sheets Reader is a simple, one-way data fetcher that allows for _reading only_ from a publicly published Google Sheet. If your needs look like these, then it might be a great fit:\n\n- You are able to publish your Google Sheet publicly\n- You have a relatively simple data set in a single sheet (multiple sheets is a planned feature)\n- You only need to _read_ the data\n- You don't need access to more advanced functionality (such as caching or OAuth) provided by the [official Google Sheets API](https://developers.google.com/sheets/api/).\n- You want a simple, straightforward means to get data > do things with data > celebrate!\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n### Enough chatter, let me use the Google Sheets Reader!\n\nThe basic premise is that you need to do the following:\n\n1.  Set up a Google Sheet for public access (there's a guide on the [GitHub project's readme file](https://github.com/bpk68/g-sheets-api.git#readme))\n2.  Add the npm package to your repository\n3.  Call the reader function and pass in a set of options and a callback function to handle the results\n\nOnce you have a Google Sheet available, you can add the npm package to your project:\n\n`npm install g-sheets-api --save-dev`\n\nor, if you prefer Yarn,\n\n`yarn add --dev g-sheets-api`\n\nNext, you need to call the reader in your project:\n\n```javascript\nconst reader = require('g-sheets-api');\nconst readerOptions = {\n  sheetId: '1-CmQumuz5ZiOvINhphEMgfplrJacQhD623RROcOBTAg',\n  returnAllResults: false,\n  filter: {\n    'key to filter on': 'value to match',\n  },\n};\n\nreader(readerOptions, (results) => {\n  /* Do something amazing with the results */\n});\n```\n\nThe initial data soup that's returned from Google Sheets is neither JSON in nature, nor particularly friendly. In fact, it's a JSON-esque dump of cell values from the Sheet in question.\n\nWhat the reader does for you is fetch this data swamp, trims and neatens it before parsing it into proper JSON. Then, it formats this collection of JSON cells into an array of row objects that look like this:\n\n```json\n[\n  {\n    // row 1\n    \"column 1 header\": \"column 1, row 1 value\",\n    \"column 2 header\": \"column 2, row 1 value\",\n    \"column 3 header\": \"column 3, row 1 value\"\n  },\n  {\n    // row 2\n    \"column 1 header\": \"column 1, row 2 value\",\n    \"column 2 header\": \"column 2, row 2 value\",\n    \"column 3 header\": \"column 3, row 2 value\"\n  }\n  // etc.\n]\n```\n\nThat way, you're free to deal with them however you wish!\n\n## Why build a Google Sheets Reader?\n\nDuring a recent project involving the need to read structured, tabular data from an online storage pot (of some nature), we had initially used Google's Fusion Tables. However, these are a beta product and are being closed down this year year (August 2019 ish at the time of writing).\n\nThe need to swap out the Fusion Tables data store for an alternative that was robust enough to securely store the data, yet accessible enough for regular content editors to keep up to date or make changes, was strong; ultimately, this lead us to opt for Google Sheets as a replacement.\n\nBut...\n\nThe Fusion Tables setup is really just a nice UI on top of some JSON data, so it's already bundled with the mechanism to read the underlying data structure via nice, REST-like API endpoints.\n\nGoogle Sheets, not so much.\n\nReading and writing data from Google Sheets largely revolves around setting up the API (currently V4 at the time of writing) via Google's Dev Console, and then slogging through the development docs and creating a (to my mind) faffy set of JavaScript functions to add the client auth library, get the promise object, get some data, squidge it into a reasonable shape, etc.\n\nIn our case, all we needed was a means to grab some simple, tabular data from a Google Sheet and stuff it onto the page in a HTML table.\n\nLuckily, I discovered that there is a funky way to access the data in a Google Sheet by calling a special URL with a JSON modifier on the end:\n\n`https://spreadsheets.google.com/feeds/cells/1-CmQumuz5ZiOvINhphEMgfplrJacQhD623RROcOBTAg/1/public/values?alt=json-in-script`\n\nHowever, **this only works if you have published your Sheet to the wide world** - obviously, not appropriate for all needs, but a great fit for ours!\n\nI then built the simple library to fetch data using this URL because, as mentioned above, the initial results that you get are a less-than-friendly collection of raw cell values. I needed a way to smoothly get the data, then massage it into something nicer to work with.\n\nSo, when you want to read data from Google Sheets using JavaScript in a simple, fuss-free way, now you can :D\n\n## Useful links\n\nIf you'd like to know more about the utility or explore the code, then please take a look; feel free to leave comments, fork the work, suggest improvements - I'm all ears.\n\n- [GitHub project](https://github.com/bpk68/g-sheets-api.git#readme)\n- [NPM package](https://www.npmjs.com/package/g-sheets-api)\n- [Google Sheets official API](https://developers.google.com/sheets/api/)","src/content/blog/reading-google-sheets-data-using-javascript-with-google-sheets-reader.mdoc","4ddef01bec86292c","reading-google-sheets-data-using-javascript-with-google-sheets-reader.mdoc","quick-start-javascript-projects-with-this-webpack-project-starter-kit",{"id":657,"data":659,"body":665,"filePath":666,"digest":667,"legacyId":668,"deferredRender":156},{"title":660,"description":661,"featured":145,"featuredimage":662,"date":663,"tags":664},"Quick-start JavaScript projects with this Webpack project starter kit","Use my free, tried-and-tested Webpack project starter kit if you'd like to get your next web app or JavaScript project started quickly","/img/webpack-starter-kit-blog-header.png",["Date","2019-02-13T09:26:05.091Z"],[149,150],"![Webpack starter kit diagram](/img/webpack-starter-kit-blog-header.png)\n\nI feel as if I've written a number of non-technical posts lately, mainly because I've had a lot of broader concepts floating around in my noggin. So if you're interested in article on [tech tests being relevant](/blog/are-tech-tests-still-relevant-in-todays-hiring-landscape/), [continuous refactoring](/blog/continuous-refactoring-avoiding-technical-debt-in-the-here-and-now/) or whether you should [use nest stuff in your smart home](/blog/nest-cam-nest-protect-and-nest-thermostat-review-1-year-in), you're all set.\n\nBut let's not do that here. Here, I'm going to share with you my quick and simple [starter kit](https://github.com/bpk68/web-template) for [Webpack](https://webpack.js.org/) based projects.\n\n(_Pssst! If you'd rather just investigate the GitHub repo for the Webkit project starter then go there via this link:_ [https://github.com/bpk68/web-template](https://github.com/bpk68/web-template)_)_\n\n## Why Webpack (vs Gulp or Grunt)?\n\n**Gulp** and **Grunt** have reigned victorious as JavaScript project favourites for many a year. As JavaScript task runners, both Gulp and Grunt do a great job of minifying code, cleaning CSS, transforming template files and, well, just about anything you can imagine as a task that can be run during a build.\n\n![](/img/logo-on-white-bg.png)\n\nWebpack - the bundling system for JS projects\n\nHowever, they've fallen out of favour amongst the community in recent times as support for both their core product and their coupled ecosystems (e.g. Bower) is dwindling. A further nail in the coffin comes in the form of React, which offers an all-in-one starter solution – Create React App – using....drum roll...**Webpack**.\n\nAlthough Webpack at its core is a bundler, not a task runner, it has been enjoying more use in place of Gulp and Grunt – appearing in more overall stacks than either of the two task runners, and is mentioned in nearly twice the number of job posts. It’s also far more popular on GitHub.\n\n## Why a Webpack starter kit?\n\nWebkit works well out of the box with minimal configuration. However, depending on your situation, you'll almost always find yourself requiring a little bit more than the 'default' setup.\n\nThe problem _I_ faced when I started regularly using Webkit to kick-off projects is that it requires a lot of additional plugins and settings to get it to the point where it covers all the things I want my project to automatically handle. Things such as:\n\n- Bundling _and_ minification\n- Code chunking and optimisation running\n- Linting support\n- ES6/ES2015 language features via Babel\n- Copying and moving assets as part of the build\n- ...and some others\n\nBy setting up a blank project, with all of the above configured out of the box, I can focus on the productivity and excitement of a new project, _without_ getting bogged down in repetitive set up files.\n\n![power](https://images.unsplash.com/photo-1493994055174-cfa612a0d07c?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Fancycrave](https://unsplash.com/@fancycrave?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n## Let me introduce the (finished?) Webpack starter kit\n\nOK, so you're never _really_ finished – there'll always be tweaking and changes to make as needs shift. But for now, the current state of the [publicly available Webpack starter project](https://github.com/bpk68/web-template) is a great jumping off point for a web app project.\n\nIt includes all the configuration baked in and ready for deploying to a server of your choice. It even includes some non-Webpack packages, such as the amazing [Semantic Release](https://github.com/semantic-release/semantic-release).\n\n### What's included?\n\nIt's a simple setup with relatively unbiased opinions. Here is a brief outline of the project with summaries of the what's and why's of some of the files:\n\n- `.babelrc` - specifies the version of language support that babel brings. In this case, it's set to use the latest ES6/ES2015 language features.\n- `.npmignore` - a handy cousin to the .gitignore file that ignores some project files/folders if you're doing an npm deploy or publish with this project.\n- `.releaserc.json` - some good defaults for getting Semantic Release working.\n- `templates/index.html` - a very simple html document where your bundles are added and your app starts from. You don't strictly need this file, but it's likely you'll prefer a little more control over what gets added into your final html output, whether that's meta info, other stylesheets, or perhaps micro-schema. This template gives you that control whilst retaining the auto-bundle-inclusion witchcraft of Webpack.\n- `src/index.js` - the very start of your project, where all the magic JS happens.\n- `src/vendors.js` - a good file to put your third-party libraries or load your vendor files in. The webpack.config.js files split out the code based on the main index.js and vendors.js files.\n- `config/` - we'll go into this in a moment, but for now, this is where your common (shared), development, and production configuration files for Webpack live.\n\n### Splitting the Webpack configuration\n\nIn a similar way that you can split out Grunt configs into multiple files, Webpack allows you to separate your common (shared), production, and development settings into distinct files. To achieve this, we can use the webpack-merge plugin – included in the starter kit.\n\nUnder the `/config` folder, you'll find these three files:\n\n- `webpack.common.js` - although the largest of the config files, the shared/common config sets up from Webpack basics, such as how to chunk your bundled assets, creating file-path aliases, how to handle certain files, as well as cleaning the `/dist` folder before deployment and choosing which html template to use to start your project.\n- `webpack.dev.js` - in here you'll find rules to process CSS using the css-loader plugin, source-mapping options and a fully-functional web server to serve your in-development work from – `localhost:8080` by default. It omits any optimisation or minification at this level.\n- `webpack.prod.js` - for production, these settings uglify, minify, and optimise your JS and CSS assets, and the mini-css-extract plugin chops your CSS files into bite-sized chunks; a bit like Webpack does for your JS files.\n\n### Project plugins, add-ons and the package.json file\n\nFinally, we have the package.json file for the project which includes a number of plugins to help Webpack do its stuff. Here's a breakdown of what does what:\n\n- `@babel/polyfill` - polyfill from [BabelJs](https://babeljs.io/) that helps you to run the latest JS features (in our case, from ES6) now.\n- `semantic-release` - [Semantic Release](https://github.com/semantic-release/semantic-release) helps to automate the scheduled release workflow including adding version numbers, updating release notes, and pushing releases to GitHub/npm. This can be deleted if it's not to your liking.\n- `babel-loader` - this adds Babel support and transpilation to Webpack during bundling of JS files.\n- `clean-webpack-plugin` - simply empties the `/dist` folder during a build to remove any previous code/assets from the last build.\n- `html-webpack-plugin` - an [official Webpack plugin](https://webpack.js.org/plugins/html-webpack-plugin/) that helps to give you more control over the creation of html files from which to server your bundles.\n- `copy-webpack-plugin` - copies files from the source directory into the build/output directory. You can view the [npm package here](https://www.npmjs.com/package/copy-webpack-plugin).\n- `mini-css-extract-plugin` - the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) splits your CSS into separate files – a little like how the JS files can be chunked. It supports on-demand loading of CSS and sourcemaps.\n- `optimize-css-assets-webpack-plugin` - [optimises and minifies CSS](https://www.npmjs.com/package/optimize-css-assets-webpack-plugin) assets during the production build.\n- `uglifyjs-webpack-plugin` - nice and simple, this one takes your beautiful JS files and transforms them into less-readable, uglified versions that are smaller and harder to understand (keep your coding secrets safe...ish).\n- `style, css, file, image-loader` - these are all official Webpack add-ons that help you to process different file types based on some rules (this is set in the modules section of Webpack config files). For example, we catch CSS files, run them through the `style-loader` helper to bundle them into our final build output.\n\n## Using the Webpack starter project\n\nHopefully, it should be really easy. Here's how to get started:\n\n1.  Fork the repo (get it here: [https://github.com/bpk68/web-template](https://github.com/bpk68/web-template)) or download the raw files.\n2.  Run `yarn install` (assuming you have yarn installed on your machine) to add the npm packages.\n3.  Edit any settings or config files to suit.\n4.  Edit `src/index.js` to create something magical.\n5.  Then run `yarn start` to deploy the files locally and spin up a local webserver.\n6.  Browse to `http://localhost:8080` to view your work.\n\n## Updates, comments, feedback, changes\n\nThis is a handy starter project that I created for my own purposes, but I know people run into the same issues as I do and I hope that this gets people moving faster.\n\nIf you have any comments, add them into the Disqus form below. If you have issues, problems, or general feature requests then start a pull request or issue on GitHub and I'll do my best to look at it really quickly.\n\nNow get out there and make something amazing!","src/content/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit.mdoc","f7f3b4e4dd6a1d4a","quick-start-javascript-projects-with-this-webpack-project-starter-kit.mdoc","signs-to-lookout-for-if-you-suspect-you-ve-ended-up-in-the-wrong-career",{"id":669,"data":671,"body":677,"filePath":678,"digest":679,"legacyId":680,"deferredRender":156},{"title":672,"description":673,"featured":145,"featuredimage":674,"date":675,"tags":676},"Signs to lookout for if you suspect you've ended up in the wrong career","Avoiding ending up in the wrong career should be the priority of any worker. In this article we aim to help you recognise the signs to watch for if you think you're in the wrong career","/img/signs-youre-in-the-wrong-career-blog-post.png",["Date","2020-11-24T10:56:03.000Z"],[177,240],"![](/img/signs-youre-in-the-wrong-career-blog-post.png)\n\n_This is a guest post by Artur Meyster. Artur is the CTO of Career Karma, an online marketplace that matches career switchers with coding bootcamps. He is also the host of the Breaking Into Startups podcast, which features people with non-traditional backgrounds who broke into tech. You can find Artur on_ [_Twitter_](https://twitter.com/arturmeyster 'Find Artur on Twitter') _and_ [_LinkedIn_](https://www.linkedin.com/in/meyster 'Connect with Artur on LinkedIn')_._\n\nEnding up in the wrong career is a fate that many people end up suffering. There’s nothing wrong with ending up in the wrong career, but it can be a distressing experience once your eyes are finally opened to the truth. With that in mind, avoiding ending up in the wrong career should be the priority of any worker. Unfortunately, many of us simply take the first job that comes our way out of convenience or because it offered a salary.\n\nIn fact, ending up in the wrong career and jumping on the first opportunity that comes along is one of the [things I wish I'd known as a junior developer](/blog/things-i-wish-i-d-known-as-a-junior-developer \"Things I wish I'd known as a junior developer\").\n\nWhen it comes to reasons for accepting a job, doing so for the money or to appease others is almost always a bad idea. This can lead to you becoming dissatisfied with your work and feeling less happy overall with what you do. Your work will make up a large portion of your life and there’s no reason for you to go through all that time feeling disappointed in your career choice.\n\nLearn the common signs that point to the fact that you may be in the wrong career and act on them before your situation becomes worse.\n\n## Your job bores you\n\nMake no mistake; everybody gets bored at work from time to time and there may always be a boss who seems to pass you the jobs that require absolutely no brain power. Perhaps your co-workers are struggling to complete their jobs but you are quick to succeed. Regardless of the exact type of boredom, there’s likely a disconnect between your skills and the job you’ve been assigned.\n\nOn that note, try to identify what in particular is boring you and see if it has anything at all to do with your career as a whole. Sometimes it’s just a single job that bothers us and this can be fixed with a simple career switch. However, if the source of your boredom has more to do with your career, then it is time to consider switching paths.\n\nFind what excites you in order to narrow down a job that may fascinate you on a daily basis. This will require a fair amount of introspection, but it will be incredibly rewarding when you discover a path that suits your interests and [career goals](https://careerkarma.com/blog/where-do-you-see-yourself-in-5-years/). Finding this path and landing a job that doesn’t bore you will require you to think deeply about what skills you bring to the table and where they are best applied.\n\n## You constantly complain\n\nLet’s be honest — nobody likes a complainer and it’s easy to know if you complain a lot. If you are picking up signals from your friends that they are tired of hearing you complain about your job, it may be time to look into a different career path. As with being bored at work, it’s important that you narrow down what exactly is the source of your complaints at work.\n\nAssuming your complaints have to do with your career, determine what exactly is causing you to complain so that you can begin to identify how to fix the issue. Narrow down whatever seems to be the source of your complaints and, if they are not fixable, simply switch jobs. It may be time to learn [how to write a resignation letter](https://careerkarma.com/blog/how-to-write-a-resignation-letter/).\n\nOn that note, be sure to maintain good relations with your prior employer. If you are attempting to switch careers, you may need a letter of recommendation. This could be hard to get if you severe ties completely with your old job, so always try to leave on a good note.\n\n## New jobs at your company appeal to you\n\nPerhaps you constantly find yourself on your companies job board. If this is the case, take it as a major red flag that something is up with the career path you are on. Don’t become dejected, but try to determine if the job you are looking at on your company site is actually what you want to do. For the most part, many people [don’t know what they want to do](https://careerkarma.com/blog/i-dont-know-what-career-i-want/) well into their life.\n\nFortunately, [online degree programs](https://onlinedegreehero.com/) are readily available for anyone who has the desire to change up their career path at some point in their life. As technology has enabled remote work amidst the recent pandemic, it has also enabled new educational institutions to form.\n\n## Conclusion\n\nThere’s no point in staying at a job that doesn’t suit your interests or skills. In fact, this will only lead to you becoming jaded about your career choice as a whole. Keeping that in mind, watch for the common signs outlined above that can signal when you have entered the wrong career path. There’s no shame in entering the wrong career by accident, but choosing to stay in that wrong career is a choice that is entirely yours. Make the decision to do better for yourself and switch career paths when you’ve entered the wrong one.","src/content/blog/signs-to-lookout-for-if-you-suspect-you-ve-ended-up-in-the-wrong-career.mdoc","00a4ddc7546db7c6","signs-to-lookout-for-if-you-suspect-you-ve-ended-up-in-the-wrong-career.mdoc","things-i-wish-i-d-known-as-a-junior-developer",{"id":681,"data":683,"body":690,"filePath":691,"digest":692,"legacyId":693,"deferredRender":156},{"title":684,"description":685,"featured":145,"featuredimage":686,"date":687,"tags":688},"Things I wish I'd known as a junior developer","Let's talk about some of the things I wish I had known as a junior developer to help you learn to be a better developer earlier in your career.","/img/what-i-wish-i-knew-as-a-junior-dev.png",["Date","2020-11-20T07:44:55.000Z"],[240,177,689],"Advice","![](/img/what-i-wish-i-knew-as-a-junior-dev.png)\n\nI've been a developer for over fifteen years and I've loved almost every minute of it. I can't imagine doing anything different but there are moments when I think back to starting out and how different the development landscape was, especially when it comes to learning how to code.\n\nI'm really _not_ that old, but things in the tech world move fast and there weren't as many resources around to help people get into frontend development and learn how to build something from HTML, CSS, JavaScript, etc. There wasn't as many great communities like Dev or Hashnode or WeStryve, not learning platforms such as Free Code Camp or The Odin Project.\n\nSo a lot of my early career felt like fumbling around for me, picking up everything I could from senior developers, hoping that they knew what they were doing, reading as many books as a I could and practising my craft.\n\nIt's fair to say there were quite a few things I wish I'd known a lot earlier in my career that could have helped me progress faster or just develop both my coding skills, as well as my more complimentary skills, such as dealing with people or learning _how_ to learn.\n\nHopefully, with this article I can distil what I've learned to date and share some things to watch out for and take on board to help you with your career as a frontend developer.\n\n_(Pssst -- If you like this article, come_ _[Follow me on Mastodon @kendalmintcode@indieweb.social](https://indieweb.social/@kendalmintcode)_ _where I post regular helpful content every day)_\n\n## Start writing a blog\n\nThis very blog you're reading now (whether it's on my own website or my Dev or Hashnode accounts) has grown quite popular and that's great. But I really wish I'd started much earlier and written more frequently.\n\nHonestly, blogging is such a great way to cement what you've learned _as you're learning it_. You absolutely do not have to be a developer with X years in the business, nor do you have to be an expert.\n\nAll you need is a curios mind and to think about writing for your past self: write the article you wish you'd had on the subject.\n\n![](/img/workplace-2303851_640.jpg)\n\nAs a bonus, if you fix something particularly tricky, you'll be able to refer back to your own article to help you solve it in the future!\n\nMy friend Catlin Pit has a couple of recommended articles on blogging too:\n\n- [Should you start a blog as a developer](https://catalins.tech/should-you-start-a-blog-as-a-developer \"Catlin Pit's article on starting a developer blog\")\n- [How to start a blog](https://catalins.tech/how-to-start-your-blog-as-a-developer \"Catalin Pit's article on how to start a blog\") - a common question after 'what do I write about?'\n\n## Ask more questions!\n\nThis seems obvious, but in my experience it's really not. A lot of developers, especially those early on in their careers are easily intimidated by more experienced devs or just those that have been around longer, and this can prevent them from speaking up.\n\nBut you know what? That's how you learn: you ask questions, you get answers (and, back to the previous point, you now have content for a blog article!).\n\nNever be afraid of asking questions, especially if you're stuck on something. There are no stupid questions, but I'm not going to lie, you will at some point come across arrogant or unhelpful people who will make you feel otherwise. My advice, ignore them and find more open and helpful people.\n\n## Be honest on what you're passionate about\n\nIf you love what you do and are fortunate enough to get to do that regularly, especially as a full time career then you've hit the jackpot.\n\nHowever, I see a lot of people stuck in places and in roles that they just don't have the passion or drive for. I'm well aware that not everyone is fortunate enough to be able to pick and choose, but as developers we have long held a valuable position in the job market where there are more jobs than there are developers.\n\nBut this is really about having a truthful discussion with your inner dev and being both honest about what you _really_ enjoy doing/not doing, and realistic about how to start a role doing this.\n\nFor example, if you really really really don't like PHP, then take care when interviewing or seeking out roles in development agencies where WordPress is heavily featured.\n\nThis advice is especially true for those seeking, perhaps, their first development roles. Be honest and candid about what's right for you and (if you're able to), don't just jump at the first opportunity that comes your way.\n\nThe more you can discover what direction you want to travel, the better aligned you'll be down the line in your career.\n\nWith all of the above said, please don't put pressure on yourself to decide too early. Sometimes you have to experience what you _don't_ want to know what _is_ right for you.\n\n## Get a coding mentor\n\nI was supremely fortunate to have worked with some amazing developers back when I started. They were experienced, knowledgable, helpful and humble and really took me under their wing. I'll never be able to thank them enough.\n\nTherefore, I'd highly recommend getting yourself a mentor to help with your development journey.\n\n![](/img/people-2569234_640.jpg)\n\nThis is different from a teacher or tutor (although there is overlap at the edges of the roles): a mentor is a guiding light to help give you focus and direction, to answer questions and point you along the right path for your particular journey.\n\nI'd recommend taking a look at [Coding Coach](https://codingcoach.io 'Coding Coach website') or my very own [mentorship programmes](/mentorship 'Rob Kendal coding mentorship programmes') to find a mentor that's right for you.\n\n## Mentor others\n\nFollowing on from the last point, you too can be a mentor and again, you don't have to have coded for decades or be an absolute expert.\n\nThink about where you are on your journey and how far you've come. Even if you're 6-8 months into learning to code, there are people only 1-2 _weeks_ into theirs; these are the people you can definitely help out.\n\nThat said, if you _are_ quite experienced, then all the more reason to help someone else who's just starting out.\n\n> Become the guide you wish you'd had when you started\n\nIt's rewarding beyond measure, and a win win situation: someone getting started is helped and guided, and you learn so much in the process, believe me.\n\n## You don't get what you don't ask for\n\nI'm from Yorkshire in the UK and there's a saying in this North East part of the world: Shy bairns get nowt.\n\nIn essence we're really saying that 'you get nothing by keeping quiet'.\n\nIt's easy to look at seemingly successful developers and popular Twitter personas and assume that everyone has lucky breaks and opportunity just falls from the sky.\n\nTo be honest, this does happen to a small number of people, but most of the successful people you'll know are a combination of trying (a lot), keeping their eyes open for opportunities and only a little sprinkle of luck.\n\nMost of the time it's about asking for what you want. Now I'm not suggesting you just go kicking your boss' door in a demanding a raise, but in all seriousness, if you think you deserve a pay rise, prove it and then _ask for it_!\n\nWant to switch up your career? Ask about training programs at your current workplace. Want to talk to someone on LinkedIn about their career? Ask them.\n\nThe worst that will happen is you get a 'no'. In which case, time to move on and try something else.\n\n## Keep track of all your wins\n\nThis is a big one for me. It's very easy as a human to skew towards the negative. Even if you've just launched five features on a product used by millions, I would bet that it's that single tiny error that happened that you'll be thinking about, right?!\n\nI keep a notebook of little victories and compliments I've received and look through them from time to time, especially when the [imposter syndrome](/blog/2019-05-10-fighting-imposter-syndrome-as-a-developer 'Fighting imposter syndrome as a developer') kicks in from time to time.\n\nIt's not about ego or vanity, but it's about celebrating your victories and remembering how far you've come.\n\n## You don't have to know everything\n\nThe world of development is HUGE. I mean seriously almost infinite. Between languages, frameworks, patterns, platforms, frontend, backend, the list goes on.\n\nWhen you're starting out there can be an overwhelming urge to have to know everything all at once. But I'm here to tell you that you don't need to know everything and, in reality, you can't or won't ever know it all q-- the landscape is just too vast.\n\n![](/img/magic-cube-1976725_640.jpg)\n\nOf course, as a frontend developer starting out, I'd recommend focussing on the three core pillars of HTML, CSS, and JavaScript, but once you're getting into the swing of things, start to add bits and pieces to your knowledge depending on what takes your fancy.\n\n## Senior doesn't mean encyclopedia\n\nJust because someone is a senior developer or an architect or principle, or has been programming for 100's of years, does not automatically make them the all knowing beasts you think they may be.\n\nI'll let you into a secret: I've been developing in a fullstack fashion for over fifteen years and I still have to look up some of the most trivial snippets of code; I still miss semicolons out of things and I still make mistakes.\n\nSure, I know a lot about a lot, but there's oceans of knowledge I haven't even sailed upon. Just because people have been around the block doesn't directly equate to an infallible, all-knowing knowledge. Neither does it mean they're always automatically right or know better.\n\nThe point I'm driving at here is that just because you're less experienced or starting out doesn't mean your ideas are less valuable or that you have less to contribute.\n\nIt's also why adopting a life long approach to learning is so important as a developer.\n\n## Titles don't really mean much in the long run\n\nAnother thing to bear in mind is that some people get caught up in a title race and it's easy to think that becoming a 'principle developer' or 'lead architect' is the end goal. Yes, titles and recognition are nice and there's money and rewards that come with more senior titles, but they don't always reflect the abilities of the holder nor just how long they've been in the game.\n\nI'm not saying that you can't have 'become a lead developer' as a goal, but don't set your standards by the titles that you, or others, hold. It's your attitude, actions, and what you contribute to the development community that will ultimately shape your legacy.\n\n## Networking is essential!!\n\nIt really is _who you know_ not always _what you know_.\n\nI wish I'd spent more time making connections with other developers, recruiters, leaders, and makers on social media, in real life. I think I've made up for it over the years, but had I started sooner, who knows what doors it could have opened up.\n\nMake yourself a Twitter profile and register on LinkedIn. These are both excellent platforms for connecting with your fellow devs and growing your network. It's not about a popularity contest, but it'll help you with a number of areas in your career:\n\n- Finding a new job.\n- Starting a freelance business.\n- Launching a product or service.\n- Selling content, ebooks, courses, and more.\n- Make new friends.\n- Helping other to learn.\n- Contributing to open source.\n\nAnd it doesn't have to involve hours and hours of work, but just regular little interactions with people, making connections, being helpful and honest, being yourself. Over time, your network will grow and you'll get as much out of it as you give.\n\n[![Call to action banner pointing people to my twitter account](/img/mastodon_cta.png 'follow me on twitter for more great content')](https://indieweb.social/@kendalmintcode 'Follow me on twitter')\n\n## Ignore the gatekeepers\n\nAs with all life, you're going to come across people who, for whatever reason, just aren't great. There's a lot of gatekeeping in a lot of industries, but it's especially rife in the tech world.\n\nYou can avoid a lot of it by just not engaging, and I'd strongly suggest that you do avoid as much as possible. I come across a lot of developers who have been put off before they've even started because of trolls, haters, negative attitudes, condescension, and don't get me started on how women in tech can be treated.\n\nDevelopment is one of those few things in life that's truly open for _everyone_. It's about your mental attitude and looking at problems, breaking them down, solving for others. Everything else is just tools, time, practice and approach.\n\nI don't like CSS-in-JS, but you know what, it's a valid approach and if it helps some people build something awesome for others then that's OK by me.\n\nSure, there's better ways of doing things and some tried and tested approaches that work smoother than others, but a lot of development is opinions, nothing more.\n\nSo don't let others tell you you can't or let them intimidate you of course. Similarly, don't shame people when they share something of theirs.\n\n## Recruiters are both the devil and angels in disguise\n\nI love recruiters. Well, _some_, recruiters. In fact, I owe a lot of my success to the good ones.\n\nIf you want to get your foot in the doors of places you might not ordinarily be able to, get in touch with some recruiters and share with them your career aspirations. This is an essential part of networking for me.\n\nIt's increasingly important as a junior developer starting out to grow a connection base that includes at least a handful of trusted recruiters that take a genuine interest in you. They good ones will put the work in, take the time to get to know you and your skills and really talk you up to their clients (the employers).\n\nDon't be put off by the chancers, the glorified mobile phone salesmen, and the ones that don't have your interests at heart.\n\n## Everyone feels like imposter\n\nI have [an article on fighting imposter syndrome](/blog/2019-05-10-fighting-imposter-syndrome-as-a-developer 'Fighting imposter syndrome as a developer') as a developer which is worth a read, but there's bound to be a few points in your career where you'll feel down, feel a little worthless like your contributions don't matter, and wonder what the hell you're doing with your career.\n\nThat's OK. That's normal and it's more common than you think. In fact, it's very common in high-functioning, intelligent people. That feeling of not belonging, where you're simply blagging it and faking it and people will eventually find you out.\n\nThis is where little tips like talking about it helps, as does keeping that accomplishments journal we talked about earlier. Believe me, everyone suffers from it here and there and I'm no exception.\n\nJust remember that you can combat it and you should push ahead with your goals regardless.\n\n## Other helpful career articles\n\nI have a few other articles and helpful recourses if you're looking for a leg up in your development career or to get started as a developer:\n\n- Article on [things you should know as a frontend developer](/blog/2020-01-07-what-should-you-know-as-a-frontend-developer 'things you should know as a frontend developer').\n- Discover my [coding mentioship services](/mentorship 'Learn to code with my via my mentorship programmes').\n- How to [get hired as a developer in the tech industry](/blog/2019-05-04-getting-hired-as-a-developer-in-the-tech-industry 'Getting hired as a developer in the tech industry').\n- Free ebook, [From Aspire to Hired](/publications 'Free ebook From Aspire to Hired') - start coding and land your first dev job.","src/content/blog/things-i-wish-i-d-known-as-a-junior-developer.mdoc","4ef374fd68641d66","things-i-wish-i-d-known-as-a-junior-developer.mdoc","using-css-custom-properties-to-apply-themes-in-javascript-or-react",{"id":694,"data":696,"body":702,"filePath":703,"digest":704,"legacyId":705,"deferredRender":156},{"title":697,"description":698,"featured":145,"featuredimage":699,"date":700,"tags":701},"Using CSS custom properties to apply themes in JavaScript or React","Following on from my recent article on how to build a Node JS API server that uses JSON files, I wanted to share another recent experience I had: using CSS custom properties to apply a custom theme to a React website.","/img/deanna-ritchie-227649-unsplash_o-1.jpg",["Date","2019-04-01T07:40:12.197Z"],[338,150,226],"![Signposts in the sunshine](/img/deanna-ritchie-227649-unsplash_o-1.jpg)\n\nFollowing on from my recent article on [how to build a Node JS API server that uses JSON files](/blog/how-to-build-a-restful-node-js-api-server-using-json-files), I wanted to share another recent experience I had: **using CSS custom properties to apply a custom theme** to a React website.\n\nLet's get to it!\n\n**PS -** as always, [feel free to skip to the meat and potatoes of the article](#building-a-custom-theme-machine).\n\n## Disclaimer: there is no React...\n\nStraight out the gates I'm going to preface this entire post with an admission: I've built this demo using vanilla JS. I know, I know, it mentions React in the title and I started out the code with React-intentions, but as I got into the details, I realised that actually, you don't need React at all for this sort of thing. By switching up the angle to a broader target, we can achieve two things:\n\n1.  Include people who prefer to not use React but would still like to apply custom CSS properties in their theme work.\n2.  Recognise that React is **awesome**, but it is not some holy silver bullet that everything needs to be built in...\n\n## Understanding custom CSS properties\n\nI was inspired recently by the [Smashing Mag Book 6](https://www.smashingmagazine.com/2018/09/smashing-book-6-release/) which had a huge section devoted to CSS custom properties, written by [Mike Riethmuller](https://www.madebymike.com.au/) – in my opinion, one of the pioneers of using custom properties in the real world and you should go read his work.\n\nCustom properties (also referred to as CSS variables, although they are really more like properties in how they're declared and used) offer a huge advantage in that they are dynamically scoped and resolved at runtime where they will update their uses.\n\nFor example, this means that we could have a custom property, say `--special-background-color: blue;` and use this as a value against another property within a selector like this, `background-color: var(--background-color);`. However, we could _update_ the value of 'special-background-color' to 'red' _after_ the styles have been loaded and applied, and our 'background-color' would be updated too – neat!\n\nYou might see them in use like this:\n\n```css\n:root {\n  --hero-bg-color: yellow;\n  --heading-font-size: 1.5rem;\n}\n\n/* ...other styles */\n\n.hero {\n  background-color: var(--hero-bg-color);\n  /* this is evaluated to: background-color: yellow */\n}\n```\n\nIn the Smashing book (and his website), Mike explains in great detail about the in's and out's of CSS custom properties, why, when and how to use them, as well as some common pitfalls and approaches.\n\nI'm not going to revisit well documented information here; instead, I will present you with a useable strategy to enable you to apply custom, dynamic styling to your sites _today_ using power of CSS custom properties.\n\n## Loading themes dynamically\n\nAt IAM Cloud, we have a suite of [products in the enterprise authentication space](https://www.iamcloud.com/). One such product allows a level of customisation per client, ultimately applying a set of high-level style changes, heading colours, button colours, background images, etc.\n\nAs we're redeveloping our products into separate UI platforms, it became apparent that we needed to handle such custom themes in a more dynamic fashion without having to download additional (potentially large) stylesheets or maintain a growing list of customer-specific stylesheets – any changes to which will require _a lot_ of work to edit them all...\n\nSASS or pre-processors won't help us here due to their static nature – whilst they're dynamically processed and compiled using variables and functions, this is done prior to being output and what is output is vanilla CSS – i.e. we cannot affect or change already defined values without completely overriding the original selector.\n\nThe thinking (and the process) of how a custom property theming mechanism could work flowed like this:\n\n1.  Grab a collection of bespoke, client-specific, CSS custom properties via a theming API.\n2.  Process the properties to make sure they're valid.\n3.  Apply the styles – either via injecting a style element, or using the built in JavaScript function `element.style.setProperty('--my-epic-var', someValue);`\n\nLet's work through the steps and build up a dynamically loaded theme for ourselves.\n\n## \u003Ca name=\"building-a-custom-theme-machine\">\u003C/a>Building a custom theme machine\n\nFor those eager beavers among you, [head over to the finished project](https://codesandbox.io/embed/5z6yjrpr84) to see what we're building. I'm using [CodeSandbox.io](https://codesandbox.io/) to host the files which in turn uses the impressive [Parcel](https://parceljs.org/getting_started.html) for bundling (PS - I'm switching my projects to Parcel from Webpack in the future and will be creating a Parcel Start Kit to match my Webpack Starter Kit).\n\nFor starters, our file structure is quite simple:\n\n```\n/src\n    /data\n        --theme.json\n    /helpers\n        --themeBuilder.js\n    --index.js\n    --theme.css\nindex.html\n```\n\nNothing too complex here, but each file plays a part:\n\n- `theme.json` – this is where we'll keep out client's custom style choices.\n- `themeBuilder.js` – unsurprisingly, the themeBuilder file helps to build out our styles using the custom properties set in `theme.json`.\n- `index.js` – our main JavaScript starting point for the project. It handles the fetching of the styles and calling the themeBuilder.\n- `theme.css` – we'll keep our default set of CSS variables here, ready to be overridden later on.\n- `index.html` – the main starter point for the project and the file that Parcel loads to begin with.\n\n### Looking at the default styles\n\nIf you open up the `index.html` file, you'll notice a couple of things. Firstly we're pulling in the fantastic [Bulma CSS framework](https://bulma.io/documentation/) in the head using this line:\n\n```html\n\u003C!-- grab the Bulma library (for some good base styles) -->\n\u003Clink\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css\"\n/>\n```\n\nNext, we have a really simple content structure that shows off a couple of styles that we can customise:\n\n```html\n\u003Cmain class=\"custom-theme\">\n  \u003Csection class=\"hero is-fullheight\">\n    \u003Cdiv class=\"hero-body\">\n      \u003Cdiv class=\"container\">\n        \u003Cdiv class=\"content notification\">\n          \u003Ch1 class=\"title\">What an interesting title\u003C/h1>\n          \u003Cp>\n            Integer sollicitudin, tortor a mattis commodo, velit urna rhoncus\n            erat, vitae congue lectus dolor consequat libero. Donec leo ligula,\n            maximus et pellentesque sed, gravida a metus. Cras ullamcorper a\n            nunc ac porta.\n          \u003C/p>\n          \u003Cbutton class=\"button\">Make exciting things happen\u003C/button>\n        \u003C/div>\n      \u003C/div>\n    \u003C/div>\n  \u003C/section>\n\u003C/main>\n```\n\nNotice the `custom-theme` class that everything is wrapped in. This will allow us to contain the scope of our theme (and associated CSS custom properties) to a particular slice of our content.\n\nOur base set of styles look like this:\n\n```css\n.custom-theme {\n  --hero-bg-color: #00d1b2;\n  --notification-bg-color: #363636;\n  --content-color: #fff;\n  --button-bg-color: #3273dc;\n}\n\n.custom-theme .hero {\n  background-color: var(--hero-bg-color);\n}\n\n/* ...rest of file */\n```\n\nWhich gives us a lovely looking background with a content box like this:\n\n![Our first screen styled up](/img/starting-point.png)\n\nOur starting page with base styles applied\n\n### 1- Grab our styles from an API\n\nNow that we've got a solid base to customise, it's time we crafted a `.json` file full of overrides to our base styles. Looking at `/data/theme.json` you'll see the following:\n\n```json\n{\n  \"hero-bg-color\": \"#ffdd57\",\n  \"notification-bg-color\": \"#8187de\",\n  \"content-color\": \"#333\",\n  \"button-bg-color\": \"#cc1a9c\"\n}\n```\n\n_(I've chosen to name the variables the same as they appear in the ultimate CSS because this will make them easier to automate if our list grows later on. You can see how this might work a little bit later in the article.)_\n\nInside our `index.js` file, we have a fairly straightforward couple of things going on. First up, we have a function to build a new style element and inject it into our document head:\n\n```javascript\n// With help from David Walsh:\n// https://davidwalsh.name/add-rules-stylesheets\nconst buildStyleElement = () => {\n  const styleEl = document.createElement('style');\n\n  styleEl.appendChild(document.createTextNode(''));\n  document.head.appendChild(styleEl);\n\n  return styleEl.sheet;\n};\n```\n\n[David Walsh's helpful article](https://davidwalsh.name/add-rules-stylesheets) gives us some help to deal with a Webkit quirk here, but this function is quite simple: create a style element; add it to the document.head; finally, return the actual stylesheet so that we can add styles to this later on.\n\nNext, we have an `init()` function that kicks everything off:\n\n```javascript\nconst init = () => {\n  // load up our custom theme via some sort of async method (in real life)\n  // here, we'll simulate an ajax call\n  setTimeout(() => {\n    if (typeof CustomStyles !== 'undefined') {\n      // successful 'ajax' call\n      const stylesheet = buildStyleElement();\n      const customStyleRules = CustomThemeBuilder(CustomStyles);\n\n      stylesheet.insertRule(customStyleRules);\n    }\n  }, 1500);\n};\n```\n\nBecause this is an entirely self-contained project, we're not actually calling anything from an API. Instead, we're mocking the call, wait, response flow of an actual API call using the classic `setTimeout()` function built in to JS.\n\nWe check to see if our `CustomStyles` JSON (imported at the top of this file) is present, then we build the stylesheet, grabbing the return sheet value. Finally, we process our styles before adding them to the DOM.\n\n### 2- Process our custom properties; check they're valid\n\nNow for the fun part, building the theme. Inside the `/helpers/themeBuilder.js` file, you'll find the main theme/style processor:\n\n```javascript\n// our customTheme object (from the JSON) should be an object like this:\n// { \"theme-property-name\": \"#abcdef\" }\nconst ThemeBuilder = (customTheme) => {\n  // return if there's no custom theme available\n  if (typeof customTheme === 'undefined') {\n    return;\n  }\n\n  // gather our custom properties to insert into the stylesheet overrides\n  // we're using the ES6 backtick string notation here to keep things readable\n  const stylesToInsert = `\n .custom-theme {\n    ${insertPropertyIfValid('--hero-bg-color', customTheme['hero-bg-color'])};\n    ${insertPropertyIfValid(\n      '--notification-bg-color',\n      customTheme['notification-bg-color']\n    )};\n    ${insertPropertyIfValid('--content-color', customTheme['content-color'])};\n    ${insertPropertyIfValid(\n      '--button-bg-color',\n      customTheme['button-bg-color']\n    )};\n  }\n`;\n\n  // finally, send our styles back to the caller\n  return stylesToInsert;\n};\n```\n\nNothing too fancy here, although you might not be familiar with the ES6 [template literal syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) (also called the backtick string notation or template strings). Whilst ultimately producing a string type, the backtick just allows us to write strings over many lines more easily than traditional JS string syntax. Additionally, we can include variables within those strings much neater than before using the `${myVariableHere}` phrase.\n\nIn the function, we build up a string from our custom properties by calling the helper method, `insertPropertyIfValid(cssProperty, customPropertyValue)`. This is a tiny function towards the top of the file that just checks if our custom property string is not null, undefined, or empty.\n\nIf it's all good, then it returns the CSS custom property in a stylesheet-friendly format:\n\n```javascript\nreturn `${cssProperty}: ${customPropertyValue};`;\n// if passed values of '--hero-bg-color' and '#FDBB3D' as arguments\n// it will return the string '--hero-bg-color: #FDBB3D'\n```\n\n### 3- Apply the styles\n\nThe last part is to apply our styles to the page. As `themeBuilder.js` returns us a nice CSS rule/selector with our overrides in place, this line in `index.js` adds them to the page:\n\n`stylesheet.insertRule(customStyleRules);`\n\nWe could have used the JS mechanism for this of course, which looks like this:\n\n`element.style.setProperty('--my-epic-var', someValue);`\n\nI feel this boils down to personal preference. Using the `setProperty()` method means styles will be applied one by one; using our style injection method means you get everything fired off at once. It also looks a little more readable (arguably) from a code point of view.\n\nSo, here's our before...\n\n![Starting point styled up](/img/starting-point-1.png)\n\nBase elements with no customisation\n\nAnd here's what you get (after about 1.5 seconds delay) when our customised styles are applied:\n\n![Our custom loaded styles](/img/styles-applied.png)\n\nOur same content with our custom client theme applied\n\n## Taking it further with an automated style builder\n\nWhat we've got is a solid bit of theming work as it stands. However, given that we have a somewhat hard-coded collection of custom properties in the `themeBuilder.js` file, this isn't going to scale very well. For our situation at IAM Cloud, it's fine because it's clear what's happening in the file and we don't have a lot of properties of deal with.\n\nIf, however, this list started to grow, we would have to find a way to deal with a list of style overrides in the JSON file whose size we might not know.\n\nBut fear not, we can easily update our `themeBuilder.js` file to cope with a variable sized JSON list using a bit of code that could work like this:\n\n```javascript\nlet stylesToInsert = '.custom-theme {';\nObject.keys(customTheme).forEach((key) => {\n  const cssProperty = `--${key}`;\n  console.log(cssProperty);\n  stylesToAdd += insertPropertyIfValid(cssProperty, customTheme[key]);\n});\nstylesToAdd += '}';\n```\n\n**Note:** for this to work smoothly, we're assuming that the CSS custom properties in the JSON file(s) are named the same as they are in the final CSS files (or at least in a way that allows for easy manipulation in the JavaScript).\n\n## Looking through the finished project\n\n{% iframe\n  url=\"https://codesandbox.io/embed/5z6yjrpr84?fontsize=14\"\n  label=\"Theming with custom properties\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n/%}\n\n## Alternatives to theming with CSS custom properties\n\nBefore we all get giddy, there are some drawbacks to using custom properties to apply themes right now, specifically around browser support. More specifically around Internet Explorer support :(\n\nSurprisingly, support amongst modern bowsers is quite good, but IE is a very limited beast.\n\nSo what are our alternatives? Fortunately, there are a couple of routes you can take if you want to or need to support older browsers.\n\n### Compile on the fly using the server\n\nThis is the harder of our options, the hammer if you will. You can use a server-side solution that could build CSS files from SASS on the fly and push out the result via an API server or even a service worker if you'd like to get really fancy.\n\nHowever you swing it, you'll essentially be compiling a CSS sheet and updating the page; this brings us to the second option...\n\n### Using CSS overrides (AKA the good old days)\n\nTo really ensure complete coverage you'll have to revert to the old days of simply building a set of style overrides that take advantage of the cascade to apply your theme. It doesn't have to be specifically CSS of course, you could still use your favourite CSS pre-processor to generate the styles, but you would lose the dynamic nature of the whole articles approach: loading style themes dynamically and apply them via CSS custom properties.\n\n## What ideas and approaches do you know for theming?\n\nTopics like theming and customisation are a minefield for debate; there are a ton of ways to approach them and achieve results. What ideas have you got, how did you find this article on custom properties being used for theming?","src/content/blog/using-css-custom-properties-to-apply-themes-in-javascript-or-react.mdoc","e22b0c672a5fc397","using-css-custom-properties-to-apply-themes-in-javascript-or-react.mdoc","using-wordpress-as-a-headless-cms-with-nextjs",{"id":706,"data":708,"body":715,"filePath":716,"digest":717,"legacyId":718,"deferredRender":156},{"title":709,"description":710,"featured":156,"featuredimage":711,"date":712,"tags":713},"Using WordPress as a headless CMS with Next.js","In part 2 of the Getting Started with Next.js, we connect a headless WordPress CMS to Next.js and pull in blog post content using WPGraphQL","/img/next-js-with-wordpress-part-2-blog-post.png",["Date","2020-09-14T07:08:57.000Z"],[150,714,441,440],"WordPress","![Blog article on connecting WordPress as a headless CMS to Next.js](/img/next-js-with-wordpress-part-2-blog-post.png)\n\nIn [part one of using WordPress as a headless CMS with Next.js](/blog/configuring-wordpress-as-a-headless-cms-with-nextjs 'Setting up WordPress as a headless CMS with GraphQL support'), we looked at the basics of setting up a WordPress instance so that we can access Posts and Pages and custom content via GraphQL using the Next.js framework. We also created a new Next.js app using the `create-next-app` tool.\n\nFor part two in the series, we're going to take those starting bases and connect the dots to supply content data from WordPress via the WPGraphQL plugin and access it in our Next.js project.\n\n_If you like this article, you'll love the other helpful content I post on Mastodon._ [_Follow me on Mastodon @kendalmintcode@indieweb.social_](https://indieweb.social/@kendalmintcode 'Find me on Mastodon @kendalmintcode@indieweb.social') _and say hi._\n\n## Cleaning up the new Next.js project\n\n> **Note:** [in part one, we created a new Next.js application](/blog/configuring-wordpress-as-a-headless-cms-with-nextjs 'Part one of setting up WordPress as a headless CMS with GraphQL') using the `create-next-app` tool. I'd recommend going through the steps in part one first, to get that set up before continuing along here.\n\nOut of the box, the `create-next-app` provided by Next.js adds in a lot of helpful stuff as a starter for ten. However, we can remove some of the cruft to get us down to a basic build and limit any possible confusion.\n\n### Files to delete\n\nOpen up the project from part one in VS Code (or your favourite IDE) and delete the following files and folders:\n\n- /pages/api\n- /pages/api/hello.js\n\n### Files to edit\n\nNext, we need to amend the `/pages/index.js` file. This is the main entry point, our home page, for our app. At the moment, it's crammed full of Next.js guides and links and other helpful, but unwanted markup, so let's clear it out.\n\nOpen up `/pages/index.js` and locate the `\u003Cmain>` element in the component. Replace everything between the open `\u003Cmain>` and closing `\u003C/main>` with the following:\n\n```html\n\u003Ch1 className={styles.title}>Welcome to our demo blog!\u003C/h1>\n\n\u003Cp>\n  You can find more articles on the{' '}\n  \u003CLink href='/blog'>\n  \u003Ca>blog articles page\u003C/a>\n  \u003C/Link>\n\u003C/p>\n```\n\nIf you've used React Router, you might be familiar with the rather unique-looking way that we're linking to the `/blog` page. Next.js uses a similar internal routing component as React Router to link to internal pages, it looks like this:\n\n```html\n\u003CLink href='/blog'>\n  \u003Ca>blog articles page\u003C/a>\n\u003C/Link>\n```\n\nYou can [read more about the Next.js Link element](https://nextjs.org/docs/api-reference/next/link 'Next.js Link element') here, but the essence is that you need to declare the `\u003CLink>` component and add a `href=\"/link-to-your-page\"` attribute with the path to where you want to link to. Finally, you need to add a single `\u003Ca>` anchor element with whatever name you want to use for the link.\n\n**Note:** you should add any class names or other typical anchor attributes you wish to the `\u003Ca>` tag _not_ the `\u003CLink>` component.\n\nOne last thing to do here and that's **import the `Link` component**. Add the following to the top of the `/pages/index.js` file:\n\n```js\nimport Link from 'next/link';\n```\n\nWith that done, the entire `/pages/index.js` file should look like this:\n\n```js\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport styles from '../styles/Home.module.css';\n\nexport default function Home() {\n  return (\n    \u003Cdiv className={styles.container}>\n      \u003CHead>\n        \u003Ctitle>Create Next App\u003C/title>\n        \u003Clink rel=\"icon\" href=\"/favicon.ico\" />\n      \u003C/Head>\n\n      \u003Cmain className={styles.main}>\n        \u003Ch1 className={styles.title}>Welcome to our demo blog!\u003C/h1>\n\n        \u003Cp>\n          You can find more articles on the{' '}\n          \u003CLink href=\"/blog\">\n            \u003Ca>blog articles page\u003C/a>\n          \u003C/Link>\n        \u003C/p>\n      \u003C/main>\n\n      \u003Cfooter className={styles.footer}>\n        \u003Ca\n          href=\"https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Powered by{' '}\n          \u003Cimg src=\"/vercel.svg\" alt=\"Vercel Logo\" className={styles.logo} />\n        \u003C/a>\n      \u003C/footer>\n    \u003C/div>\n  );\n}\n```\n\n### Files to add\n\nOf course, we need a couple more files that we'll build out over the course of the article. These will handle our blog post routing and data handling, interacting with our WordPress backend.\n\nAdd the following folders and files within them:\n\n- Folder `/lib` - put this in the root of the project. This will hold any utility files and specifically our API file that will talk to WordPress.\n- File `/lib/api.js` - this will handle our GraphQL queries and data fetching.\n- Folder `/pages/blog` - nothing fancy here, just a folder to hold our blog pages.\n- File `/pages/blog/index.js` - when people visit a route like `https://somedomain.co.uk/blog/` this is the page that will serve that request.\n- File `/pages/blog/[slug].js` - similar to the above, this rather weird looking page will handle individual blog pages, e.g. a domain like `https://yourdomain.com/blog/an-interesting-article/.`\n- File `/styles/Blog.module.css` - this is a standard CSS file that will hold styles for our blog list items.\n- File `/.env.local` - an environment variable file to hold\n\nThat odd looking file name, `[slug].js` looks really unfamiliar, but it's how Next.js determines dynamic routes within a folder.\n\nWe'll cover that next.\n\n## Dynamic routing in Next.js\n\nBefore we start building out our new pages, it'll be helpful to quickly highlight how dynamic routing in Next.js works.\n\nOut of the box, without doing anything fancy, Next.js will try to match any route you throw at it to a `.js` file that it finds under the `/pages` folder in your project.\n\nFor example:\n\n- `/` will match `/pages/index.js`\n- `/blog/` will match `/pages/blog.js` or `/pages/blog/index.js`\n- `/contact/thanks` will match `/pages/contact/thanks.js`\n\nHowever, when it comes to dynamic routes, such as a blog post or product page, we might have one physical page file that acts as a template of sorts, handling an unknown amount of routes.\n\nFor this, Next.js will match a filename in the format `[param]`. So, in our case above where we have the file path `/pages/blog/[slug].js`, Next.js will call the `[slug].js` page for the following routes:\n\n- `/blog/my-awesome-blog-post`\n- `/blog/another-great-post-title`\n- `/blog/some-final-title-here`\n- ...and so on.\n\nYou can call this dynamically routed file whatever you like between the `[` and `]` characters, but you'll be referencing this name inside the file (as you'll soon see), so it makes sense to call it something meaningful. In our case 'slug' is the terms that WordPress uses, so we'll leave it as that.\n\nIt's worth looking at the [official Next.js documentation on dynamic routing](https://nextjs.org/docs/routing/dynamic-routes 'Official documentation on Next.js dynamic routing') to familiarise yourself with the syntax and conventions to apply them to your app/site.\n\n## Fetching data with the api.js file\n\nNow for the real meat and potatoes of the article: fetching data!\n\nThere's no right way to build out your files in a project like this, but I tend to prefer building things in a least-dependent to most-dependent order. In our case, the data-fetching isn't dependent on anything else, but the UI-layer depends on this, so it makes sense to start here.\n\n### Dealing with environment variables\n\nSome things, like global variables that might change between environments are best stored in (funnily enough) environment variable files, usually created as `.env` files in the root of your project.\n\nSince we've already created one such file, let's populate it with our WordPress GraphQL URL. Open up the file `/.env.local` and add the following line:\n\n```js\n    WP_API_URL=http://demo.robkendal.co.uk/graphql/\n```\n\n> **Note:** you can use my URL as above, but note that a) it might be taken down without notice, and b) you may not get the results you want. It's always best to get your own WordPress instance. Either way, you'll want to add in the url in the format `http://your-domain-here.com/graphql/`\n\nNext.js comes with built in support for environment variable files. You just have to add a `.env.local` file in the root of your file and add in what you need. As always, the Next team have [great docs on environment variables]() for you to peruse.\n\n### Adding the general fetching function\n\nOpen up the `/lib/api.js` file and let's start adding in our data-fetching magic. The first thing is to add the general fetch function that will handle the talking to our WordPress GraphQL endpoint.\n\nAt the top of the file, we'll reference our API URL we just added into the `.env` file, followed by the `fetchAPI` function.\n\n```js\nconst API_URL = process.env.WP_API_URL;\n\nasync function fetchAPI(query, { variables } = {}) {\n  // Set up some headers to tell the fetch call\n  // that this is an application/json type\n  const headers = { 'Content-Type': 'application/json' };\n\n  // build out the fetch() call using the API_URL\n  // environment variable pulled in at the start\n  // Note the merging of the query and variables\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({ query, variables }),\n  });\n\n  // error handling work\n  const json = await res.json();\n  if (json.errors) {\n    console.log(json.errors);\n    console.log('error details', query, variables);\n    throw new Error('Failed to fetch API');\n  }\n  return json.data;\n}\n```\n\nThis is an asynchronous function as we need to wait for the `fetch()` call to complete. The rest of the comments should be enough to walk you through the file.\n\nBelieve it or not, this is the most complex function in our API file. Whilst not the longest, it does have more moving parts. The upcoming functions we'll be defining next largely outline GraphQL queries that the `fetchAPI()` function here will handle.\n\n### Add function to get blog post listings\n\nFrom here on out, we'll define our GraphQL queries that will shape the data we want back from WordPress.\n\n> **Quick tip:** the best approach to defining GraphQL queries is to fire up the GraphiQL plugin on the WordPress instance, write your query, test the results and then copy it into your API file. That way, you know it works and hopefully eliminate errors along the way.\n\nAs far as queries go, this is quite straightforward. We're looking at all posts, grabbing the first 20 results (for brevity), and ordering them by descending date order.\n\nWith these exception of the `extraPostInfo` ACF custom fields [we defined in part one of this series](/blog/configuring-wordpress-as-a-headless-cms-with-next.js 'Part one of configuring WordPress as a headless CMS with Next.js'), the rest of the data is standard WordPress data, such as title, id and the slug of the post.\n\n```js\n// Notice the 'export' keyword here. We'll be calling this function\n// directly in our blog/index.js page, so it needs to be exported\nexport async function getAllPosts(preview) {\n  const data = await fetchAPI(\n    `\n    query AllPosts {\n      posts(first: 20, where: { orderby: { field: DATE, order: DESC}}) {\n        edges {\n          node {\n            id\n            date\n            title\n            slug\n            extraPostInfo {\n              authorExcerpt\n              thumbImage {\n                mediaItemUrl\n              }\n            }\n          }\n        }\n      }\n    }\n    `\n  );\n\n  return data?.posts;\n}\n```\n\nOnce the query returns, we use the [optional chaining operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining 'Optional chaining operator') to return the `posts` array or `undefined` if that is unavailable.\n\nYou can see that this is a really simple function. There's only two real operations here: 1 to call the `fetchAPI()` function we defined previously; and 2 to return the data. The largest part of this function is the GraphQL query that Next.js will be passing to WordPress to retrieve our Posts data.\n\n> GraphQL is one of those technologies that's quite simple to get to grips with on the surface, but has a great deal of depth if you want to do more complex queries with multiple parts and fragments. I'd recommend having a [look around the official GraphQL docs](https://graphql.org/ 'Official GraphQL documentation') and playing with some of the queries in your WordPress GraphQL playground.\n\nHere's how the same query looked in GraphiQL when I built it, and the results that it returned:\n\n![All WordPress posts GraphQL query](/img/nextjs-article-graphql-query.png)\n\n### Add function to get all blog post slugs\n\nHaving fetched a list of blog posts from WordPress with some specific data, now we want to get a list of all possible Posts, but _only_ the slug of each Post.\n\nThis function, `getAllPostsWithSlug()` will be used on our individual blog article page, currently located at `/blog/[slug].js`.\n\nI'll go into this in more detail when we get to the frontend component, but for now, it's enough to understand that we need to get a list of matching slug values for Next.js to match an individual one (i.e. the one you're visiting) against. That's where this function comes in.\n\nStill in the `/lib/api.js` file, define a new exported async function, `getAllPostsWithSlug()` and populate it as follows:\n\n```js\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(\n    `\n    {\n      posts(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `\n  );\n  return data?.posts;\n}\n```\n\nThese sorts of queries will start to look more common and familiar the more that you build them out. You'll start to notice a pattern too where we define a content type (e.g. `posts`), add an optional filter (e.g. `(first: 10000)`), then look for `edges` and a `node` within that (e.g. the individual content type item) and properties of that content type (e.g. `slug`).\n\n### Add function to get an individual blog post's data\n\nThis next GraphQL query is going to be used to pull in data from an individual Post item. It'll be called when viewing a single blog article on the `[slug].js` page.\n\nUnder the last query, define a new exported async function called `getPost()`. It should look like this:\n\n```js\nexport async function getPost(slug) {\n  const data = await fetchAPI(\n    `\n    fragment PostFields on Post {\n      title\n      excerpt\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PostIdType!) {\n      post(id: $id, idType: $idType) {\n        ...PostFields\n        content\n      }\n    }\n  `,\n    {\n      variables: {\n        id: slug,\n        idType: 'SLUG',\n      },\n    }\n  );\n\n  return data;\n}\n```\n\nThis is the longest query in our `api.js` file and it looks a little different, so let's review it.\n\n### GraphQL fragments\n\nThe very first part is called a [fragment](https://graphql.org/learn/queries/#fragments 'GraphQL fragment documentation') and it's decorated with the `fragment` keyword in the query.\n\n```js\n`\nfragment PostFields on Post {\n  title\n  excerpt\n  slug\n  date\n  featuredImage {\n    node {\n      sourceUrl\n    }\n  }\n}\n//...rest of query\n`;\n```\n\nGraphQL fragments give us the ability to break larger, more complex queries into smaller, reusable parts.\n\nFor example, you might have a couple of queries as part of your call, but they both use the same Post data. Rather than have to define the same fields on each query, you can define a single fragment, and then use the spread operator syntax to pull those fields in to each separate query.\n\nWe've done that here in the `PostBySlug` query that we defined:\n\n```js\n`\nquery PostBySlug($id: ID!, $idType: PostIdType!) {\n  post(id: $id, idType: $idType) {\n    ...PostFields\n    content\n  }\n}\n`;\n```\n\nNotice the `...PostFields` fragment that we've referenced. You could also remove the fragment and define the query like this:\n\n```js\n`\nquery PostBySlug($id: ID!, $idType: PostIdType!) {\n  post(id: $id, idType: $idType) {\n    title\n    excerpt\n    slug\n    date\n    featuredImage {\n      node {\n        sourceUrl\n      }\n    }\n    content\n  }\n}\n`;\n```\n\n### GraphQL variables\n\nThe other interesting thing in our query is the use of variables to filter the specific Post we want to fetch data about.\n\nFocussing on the main part of the query for now, this part:\n\n```js\n`\nquery PostBySlug($id: ID!, $idType: PostIdType!) {\n    post(id: $id, idType: $idType) {\n      ...PostFields\n      content\n    }\n  }\n`,\n  {\n    variables: {\n      id: slug,\n      idType: 'SLUG',\n    },\n  };\n```\n\nYou can see the GraphQL variables defined with a '\\$' dollar symbol. In the first line, `query PostBySlug($id: ID!, $idType: PostIdType!)` we're defining our query name and the variables we'll be passing in, and their types.\n\nThe variable types are dictated by the GraphQL schema. You can view the schema on the WordPress GraphiQL explorer, but it's a bit beyond the scope of this article.\n\nNext, we pass those variable placeholders in to filter a single, specific Post item using `post(id: $id, idType: $idType)`.\n\nOf course, now we need to actually pass in the variable _values_, which is where the second argument of the `fetchAPI()` method comes in. We pass in a plain JavaScript object with a `variables` property that contains all our GraphQL variables and their values.\n\nIn this case, for `id` we're using the `slug` argument passed to the containing function, `getPost(slug)`. And for `idType` we're using a simple string value of `SLUG`.\n\nWith all our queries defined, tested and verified in WordPress GraphiQL, it's on to the frontend components and pages.\n\n## Listing blog posts from WordPress using GraphQL\n\nNow the exciting part: building out the blog listing page! Next.js is built on React, so there shouldn't be too much out of the ordinary here.\n\nOpen up the `/pages/blog/index.js` file and let's kick things off with the imports at the top:\n\n```js\nimport Head from 'next/head';\nimport Link from 'next/link';\n\n// data\nimport { getAllPosts } from '../../lib/api';\n\n// styles\nimport styles from '../../styles/Home.module.css';\nimport blogStyles from '../../styles/Blog.module.css';\n```\n\nYou can see that we're pulling in the `Head` and `Link` components from Next.js (more on `Head` in a moment), followed by our data handling `getAllPosts` function. Right after those, we're adding two style module files.\n\nThese are essentially modular, [component-level CSS files that Next.js gives support for](https://nextjs.org/docs/basic-features/built-in-css-support 'Next.js built in CSS support') right out of the box. We'll also discuss those in a moment.\n\nCool, imports done. Next thing is to outline the main Blog component:\n\n```js\nconst Blog = ({ allPosts: { edges } }) => (\n  \u003Cdiv className={styles.container}>\n    \u003CHead>\n      \u003Ctitle>Blog articles page\u003C/title>\n      \u003Clink rel=\"icon\" href=\"/favicon.ico\" />\n    \u003C/Head>\n\n    \u003Cmain className={styles.main}>\n      \u003Ch1 className={styles.title}>Latest blog articles\u003C/h1>\n      \u003Chr />\n      \u003Csection>\n        {edges.map(({ node }) => (\n          \u003Cdiv className={blogStyles.listitem} key={node.id}>\n            \u003Cdiv className={blogStyles.listitem__thumbnail}>\n              \u003Cfigure>\n                \u003Cimg\n                  src={node.extraPostInfo.thumbImage.mediaItemUrl}\n                  alt={node.title}\n                />\n              \u003C/figure>\n            \u003C/div>\n            \u003Cdiv className={blogStyles.listitem__content}>\n              \u003Ch2>{node.title}\u003C/h2>\n              \u003Cp>{node.extraPostInfo.authorExcerpt}\u003C/p>\n              \u003CLink href={`/blog/${node.slug}`}>\n                \u003Ca>Read more >\u003C/a>\n              \u003C/Link>\n            \u003C/div>\n          \u003C/div>\n        ))}\n      \u003C/section>\n    \u003C/main>\n  \u003C/div>\n);\n\n// don't forget to export it as the default export!\nexport default Blog;\n```\n\nYou'll see we're referencing a specific prop, `allPosts` using the destructuring syntax. This will be a collection of all available Posts returned from the WordPress GraphQL query we defined earlier.\n\nThe `allPosts` prop is automatically provided to our Blog component via the `getStaticProps` function that we'll define later in the article.\n\nThe `\u003CHead>\u003C/Head>` component allows us to define meta data for this page and is a built in Next.js feature, more on this in a moment.\n\nSimilarly, the `className={styles.main}` syntax is how we reference styles from our CSS modules in Next.js. Again, we'll cover that shortly.\n\nThe main part of the Blog component is the loop that starts with `{edges.map(({ node }) =>`. It's not the nicest of naming structures, but we're effectively `edges` is an array of `node` items, each `node` represents a WordPress Post item.\n\nEach node returned from the `getAllPosts()` API function will be structured similar to this:\n\n```json\n{\n  \"node\": {\n    \"id\": \"cG9zdDoyOA==\",\n    \"date\": \"2020-07-09T07:18:42\",\n    \"title\": \"A third post with an interesting name\",\n    \"slug\": \"a-third-post-with-an-interesting-name\",\n    \"extraPostInfo\": {\n        \"authorExcerpt\": \"some excerpt details here\",\n        \"thumbImage\": {\n        \"mediaItemUrl\": \"http://demo.robkendal.co.uk/wp-content/uploads/2020/07/v7jgc6a3zn951.jpg\"\n      }\n    }\n  }\n},\n```\n\nKnowing this information, it becomes easier to pull out the relevant bits of content we need and inject them into our React JSX, like this:\n\n```js\n{\n  edges.map(({ node }) => (\n    \u003Cdiv className={blogStyles.listitem} key={node.id}>\n      \u003Cdiv className={blogStyles.listitem__thumbnail}>\n        \u003Cfigure>\n          \u003Cimg\n            src={node.extraPostInfo.thumbImage.mediaItemUrl}\n            alt={node.title}\n          />\n        \u003C/figure>\n      \u003C/div>\n      \u003Cdiv className={blogStyles.listitem__content}>\n        \u003Ch2>{node.title}\u003C/h2>\n        \u003Cp>{node.extraPostInfo.authorExcerpt}\u003C/p>\n        \u003CLink href={`/blog/${node.slug}`}>\n          \u003Ca>Read more >\u003C/a>\n        \u003C/Link>\n      \u003C/div>\n    \u003C/div>\n  ));\n}\n```\n\n### Meta data with Next.js Head\n\nIf you've built a site with React before you've probably come across the need to add meta data to your page. If you've done that, then there's an equally good chance you've come across [React Helmet](https://github.com/nfl/react-helmet 'React Helmet'). React Helmet is a really straightforward means to inject meta data into a page.\n\nNext.js offers a similar option that's handily baked right in. It provides a component called `\u003CHead>` which you'll see imported at the top of our `/pages/blog/index.js` page like so:\n\n```js\nimport Head from 'next/head';\n```\n\nAnd using it is even easier. Again looking at the top of our `Blog` component:\n\n```html\n\u003Chead>\n  \u003Ctitle>Blog articles page\u003C/title>\n  \u003Clink rel=\"icon\" href=\"/favicon.ico\" />\n\u003C/head>\n```\n\nAnything you add between the opening and closing `\u003CHead>\u003C/Head>` tags will be magically transported to the `\u003Chead>` of the static output `.html` file.\n\n### Module styling with `.module.css` files\n\nNext.js offers a [range of built in CSS support](https://nextjs.org/docs/basic-features/built-in-css-support 'Next.js built in CSS support'). One of the most impressive is the modular, component-level CSS support.\n\nYou can define a component CSS file by creating a file with the naming convention, `[name].module.css` and importing it in the component or page you want to use it in.\n\nThen, to apply the component-level styles, you attach them to an element as you would a JavaScript object, e.g. `className={styles.class}`.\n\nA more complete example might look like this:\n\n```js\nimport someStyles from 'componentName.module.css';\n\nexport default function MyComponent() {\n  return \u003Cmain className={someStyles.aclassname}>...rest of content here\u003C/main>;\n}\n```\n\nThis applies a unique class name to the component when it's rendered on the page, scoping it to that component so that there are no class conflicts.\n\n> Of course, you don't have to use this convention. You can just load in stylesheets as you would normally. However, to avoid conflicts, Next.js dictates that you must do this from a special file called `_app.js`, which you'll find by default under the `/pages/` directory.\n\nWith that background in mind, we can populate the `/styles/Blog.module.css` with some basic styles for the blog list. Open up the file and copy in the following:\n\n```css\n.listitem {\n  padding: 0.5em 0 1em;\n  margin: 1em auto 0.5em;\n  display: flex;\n  max-width: 60%;\n  border-bottom: 1px solid hsl(0, 0%, 89%);\n}\n\n.listitem__thumbnail img {\n  max-width: 10em;\n}\n\n.listitem__content h2 {\n  margin-top: 0;\n}\n\n.article {\n  max-width: 75%;\n  margin: 1em auto;\n}\n\n.postmeta {\n  text-align: center;\n  font-size: 1.5rem;\n}\n\n.article img {\n  max-width: 60%;\n  height: auto;\n}\n```\n\nIt's not super imperative to have these styles in place and feel free to amend them. They do stop things looking a little wild though.\n\nThe last thing to do here is the quickly add in some link styles to the `/styles/global.css` file, so open that up and add the following styles in:\n\n```css\na {\n  color: #0070f3;\n  text-decoration: none;\n}\n\na:hover,\na:focus,\na:active {\n  text-decoration: underline;\n}\n```\n\n### Static generation and handling external data\n\nNext.js does a [fantastic job of fetching data](https://nextjs.org/learn/basics/data-fetching/two-forms 'Next.js data fetching') and baking it into your pages at build time. It offers two main ways to grab this data:\n\n1. Fetching data at build time via `getStaticProps()` - this is known as **static generation.**\n2. Fetching data at render time via `getServerSideProps()` - this is known as **server side rendering or SSR**\n\n> There is a third, sort of hybrid way, which is where you have a static-generated front end that calls for data once the page has rendered. It's called **client-side rendering**. It's not exactly an edge case, but it offers a mix of the main two methods mentioned above and might be used on, say, a dashboard page.\n\nMost of the time, you'll want to strive for **static generation** using `getStaticProps()` because it offers the best performance for the end user and really takes advantage of the whole Jamstack, static site generation approach.\n\nThis is especially key if we're using WordPress because WordPress is already a server-side rendered website out of the box. Part of the reason to decouple WordPress from its own frontend with Next.js is to remove this server business and statically generate our frontend website.\n\nIf you're unsure which approach to take you can ask the question: \"Can this page be pre-rendered **ahead** of a user's request?\" If your answer is 'yes', then static generation is the right choice.\n\n### Accessing external data in Next.js using `getStaticProps()`\n\nNow that we're a bit clearer on Next.js and its static generation with external data-fetching, we can implement Next's `getStaticProps` method in our `/blog/index.js` page.\n\nAdd the following implementation of `getStaticProps` underneath the default export of our Blog component:\n\n```js\nexport async function getStaticProps() {\n  const allPosts = await getAllPosts();\n  return {\n    props: {\n      allPosts,\n    },\n  };\n}\n```\n\nAnd just how simple is that?! This function will be called by Next.js during build time to fetch our data from WordPress, passing it into the `props` of our main Blog component.\n\nYou could absolutely do all the data fetching right here without issue. However, we've abstracted at lot of the grunt work into our `/lib/api.js` for several reasons:\n\n1. It reduces the length of our components.\n2. It abstracts the data handling responsibility away from the component (whose job isn't really fetching data).\n3. It cleans up our components, making them much more maintainable and readable.\n4. It reduces duplication, especially around the main `fetchAPI()` function.\n\nIt's important to remember that `getStaticProps()` **has to be named exactly so**. It also **has to return a `props: {}` object**.\n\nYou can read more about static generation and `getStaticProps()` in the [official Next.js documentation](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation 'Next.js static generation documentation').\n\n## Checking the output\n\nLet's spin up our site to check how things are looking so far. Fire up the console and type:\n\n```js\n    yarn dev\n```\n\nThis will start the local development server and you'll see just how fast Next.js is able to build our pages and have our local site ready to preview on `http://localhost:3000`.\n\nYou should get a view like this one:\n\n![Next.hs home page running on the local development server](/img/nextjs-article-homepage.jpg)\n\nIf you click on the 'blog articles page\\` link right there under the title, you should see a page that looks like this:\n\n![Blog listing page running on our local development server with data pulled from our headless CMS instance of WordPress](/img/nextjs-article-blogpage.jpg)\n\n_Of course, if you've used your own WordPress instance for your headless CMS with different data and properties, then it's going to look potentially very different. But you get the idea!_\n\n## Handling dynamic routes like blog posts\n\nExcellent. We've made it this far, and we're almost done. Now, we need to complete the circle and handle the routing when someone clicks on our 'Read more >' links we have on our blog listing page.\n\nRight now, if you click them, you're probably going to see an error or a 404 page or some otherwise less desirable result.\n\nUp until now, we've been handling known, static routes — pages that have been explicitly defined ahead of time with fixed endpoints.\n\nHowever, with our blog detail page (i.e. the one that will handle the individual blog article's content), we have an unknown number of these with URLs (i.e. 'slugs') that we also don't know ahead of time.\n\nThat's where _dynamic routing_ comes in with Next.js. We've already seen what that looks like earlier in this very article, and I'd recommend reviewing the [excellent documentation on dynamic routing](https://nextjs.org/docs/routing/dynamic-routes 'Dynamic routing documentation from the Next.js website') from Next.js themselves.\n\n[![Follow me on Mastodon @kendalmintcode@indieweb.social call to action image](/img/mastodon_cta.png)](https://indieweb.social/@kendalmintcode)\n\n### The basic process for dynamic routing\n\nIn order to handle the dynamic route for our blog article page, we need to do four things:\n\n1. Define a dynamic page to handle the route (we've done this with `/pages/blog/[slug].js`).\n2. Create and export a default component within this page to actually handle the data and display some output.\n3. Implement the `getStaticProps` function from Next.js as we've already done for the listing page. This will handle fetching the data for a _single_ blog article.\n4. Implement the `getStaticPaths` function from Next.js. This is another special function that we use for dynamic pages that fetches a list of possible matches for our route so that the correct HTML pages can be created at build time.\n\nLet's fill out the blog article page now.\n\n## Building out the blog detail page\n\nOpen up the dynamic blog article page at `/pages/blog/[slug].js` and paste in the following code, which we're walk through next:\n\n```js\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\n\n// data\nimport { getAllPostsWithSlug, getPost } from '../../lib/api';\n\n// styles\nimport styles from '../../styles/Home.module.css';\nimport blogStyles from '../../styles/Blog.module.css';\n\nexport default function Post({ postData }) {\n  const router = useRouter();\n\n  if (!router.isFallback && !postData?.slug) {\n    return \u003Cp>hmm...looks like an error\u003C/p>;\n  }\n\n  const formatDate = (date) => {\n    const newDate = new Date(date);\n\n    return `${newDate.getDate()}/${\n      newDate.getMonth() + 1\n    }/${newDate.getFullYear()}`;\n  };\n\n  return (\n    \u003Cdiv className={styles.container}>\n      \u003CHead>\n        \u003Ctitle>{postData.title}\u003C/title>\n        \u003Clink rel=\"icon\" href=\"/favicon.ico\" />\n      \u003C/Head>\n\n      \u003Cmain className={styles.main}>\n        {router.isFallback ? (\n          \u003Ch2>Loading...\u003C/h2>\n        ) : (\n          \u003Carticle className={blogStyles.article}>\n            \u003Cdiv className={blogStyles.postmeta}>\n              \u003Ch1 className={styles.title}>{postData.title}\u003C/h1>\n              \u003Cp>{formatDate(postData.date)}\u003C/p>\n            \u003C/div>\n            \u003Cdiv\n              className=\"post-content content\"\n              dangerouslySetInnerHTML={{ __html: postData.content }}\n            />\n          \u003C/article>\n        )}\n        \u003Cp>\n          \u003CLink href=\"/blog\">\n            \u003Ca>back to articles\u003C/a>\n          \u003C/Link>\n        \u003C/p>\n      \u003C/main>\n    \u003C/div>\n  );\n}\n```\n\nLet's break down each section, so you understand what's happening and why.\n\n### Imports for the blog article page\n\nWe have a few more imports in this file, as follows:\n\n```js\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\n\n// data\nimport { getAllPostsWithSlug, getPost } from '../../lib/api';\n\n// styles\nimport styles from '../../styles/Home.module.css';\nimport blogStyles from '../../styles/Blog.module.css';\n```\n\nNothing too unfamiliar here: we're importing our data fetching utilities from the `api.js` file and some styles using the CSS module approach we discussed earlier.\n\nWe're also pulling in the `Head` and `Link` components from Next.js itself so that we can updated the meta data and provide a link back to the main articles listing page.\n\nThe new import we've introduced is the `useRouter` from the `next/router` library. As we've seen, Next.js provides its own built-in router functionality, most of which is handled behind the scenes and you don't need to get involved with. However, occasionally you'll need to tap into the routing powers and that's where `useRouter` comes in.\n\nWe're going to use it to handle a routing fallback situation.\n\nThere's loads of [quality documentation on Next's router feature](https://nextjs.org/docs/api-reference/next/router#userouter 'Documentation for Next.js useRouter feature') on the official docs.\n\n### Next.js router and date formatting\n\nNext up, we have a few small bits of logic at the beginning of our `Post` component:\n\n```js\nconst router = useRouter();\n\nif (!router.isFallback && !postData?.slug) {\n  return \u003Cp>hmm...looks like an error\u003C/p>;\n}\n\nconst formatDate = (date) => {\n  const newDate = new Date(date);\n\n  return `${newDate.getDate()}/${\n    newDate.getMonth() + 1\n  }/${newDate.getFullYear()}`;\n};\n```\n\nThe `formatDate` function should be quite clear and just transforms the rather ugly date string that WordPress provides us into a more human readable format.\n\nThe interesting part here is the `useRouter()` Hook. We define an instance of the `useRouter` Hook into a variable, `router`. Then, we can do a simple error handling escape in this line, `if (!router.isFallback && !postData?.slug)`.\n\nWhat's happening here, is that we're looking at the `isFallback` property to determine if this page being rendered is a fallback version (**we're going to cover this in a moment**) and if it's _not,_ but we also don't have a slug, then this means we won't be able to render a page for this route.\n\nInstead of showing a horrible error page, we're going to return a simple paragraph with an error message in.\n\n**Note: this probably needs a more fleshed out solution for a production environment, but this is the foundation of how we'd handle the error when a dynamic route cannot be found.**\n\n### Providing a fallback in the main content\n\nIf a page isn't quite generated, then we can [optionally provide a fallback page](https://nextjs.org/docs/basic-features/data-fetching#fallback-pages 'Next.js dynamic routing fallback page documentation') or piece of content whilst `getStaticProps` finishes running and generating the page.\n\nThat's what's going on in this slice of our main component's `return` method:\n\n```js\n{\n  router.isFallback ? (\n    \u003Ch2>Loading...\u003C/h2>\n  ) : (\n    \u003Carticle className={blogStyles.article}>\n      \u003Cdiv className={blogStyles.postmeta}>\n        \u003Ch1 className={styles.title}>{postData.title}\u003C/h1>\n        \u003Cp>{formatDate(postData.date)}\u003C/p>\n      \u003C/div>\n      \u003Cdiv\n        className=\"post-content content\"\n        dangerouslySetInnerHTML={{ __html: postData.content }}\n      />\n    \u003C/article>\n  );\n}\n```\n\nIf our `router` object has an `isFallback` property set to `true`, then we'll show a simple heading with a loading message until `getStaticProps` has finished and our content is ready.\n\n### Finding the right article with `getStaticPaths()`\n\nWith the main Blog component defined, we need to add in Next's `getStaticPaths` method as an exported async function. This will run at build time and create our static HTML pages, one for each blog article that it finds.\n\nAdd the following code at the bottom of the `/pages/blog/[slug].js` file:\n\n```js\nexport async function getStaticPaths() {\n  const allPosts = await getAllPostsWithSlug();\n\n  return {\n    paths: allPosts.edges.map(({ node }) => `/blog/${node.slug}`) || [],\n    fallback: true,\n  };\n}\n```\n\nTo begin with, we call the `getAllPostsWithSlug()` from our `api.js` file. This will return us a rather clunky set of JSON data that includes WordPress Post slugs as `node` items, wrapped in an `edges` array.\n\nThat's fine and dandy but we need our slugs to match our site's blog post URL format, `/blog/some-blog-article-slug`.\n\nTo achieve this, we can run a `map` function to produce an array of URL strings that matches this preferred format.\n\nFinally, we're also adding in a `fallback: true` property, which Next.js will automatically inject into its router and make it available via the `useRouter` Hook we looked at previously.\n\n### Fetching the article data from WordPress and GraphQL via `getStaticProps()`\n\nThe last piece of this data-fetching puzzle is to add the same `getStaticProps` function to the blog article page that we did to the blog listing page.\n\nWe'll change it slightly so that we obviously fetch the individual Post data, rather than a list of blog articles, so add the following at the end of the `/pages/blog/[slug].js` file:\n\n```js\nexport async function getStaticProps({ params }) {\n  const data = await getPost(params.slug);\n\n  return {\n    props: {\n      postData: data.post,\n    },\n  };\n}\n```\n\nThe main addition here is that we're pulling in the `params` argument which is destructured from the default `context` object that Next.js provides to the `getStaticProps` method.\n\nThe `params` object contains the route parameters for pages using dynamic routes. In our case, because our dynamic route is `[slug]`, we can refer to this parameter as `params.slug` as you can see we're doing here.\n\nSimilarly, had we called our page `[id]`, we would have referred to this parameter via `params.id`.\n\n## Running the website locally\n\nSo, with all of that in place, let's fire up the dev server again and test things out. Bring up the terminal and type in the dev server command:\n\n```js\n    yarn dev\n```\n\nNavigate to `http://localhost:3000` and view the blog listing page. Now when you click on one of the 'Read more >' links, you'll be taken to a blog article page, dynamically routed, which should look something like this:\n\n![](/img/nextjs-article-blog-detailpage.jpg)\n\n_Again, your results may vary depending on your chosen styling and where you've pulled your data from._\n\n## Demo and repository links\n\nIf you'd like to see the WordPress and Next.js demo running, you can [view the demo on CodeSandbox here](https://codesandbox.io/s/wordpress-next-starter-demo-kd20v).\n\nI've also put together [a GitHub repo](https://github.com/bpk68/wordpress-next-starter) for the project if you'd like to fork it and hack it about.\n\n- View the [WordPress and Next.js demo on CodeSandbox](https://codesandbox.io/s/wordpress-next-starter-demo-kd20v)\n- View the GitHub repo for [the WordPress and Next.js starter project](https://github.com/bpk68/wordpress-next-starter)\n\n## What's next in the series\n\nComing up next, in part three, we'll be creating an XML RSS feed as part of the deployment process so that we can publish and syndicate our posts across the web.\n\nThis is a common feature on just about any blog out there on the web, but it's not as straightforward as you may think when using Next.js. Don't worry though, it's all covered in part three.\n\n_If you like this article, you'll love the other helpful content I post on Twitter._ [_Follow me on Mastodon @kendalmintcode@indieweb.social_](https://indieweb.social/@kendalmintcode 'Follow me on Mastodon @kendalmintcode@indieweb.social') _and say hi._","src/content/blog/using-wordpress-as-a-headless-cms-with-next.js.mdoc","3e1a455e64307e4f","using-wordpress-as-a-headless-cms-with-next.js.mdoc","use-webpack-and-require-context-to-load-html-files",{"id":719,"data":721,"body":727,"filePath":728,"digest":729,"legacyId":730,"deferredRender":156},{"title":722,"description":723,"featured":145,"featuredimage":724,"date":725,"tags":726},"Use Webpack and require.context to load HTML files","In this code article, I'm going to show you how to load fragments of HTML from a folder and output them onto a page using Webpack and require.context().","/img/malcolm-lightbody-668615-unsplash-md.jpg",["Date","2019-03-18T10:48:02.800Z"],[149,150,226],"![Glass fragments](/img/malcolm-lightbody-668615-unsplash-md.jpg)\n\nThere are a lot of ways to build a website these days using templates and templating languages: you've got handlebars, mustache, markdown, jasmine, JSX, and plenty of static generators to deal with them, such as Eleventy, Hugo, Gatsby. And that's not to mention the choice of vanilla HTML or some sort of framework, such as React.\n\nBut sometimes you just need to grab some HTML from some files and get it out onto a page. In this code article, I'm going to show you how to load fragments of HTML from a folder and output them onto a page using Webpack and `require.context()`.\n\nIf you just want to [jump to the bit where we start using require.context](#webpack-and-require-context-to-the-rescue) to load HTML files, go right ahead.\n\n![cube](https://images.unsplash.com/photo-1529700215145-58542a1f36b6?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)\n\nPhoto by [Christian Fregnan](https://unsplash.com/@christianfregnan?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)\n\n### Why use require.context or HTML fragments at all?\n\nIf you're looking to build a website or even a small web app then there are probably more straightforward, scalable methods – see the numerous options mentioned at the start of the article.\n\nRecently, however, I've been building a component UI library (using the amazing [Bulma CSS framework](http://bulma.io/)) and wanted a quick way to simply grab some HTML and include it in an end page – or series of pages – to show a live version of the library in action (a bit like [Bulma's own docs](http://bulma.io/)).\n\nThe HTML files weren't complete documents, however, simply _fragments_ of HTML that encapsulated a particular component from the library to show its markup. Also, I wanted them broken up into separate files in a folder for better organisation in the project. The main issues this presents is finding a reliable way to grab _all_ the files since they're broken up parts, not entire HTML documents, and grabbing them in a logical order, rather than having to have one loooooong document.\n\nI'm using Webpack to bundle everything and deal with the CSS and JS processing, so it made sense to try and find a simple way to involve Webpack to grab these files and process them. Sure, I could have used some sort of templating language, but this would cause a couple of issues:\n\n- Introducing another level of complexity (however small) in what is otherwise a straightforward site.\n- Having to redo the components in a templating language.\n\nThere are other options of course, but some aren't all that feasible...\n\n### Using native HTML include\n\nWell, there isn't one really. There are lots of solutions involving `iframe` and `object`, but none of them are ideal - especially given the drawbacks of using iframes.\n\n### Using the shiny new HTML import feature\n\nThere is a brilliant article by Eric Bidelman on [using HTML imports](https://www.html5rocks.com/en/tutorials/webcomponents/imports/). His method uses the current [Editor's Draft spec from W3C](https://w3c.github.io/webcomponents/spec/imports/) for the importing of HTML files using the `link` element in the head of a document as follows:\n\n```html\n\u003Clink rel=\"import\" href=\"/path/to/awesome/file.html\" />\n```\n\nFrom here, you can use some really simple JavaScript to grab the HTML content and load it onto the page:\n\n```javascript\nconst content = document.querySelector('link[rel=\"import\"]');\nconst outputElement = document.querySelector('#placeToShoveContent');\n\noutputElement.appendChild(content.import);\n```\n\nWhilst this will need a little more JavaScript hacking to handle multiple imports programmatically, it's a nice clean solution that works pretty well using native features. **Unfortunately**, this feature is currently in **working draft** stage and not quite ready for production use.\n\nChecking out [Can I Use's site](https://caniuse.com/#feat=imports) (at the time of writing) it's only available in the latest versions of Chrome and Opera. Sad face.\n\n### Using JavaScript to load it up\n\nAgain, you can use some vanilla JS or even jQuery to load up other files, something like this:\n\n```javascript\n$(function () {\n  $('#placeToShoveContent').load('path/to/file.html');\n});\n```\n\nThat's simple enough, but then it means loading jQuery into the project, just to do that. The vanilla JS solution is slightly more verbose then is ideal, mainly using AJAX to request the files (which is what the `jQuery.load()` function is really doing under the hood anyway).\n\n## \u003Ca name=\"webpack-and-require-context-to-the-rescue\">\u003C/a>Webpack and require.context() to the rescue!\n\nSo then, since we're already using Webpack to build this thing, let's leverage one of Webpack's great features: require.context().\n\n(By the way, if you're looking for a [good Webpack starter kit](/blog/quick-start-javascript-projects-with-this-webpack-project-starter-kit), then I have a [great template available on GitHub](https://github.com/bpk68/web-template))\n\n### First, configure html-loader to process our files\n\nFirstly, because we're loading HTML files, we'll need to install Webpack's [html-loader](https://webpack.js.org/loaders/html-loader/); an easy feat with npm/yarn:\n\n`npm i -D html-loader` or `yarn add --dev html-loader`\n\nFrom here, we need to add the html-loader configuration into our `webpack.config.js`\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.html$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'html-loader',\n      },\n    },\n    ...{\n      //other rules here\n    },\n  ];\n}\n```\n\nNow, Webpack can recognise and process HTML files for us if we do something like this:\n\n`require('/path/to/html/file.html');`\n\nBut that's just one file, we need to load a bunch in, which will be a growing list – impractical to keeping adding a single line at a time.\n\n### Using require.context()\n\nNow we can load HTML files, we can set about using `require.context()` to load in some files within a folder and process their contents.\n\nHere's what I did to achieve just that:\n\n```javascript\n// grab the element where we'll output the HTML to\nconst output = document.querySelector('#output');\n\n// create a 'cache' where we can store our built up HTML from our fragments\nlet htmlFragmentCache = {};\n\n// here, we're creating an anonymous function that loads up our HTML fragments\n// then it adds them to our cache object\nconst importAll = (requireContext) =>\n  requireContext\n    .keys()\n    .forEach((key) => (htmlFragmentCache[key] = requireContext(key)));\n\n// next, we call our importAll() function to load the files\n// notice how this is where we call the require.context() function\n// it uses our file path, whether to load subdirectories and what file type to get\nimportAll(require.context('./fragments', false, /.html$/));\n\n// finally, we can loop over our cache's keys and add the HTML to our output element\nObject.keys(htmlFragmentCache).forEach(\n  (key) => (output.innerHTML += htmlFragmentCache[key])\n);\n```\n\nAnd it's as simple as that! Of course, even those scant few lines can be condensed into an [anonymous function](/blog/how-to-use-arrow-functions-in-javascript-es6) (really, an example of an [Immediately Invoked Function Expression](https://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/) or IIFE) to create an even cleaner, terser end result:\n\n```javascript\n((context) => {\n  // need to clear out the current element's contents (just in case!)\n  output.innerHTML = '';\n\n  // now, load up the html fragments and add them to the page\n  context.keys().forEach((key) => (output.innerHTML += context(key)));\n})(require.context('./fragments', false, /.html$/));\n```\n\nAnd there we have it. A really clean, simple way to load in a bunch of HTML files in a folder, using `require.context()` in a JavaScript file, loaded, processed and bundled using Webpack. Bosh!\n\n## Any other ideas?\n\nComments: you got 'em! Let me know how you would (or have) handled this sort of thing in the past. Do you have an easier solution, something better? I'd love to hear your thoughts and ideas.","src/content/blog/use-webpack-and-require-context-to-load-html-files.mdoc","37453e2ac979785d","use-webpack-and-require-context-to-load-html-files.mdoc","what-bruce-lee-taught-me-about-business",{"id":731,"data":733,"body":739,"filePath":740,"digest":741,"legacyId":742,"deferredRender":156},{"title":734,"description":735,"featured":145,"featuredimage":736,"date":737,"tags":738},"What Bruce Lee taught me about business","Ever wondered how martial arts could help you start a business, become better at your job, improve your life? Here's how it worked for me.","/img/bruce-lee-statue.jpg",["Date","2018-11-14T11:01:15.566Z"],[177],"![Bruce Lee statue in Hong Kong](/img/bruce-lee-statue.jpg)\n\nThis is a [shameless replication of my own article](https://www.linkedin.com/pulse/what-bruce-lee-taught-me-business-robert-kendal/) with the same name from [LinkedIn](https://www.linkedin.com/in/robkendal/), but here we are.\n\nI've been an avid fan of martial arts since I was in my early double digits. I studied karate, taekwondo, kung foo and settled on ju jitsu as my primary passion. After a few years of training, I gained my shodan, the much coveted black belt.\n\nThat's when it all started falling into place and happening. With my black belt in hand, I went on to train and teach other students, culminating in leading a group session of over 300 students at a quarterly grading event.\n\nOne of my proudest moments was when I was asked to join the North-East Ju Jitsu Display Team. It was mind-blowing. I was just out of my teens and yet I was performing for crowds across the North-East, showcasing various martial arts skills alongside practical self-defence techniques.\n\nIt's not a well-known fact about me, but it all started when I watched Enter the Dragon, one of the best martial arts films ever made.\n\n### It all started with a single film...\n\nBruce Lee's Enter the Dragon was revolutionary. Sure, I came to find it years after it wowed audiences across the globe, but I remember watching it and having one of the sudden realisations that only comes along a few times in your life.\n\nThere is a line, right at the opening of the film where Bruce is teaching his student, Lao, and he says:\n\n> \"Don't think. Feel. It is like a finger pointing away to the moon. Don't concentrate on the finger or you will miss all that heavenly glory.\"\n\nThat was it for me. Such a simple line from Taoism, but it's a good reminder to keep your journey in mind, not to get bogged down in the mundane and to step back and consider the big picture, rather than getting hung up on a handful of smaller parts.\n\nIt both triggered a passion for pursuing martial arts training and served to help me through those tough times when it's all going wrong and frustration sets in (there are lots of those in learning a new skill as well as in business).\n\n### So, what did I learn about business?\n\nI started my own company in 2011 in Red Guerrilla, a local web design and development agency. I was initially working in a contract and freelance capacity but discovered my business partner we formed CreatedRed Media, which we transformed into a HubSpot partner and whole-picture inbound marketing digital agency.\n\nStarting and running a business is not quite as fairytale as some would have you believe and when I started, I had very little experience in business in general and virtually _zero_ contacts to reach out to in the business community.\n\nBut business is about more than knowing the numbers, doing the research, networking, sales, marketing, or even having a great idea. All of those things are important, vital even, but you'll find that the most successful people have a number of key qualities they all share:\n\n- Discipline\n- Focus\n- Positive attitude\n- Self-confidence\n- Attention to detail\n- Humility\n- Compassion\n- Generosity\n- Belief in the power of knowledge\n- Resilience\n- Strength - mentally and physically\n\nAnd, wouldn't you know it, these are all qualities that you can gain from studying martial arts. I wasn't genetically gifted, more or less talented than anyone else in my classes, but I managed to achieve what others hadn't. This was simply due to consistency and relentlessness.\n\nI showed up to every class, practised feverishly at home, got back up when I got knocked down (literally), and always made sure I took the time to listen to everyone - you never know who has something to teach you.\n\nThe same qualities transferred over to my professional life and have helped me to build a business that I have been immensely proud to be a part of.\n\nWhilst this might seem a little like a puff piece, it's really designed to give you a little insight into what helped me start my own business and how my personal life and hobbies have given me skills and a mindset that I use every day in my working life.\n\nWhat skills or qualities have you gained from an unlikely source that have helped your business or working life?","src/content/blog/what-bruce-lee-taught-me-about-business.mdoc","3898dbe9030d6c86","what-bruce-lee-taught-me-about-business.mdoc","why-is-css-in-js-a-bad-or-good-idea",{"id":743,"data":745,"body":751,"filePath":752,"digest":753,"legacyId":754,"deferredRender":156},{"title":746,"description":747,"featured":145,"featuredimage":748,"date":749,"tags":750},"Why is CSS-in-JS a bad (or good) idea?","CSS-in-JS is demonised and heralded on social media, but is CSS-in-JS really all that bad? Or is it the digital devil? Read why I think everyone's wrong","/img/greg-rakozy-129733-unsplash.jpg",["Date","2018-12-19T14:08:05.726Z"],[150,338,149,480],"![Lovely web development books on a shelf](/img/greg-rakozy-129733-unsplash.jpg 'All you need to build a website')\n\nOne of the latest developer debates to have cropped up recently on twitter is whether or not CSS-in-JS is a good idea or not (or, as an alternative view, _why everyone who does not look at things the same way as you is obviously wrong!_)\n\nThere are many, many back and forth's to be found on the subject, some for, some against, some missing the point. Even prolific Twitterers and thought-leaders such as [Snook](\"https://snook.ca/\") got involved:\n\n{% tweet url=\"https://twitter.com/snookca/status/1074287183832457216?ref_src=twsrc%5Etfw\" /%}\n\n{% tweet url=\"https://twitter.com/grimmweb/status/1074960572985282560?ref_src=twsrc%5Etfw\" /%}\n\n{% tweet url=\"https://twitter.com/theKashey/status/1074947149891174402?ref_src=twsrc%5Etfw\" /%}\n\n> Oh and CSS files have \\*waaaay\\* better tooling than anything CSS-in-JS has to offer. Y'all keep talking about static analysis in JS but CSS linters and shit are where it's at\n> — Jamie-Presenting Nipples 🏳️‍🌈 (@jamiebuilds) [December 14, 2018](\"https://twitter.com/jamiebuilds/status/1073511705781522432?ref_src=twsrc%5Etfw\")\n\nPersonally, I like the snarky ones like this :p\n\n{% tweet url=\"https://twitter.com/davidbrunelle/status/1073781429509619712?ref_src=twsrc%5Etfw\" /%}\n\nUltimately, the problem is, people end up getting a little personal and going off track, attacking other people's stack, methodologies, processes, habits, development style, etc. and end up missing the point. It's unhelpful and pointless at best and damages the developer community at worst.\n\nFor me, with CSS-in-JS (and a lot of these sorts of development-related arguments) there are two vital things everyone forgets about:\n\n1. The end user\n2. Individual/team development ecosystems\n\nSo let's address them.\n\n### The end user doesn't care about CSS-in-JS\n\nLet's get this out of the way: generally, the end user doesn't care about the underlying 'magic' that makes the thing do the thing. End users, consumers, care about things like:\n\n- Being able to achieve a desired goal (search for a thing, buy a thing, do a thing, etc.) **AKA functionality**\n- Doing it quickly and efficiently, with as little friction as possible, **AKA performance**\n- Catering for their needs, **AKA accessibility, UX**\n\nThey don't know about CSS-in-JSS, care about CSS-in-JS or any of that witchcraft that makes their app or website work.\n\nYes, they care about the outcome that is supported and enabled by the underpinning technology, but you have to ask yourself, if you're building something for users, then some of your decision-making should be based around their needs, drivers, goals and so on.\n\n**If your development practices use CSS-in-JS and that enables you to make a better, more robust end product then great! It probably won't matter to the target audience.**\n\n### Development ecosystems\n\nYou, the developer or maybe your development team or company. It cares very much about what technologies are used and in what way, but again, as developers we care about some larger more abstract things than whether or not we should stuff CSS into our JavaScript:\n\n- Avoiding legacy code bases (especially sizeable ones), where we've fallen too far behind from the current standards\n- Reducing and avoiding technical debt - similar to the legacy argument\n- Creating and fostering a code base that is easy to maintain and expand upon\n- Agreeing and adhering to a set of standards and habits that support the maintainable code base\n- Testing all the things! Making a robust development environment that is easily tested.\n\nIf your team agrees that moving to a system of putting CSS into JS then go for it! **If that will help your team create great things quicker, more efficiently, more robustly, and you're all on the same page - ace!**\n\n### When is CSS-in-JS is a bad idea?\n\nThere are a few cons to CSS-in-JS that I've seen floating about:\n\n- What happens when the JavaScript fails? Plain, vanilla CSS doesn't need JS to work just fine\n- The learning curve - it's CSS, but in a different way\n- More dependencies\n- Performance hits - some evidence suggests loading CSS in this way negatively impacts performance\n- It's not the usual way of doing things...?\n\nPersonally, I don't like the idea of CSS-in-JS, but this is driven more by stylistic choices. I like that CSS is a fully-featured thing in its own right and I have always subscribed to the _separation of concerns_ rule. Plus, I have a wealth of experience with CSS from the early days, so I'm comfortable using CSS how the digital gods intended.\n\nI prefer my CSS in a separate CSS or SASS file, but will happily import this into a JS module. I can harness the modular nature of modern development (e.g. React) but keep the physical separation of languages into their respective boxes.\n\nIf there is a killer argument for _not_ going for it, however, it would be mixing styles - styles - as in approaches, not the cascading type. For example, if half your app is using regular CSS and then along comes part of your development team and starts using CSS-in-JS then this could lead to an unmaintainable style-rule nightmare that consumes your very existence....or, you know, creates a few maintenance headaches down the line.\n\n### Why is CSS-in-JS a good idea?\n\nThere is a [great article about CSS-in-JS from Hackernoon on Medium](\"https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc\") (albeit almost a year old - told you it was a long-winded and enduring argument!) about the background to and pros and cons of CSS-in-JS.\n\nSome of the pros include:\n\n- Closer alignment with modular, componentised development\n- Scoped selectors\n- Improved vendor prefixing\n- Code sharing via constants and functions\n- Reduced load by only loading on-screen vital styles\n- Reducing or eliminating dead code\n- Unit tests for CSS...hurrah?\n\n### It's all about choices, and there are few wrong ones\n\nSometimes there are clearly wrong choices: making toast in the bath, wearing flip-flops in the snow. But when it comes to coding, it really does largely boil down to preference and maintainability.\n\n> **If putting all your CSS eggs into a JS basket makes you more productive, happy, able to develop things better, then go for it.**\n\nIf you prefer the old (standard) ways, then that's good too.\n\n### Where do you land on the CSS-in-JS debate?\n\nDust off those opinions and scattergun them into the comments. Let me know where you stand, what your experience of this heinous/miraculous practice lies.","src/content/blog/why-is-css-in-js-a-bad-or-good-idea.mdoc","7129841136df60ac","why-is-css-in-js-a-bad-or-good-idea.mdoc","projects",["Map",757,758,776,777,795,796,814,815],"g-sheets",{"id":757,"data":759,"body":766,"filePath":767,"digest":768,"rendered":769,"legacyId":775},{"img":760,"imgAlt":761,"title":762,"subtitle":763,"href":764,"order":765},"/img/g-sheets-logo.png","Google Sheets icon","Google Sheets Reader","g-sheets-api","https://github.com/bpk68/g-sheets-api",2,"This tiny (but hopefully mighty) utility package helps fetch, read and process data from a Google Sheet without the faff of having to deal with the full-blown Google Sheets API","src/content/projects/g-sheets.md","5095a9965cb60536",{"html":770,"metadata":771},"\u003Cp>This tiny (but hopefully mighty) utility package helps fetch, read and process data from a Google Sheet without the faff of having to deal with the full-blown Google Sheets API\u003C/p>",{"headings":772,"imagePaths":773,"frontmatter":774},[],[],{"img":760,"imgAlt":761,"title":762,"subtitle":763,"href":764,"order":765},"g-sheets.md","node-api-starter",{"id":776,"data":778,"body":785,"filePath":786,"digest":787,"rendered":788,"legacyId":794},{"img":779,"imgAlt":780,"title":781,"subtitle":782,"href":783,"order":784},"/img/nodejs-new-pantone-black.png","Node JS logo","Node API Server Starter Kit (TypeScript) -- UPDATED","api-server-starter","https://github.com/bpk68/api-server-starter-ts",4,"This popular, updated starter kit (currently being used as part of the curriculum in a university course) contains everything you'll need to create your very own Node-based API server. It's been fully rewritten to use the latest version of Express, TypeScript, and is configured to serve JSON files for data.","src/content/projects/node-api-starter.md","240ecfb3426ee4d9",{"html":789,"metadata":790},"\u003Cp>This popular, updated starter kit (currently being used as part of the curriculum in a university course) contains everything you’ll need to create your very own Node-based API server. It’s been fully rewritten to use the latest version of Express, TypeScript, and is configured to serve JSON files for data.\u003C/p>",{"headings":791,"imagePaths":792,"frontmatter":793},[],[],{"img":779,"imgAlt":780,"title":781,"subtitle":782,"href":783,"order":784},"node-api-starter.md","remote-dev-jobs",{"id":795,"data":797,"body":804,"filePath":805,"digest":806,"rendered":807,"legacyId":813},{"img":798,"imgAlt":799,"title":800,"subtitle":801,"href":802,"order":803},"/img/neeps-panda.png","Neeps the panda. Official logo and mascot of Remote Dev Jobs.","Remote Dev Jobs UK","fully remote jobs for devs in the UK","https://remotedevjobs.uk",1,"Currently in production, Remote Dev Jobs UK aims to pair developers and tech workers with the best fully remote jobs that the UK tech scene has to offer. You can visit the site and sign up to be notified when it's ready to launch.","src/content/projects/remote-dev-jobs.md","3fc569218ee1be1a",{"html":808,"metadata":809},"\u003Cp>Currently in production, Remote Dev Jobs UK aims to pair developers and tech workers with the best fully remote jobs that the UK tech scene has to offer. You can visit the site and sign up to be notified when it’s ready to launch.\u003C/p>",{"headings":810,"imagePaths":811,"frontmatter":812},[],[],{"img":798,"imgAlt":799,"title":800,"subtitle":801,"href":802,"order":803},"remote-dev-jobs.md","visual-query",{"id":814,"data":816,"body":823,"filePath":824,"digest":825,"rendered":826,"legacyId":832},{"img":817,"imgAlt":818,"title":819,"subtitle":820,"href":821,"order":822},"/img/react-logo.png","React logo","React Visual Query Builder","react-visual-query-builder","https://github.com/bpk68/react-visual-query-builder",3,"Driven by a need for a more customised query builder tool built in React, I developed an open source query builder that will output a structured JSON query object comprised of rules, rule-groups and a number of field components depending on desired input type.","src/content/projects/visual-query.md","956940e3439e022c",{"html":827,"metadata":828},"\u003Cp>Driven by a need for a more customised query builder tool built in React, I developed an open source query builder that will output a structured JSON query object comprised of rules, rule-groups and a number of field components depending on desired input type.\u003C/p>",{"headings":829,"imagePaths":830,"frontmatter":831},[],[],{"img":817,"imgAlt":818,"title":819,"subtitle":820,"href":821,"order":822},"visual-query.md"]
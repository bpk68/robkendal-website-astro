---
import { getCollection, getEntryBySlug } from 'astro:content';
import { SITE_URL } from '../../config';
import { generateSocialImage } from 'src/lib/utils';
import BlogPostMeta from '../../components/BlogPostMeta.astro';
import ContentLayout from '../../layouts/ContentLayout.astro';
import CallToAction from 'src/components/CallToAction.astro';
import AuthorBio from 'src/components/AuthorBio.astro';
import WebMentions from 'src/components/WebMentions.astro';
import PostComments from 'src/components/PostComments.astro';
import RelatedPosts from 'src/components/RelatedPosts.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  // We don't want to generate pages for posts that are in draft status
  const filteredPosts = posts.filter((p) => p.data.draft !== true);

  return filteredPosts.map((post) => {
    return { params: { slug: post.slug } };
  });
}

const { slug } = Astro.params;
if (typeof slug !== 'string') {
  throw Error(`slug should be string. Received: ${slug}`);
}

const post = await getEntryBySlug('blog', slug);

if (!post) {
  throw new Error(`Could not find post with slug: ${slug}`);
}

const { Content } = await post.render();

const socialImagePath = generateSocialImage({ title: post?.data.imgtitle });

const imageUrl = socialImagePath ?? post?.data.featuredimage;
const ogImageAbsoluteUrl =
  socialImagePath ?? imageUrl ? new URL(imageUrl, SITE_URL).toString() : '';
---

<ContentLayout
  title={post.data.title || ''}
  date={post.data.date}
  tags={post.data.tags}
>
  <BlogPostMeta
    title={post.data.title}
    description={post.data.description}
    publishDate={post.data.date.toISOString()}
    pagePath={`/blog/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />

  <Fragment slot="content">
    {
      !post.data.featuredimage && (
        <div class="not-prose">
          <img
            src={imageUrl}
            alt={`blog header image for article on ${post.data.title}`}
            class="mt-7"
          />
        </div>
      )
    }
    <Content />
  </Fragment>

  <Fragment slot="additional-content">
    <div class="border-b"></div>
    {
      post.data.tags.some((tag) => tag.toLowerCase() === 'react') ? (
        <CallToAction
          type="post"
          title="Learn React from scratch"
          img="/img/publications/react-guide-course.png"
          buttons={[
            {
              href: 'https://robkendal.co.uk/publications',
              text: 'Find out more',
            },
          ]}
        >
          The Beginner's Guide to Real World React
        </CallToAction>
      ) : (
        <CallToAction
          type="post"
          title="Find your perfect remote job"
          img="/img/cta/cta-remote-dev-jobs.png"
          buttons={[
            {
              href: 'https://remotedevjobs.uk',
              text: 'Take a look',
            },
          ]}
          variant="secondary"
        >
          My latest project will help pair developers looking for a new job with
          the best fully remote roles that the UK has to offer.
        </CallToAction>
      )
    }
    <AuthorBio />
    <WebMentions url={`blog/${slug}`} />
    <PostComments slug={slug} />
    <div class="border-b"></div>
    <RelatedPosts tags={post.data.tags} pathToSkip={slug} />
  </Fragment>
</ContentLayout>

<script
  define:vars={{
    id: slug,
    tags: post.data.tags,
  }}
>
  const adHtml = `
      <div
          data-ea-publisher="robkendal-co-uk"
          class="horizontal adaptive flat"
          data-ea-type="image"
          id="ea_text_id_${id}"
          data-ea-keywords="${tags.join('|')}"
          data-ea-manual="true"
          data-ea-style="stickybox"
      />
    `;

  function applyAds() {
    const articleContent = document.querySelector(
      '#article-content .post-content'
    );
    const selectParagraph = articleContent.querySelectorAll('p')[3];

    selectParagraph.insertAdjacentHTML('afterend', adHtml);

    try {
      if (ethicalads) {
        ethicalads.load();
      }
    } catch (error) {
      // ethical ads not found
    }
  }
  window.addEventListener('load', applyAds);

  return () => window.removeEventListener('load', applyAds);
</script>
